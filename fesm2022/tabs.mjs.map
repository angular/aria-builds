{"version":3,"file":"tabs.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/tabs/tabs.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DeferredContent, DeferredContentAware} from '@angular/aria/deferred-content';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  booleanAttribute,\n  computed,\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  model,\n  linkedSignal,\n  signal,\n  Signal,\n  afterRenderEffect,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport {TabListPattern, TabPanelPattern, TabPattern} from '@angular/aria/private';\n\ninterface HasElement {\n  element: Signal<HTMLElement>;\n}\n\n/**\n * Sort directives by their document order.\n */\nfunction sortDirectives(a: HasElement, b: HasElement) {\n  return (a.element().compareDocumentPosition(b.element()) & Node.DOCUMENT_POSITION_PRECEDING) > 0\n    ? 1\n    : -1;\n}\n\n/**\n * A Tabs container.\n *\n * Represents a set of layered sections of content. The Tabs is a container meant to be used with\n * TabList, Tab, and TabPanel as follows:\n *\n * ```html\n * <div ngTabs>\n *   <ul ngTabList>\n *     <li ngTab value=\"tab1\">Tab 1</li>\n *     <li ngTab value=\"tab2\">Tab 2</li>\n *     <li ngTab value=\"tab3\">Tab 3</li>\n *   </ul>\n *\n *   <div ngTabPanel value=\"tab1\">\n *      <ng-template ngTabContent>Tab content 1</ng-template>\n *   </div>\n *   <div ngTabPanel value=\"tab2\">\n *      <ng-template ngTabContent>Tab content 2</ng-template>\n *   </div>\n *   <div ngTabPanel value=\"tab3\">\n *      <ng-template ngTabContent>Tab content 3</ng-template>\n *   </div>\n * ```\n */\n@Directive({\n  selector: '[ngTabs]',\n  exportAs: 'ngTabs',\n  host: {\n    'class': 'ng-tabs',\n  },\n})\nexport class Tabs {\n  /** The TabList nested inside of the container. */\n  private readonly _tablist = signal<TabList | undefined>(undefined);\n\n  /** The TabPanels nested inside of the container. */\n  private readonly _unorderedPanels = signal(new Set<TabPanel>());\n\n  /** The Tab UIPattern of the child Tabs. */\n  tabs = computed(() => this._tablist()?.tabs());\n\n  /** The TabPanel UIPattern of the child TabPanels. */\n  unorderedTabpanels = computed(() =>\n    [...this._unorderedPanels()].map(tabpanel => tabpanel._pattern),\n  );\n\n  register(child: TabList | TabPanel) {\n    if (child instanceof TabList) {\n      this._tablist.set(child);\n    }\n\n    if (child instanceof TabPanel) {\n      this._unorderedPanels().add(child);\n      this._unorderedPanels.set(new Set(this._unorderedPanels()));\n    }\n  }\n\n  deregister(child: TabList | TabPanel) {\n    if (child instanceof TabList) {\n      this._tablist.set(undefined);\n    }\n\n    if (child instanceof TabPanel) {\n      this._unorderedPanels().delete(child);\n      this._unorderedPanels.set(new Set(this._unorderedPanels()));\n    }\n  }\n}\n\n/**\n * A TabList container.\n *\n * Controls a list of Tab(s).\n */\n@Directive({\n  selector: '[ngTabList]',\n  exportAs: 'ngTabList',\n  host: {\n    'role': 'tablist',\n    'class': 'ng-tablist',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-orientation]': '_pattern.orientation()',\n    '[attr.aria-activedescendant]': '_pattern.activedescendant()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': 'onFocus()',\n  },\n})\nexport class TabList implements OnInit, OnDestroy {\n  /** A reference to the tab list element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent Tabs. */\n  private readonly _tabs = inject(Tabs);\n\n  /** The Tabs nested inside of the TabList. */\n  private readonly _unorderedTabs = signal(new Set<Tab>());\n\n  /** The internal tab selection state. */\n  private readonly _selection = linkedSignal(() =>\n    this.selectedTab() ? [this.selectedTab()!] : [],\n  );\n\n  /** Text direction. */\n  readonly textDirection = inject(Directionality).valueSignal;\n\n  /** The Tab UIPatterns of the child Tabs. */\n  readonly tabs = computed(() =>\n    [...this._unorderedTabs()].sort(sortDirectives).map(tab => tab._pattern),\n  );\n\n  /** Whether the tablist is vertically or horizontally oriented. */\n  readonly orientation = input<'vertical' | 'horizontal'>('horizontal');\n\n  /** Whether focus should wrap when navigating. */\n  readonly wrap = input(true, {transform: booleanAttribute});\n\n  /** Whether disabled items in the list should be skipped when navigating. */\n  readonly skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** The focus strategy used by the tablist. */\n  readonly focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** The selection strategy used by the tablist. */\n  readonly selectionMode = input<'follow' | 'explicit'>('follow');\n\n  /** Whether the tablist is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** The current selected tab. */\n  readonly selectedTab = model<string | undefined>();\n\n  /** The TabList UIPattern. */\n  readonly _pattern: TabListPattern = new TabListPattern({\n    ...this,\n    items: this.tabs,\n    value: this._selection,\n    activeItem: signal(undefined),\n    element: () => this._elementRef.nativeElement,\n  });\n\n  /** Whether the tree has received focus yet. */\n  private _hasFocused = signal(false);\n\n  constructor() {\n    afterRenderEffect(() => this.selectedTab.set(this._selection()[0]));\n\n    afterRenderEffect(() => {\n      if (!this._hasFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n\n  onFocus() {\n    this._hasFocused.set(true);\n  }\n\n  ngOnInit() {\n    this._tabs.register(this);\n  }\n\n  ngOnDestroy() {\n    this._tabs.deregister(this);\n  }\n\n  register(child: Tab) {\n    this._unorderedTabs().add(child);\n    this._unorderedTabs.set(new Set(this._unorderedTabs()));\n  }\n\n  deregister(child: Tab) {\n    this._unorderedTabs().delete(child);\n    this._unorderedTabs.set(new Set(this._unorderedTabs()));\n  }\n}\n\n/** A selectable tab in a TabList. */\n@Directive({\n  selector: '[ngTab]',\n  exportAs: 'ngTab',\n  host: {\n    'role': 'tab',\n    'class': 'ng-tab',\n    '[attr.data-active]': '_pattern.active()',\n    '[attr.id]': '_pattern.id()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-selected]': '_pattern.selected()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-controls]': '_pattern.controls()',\n  },\n})\nexport class Tab implements HasElement, OnInit, OnDestroy {\n  /** A reference to the tab element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent Tabs. */\n  private readonly _tabs = inject(Tabs);\n\n  /** The parent TabList. */\n  private readonly _tabList = inject(TabList);\n\n  /** A global unique identifier for the tab. */\n  private readonly _id = inject(_IdGenerator).getId('ng-tab-');\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The parent TabList UIPattern. */\n  readonly tablist = computed(() => this._tabList._pattern);\n\n  /** The TabPanel UIPattern associated with the tab */\n  readonly tabpanel = computed(() =>\n    this._tabs.unorderedTabpanels().find(tabpanel => tabpanel.value() === this.value()),\n  );\n\n  /** Whether a tab is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** A local unique identifier for the tab. */\n  readonly value = input.required<string>();\n\n  /** The Tab UIPattern. */\n  readonly _pattern: TabPattern = new TabPattern({\n    ...this,\n    id: () => this._id,\n    tablist: this.tablist,\n    tabpanel: this.tabpanel,\n    value: this.value,\n  });\n\n  ngOnInit() {\n    this._tabList.register(this);\n  }\n\n  ngOnDestroy() {\n    this._tabList.deregister(this);\n  }\n}\n\n/**\n * A TabPanel container for the resources of layered content associated with a tab.\n *\n * If a tabpanel is hidden due to its corresponding tab is not activated, the `inert` attribute\n * will be applied to the tabpanel element to remove it from the accessibility tree and stop\n * all the keyboard and pointer interactions. Note that this does not visually hide the tabpenl\n * and a proper styling is required.\n */\n@Directive({\n  selector: '[ngTabPanel]',\n  exportAs: 'ngTabPanel',\n  host: {\n    'role': 'tabpanel',\n    'class': 'ng-tabpanel',\n    '[attr.id]': '_pattern.id()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.inert]': '_pattern.hidden() ? true : null',\n    '[attr.aria-labelledby]': '_pattern.labelledBy()',\n  },\n  hostDirectives: [\n    {\n      directive: DeferredContentAware,\n      inputs: ['preserveContent'],\n    },\n  ],\n})\nexport class TabPanel implements OnInit, OnDestroy {\n  /** The DeferredContentAware host directive. */\n  private readonly _deferredContentAware = inject(DeferredContentAware);\n\n  /** The parent Tabs. */\n  private readonly _Tabs = inject(Tabs);\n\n  /** A global unique identifier for the tab. */\n  private readonly _id = inject(_IdGenerator).getId('ng-tabpanel-', true);\n\n  /** The Tab UIPattern associated with the tabpanel */\n  readonly tab = computed(() => this._Tabs.tabs()?.find(tab => tab.value() === this.value()));\n\n  /** A local unique identifier for the tabpanel. */\n  readonly value = input.required<string>();\n\n  /** The TabPanel UIPattern. */\n  readonly _pattern: TabPanelPattern = new TabPanelPattern({\n    ...this,\n    id: () => this._id,\n    tab: this.tab,\n  });\n\n  constructor() {\n    afterRenderEffect(() => this._deferredContentAware.contentVisible.set(!this._pattern.hidden()));\n  }\n\n  ngOnInit() {\n    this._Tabs.register(this);\n  }\n\n  ngOnDestroy() {\n    this._Tabs.deregister(this);\n  }\n}\n\n/**\n * A TabContent container for the lazy-loaded content.\n */\n@Directive({\n  selector: 'ng-template[ngTabContent]',\n  exportAs: 'ngTabContent',\n  hostDirectives: [DeferredContent],\n})\nexport class TabContent {}\n"],"names":["sortDirectives","a","unorderedTabpanels","computed","_unorderedPanels","map","tabpanel","_pattern","ngDevMode","debugName","register","child","TabList","_tablist","set","Set","deregister","undefined","TabPanel","delete","i0","ɵɵngDeclareFactory","ɵdir","ɵɵngDeclareDirective","minVersion","version","type","Tabs","isStandalone","selector","host","classAttribute","exportAs","ngImport","Directive","args","selectedTab","Directionality","valueSignal","sort","tab","orientation","input","transform","booleanAttribute","focusMode","selectionMode","disabled","model","TabListPattern","items","tabs","value","_selection","element","_elementRef","nativeElement","signal","constructor","afterRenderEffect","_hasFocused","setDefaultState","onFocus","ngOnDestroy","_tabs","_unorderedTabs","add","ɵfac","deps","target","ɵɵFactoryTarget","inputs","classPropertyName","publicName","isSignal","isRequired","transformFunction","wrap","skipDisabled","outputs","attributes","listeners","properties","decorators","ElementRef","_tabList","inject","_id","_IdGenerator","getId","find","required","TabPattern","tablist","ngOnInit","Tab"],"mappings":";;;;;;;;AAoCE,SACEA,cAAAA,CAAAC,CAAE;;;;;;;;;;;;;AA+BJC,EAAAA,kBAAA,GAAAC,QAAA,CAAAC,MAAAA,CAAAA,GAAAA,IAAAA,CAAAA,gBAAkB,EAAAC,CAAAA,CAAAA,GAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,QAAA,OAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAClBC,EAAAA,QAAMA,CAAAC,KAAA,EAAA;IAEL,IAAAA,KAAA,YAAAC,OAAA,EAAA;AACF,MAAA,IAAA,CAAAC,QAAA,CAAAC,GAAA,CAAAH,KAAA,CAAA;AAuCD;;;MAIG,IAAAP,CAAAA,gBAAA,CAAAU,GAAA,CAAA,IAgBHC,IAAa,IAAA,CAAAX,gBAAO,EAAA,CAAA,CAAA;;;AAO2BY,EAAAA,UAAAA,CAAAL,KAAA,EAAA;IAC5B,IAAAA,KAAA,YAAAC,OAAA,EAAA;AAGU,MAAA,IAAA,CAAAC,QAAA,CAAAC,GAAe,CAAAG,SAAM,CAC9C;;QAION,KAAA,YAAAO;AAEmC,MAAA,IAAA,CAAAd,gBAAA,EAAA,CAAAe,MAAA,CAAAR,KAAA,CAAA;AACnC,MAAA,IAAA,CAAAP,gBAAA,CAAAU,GAAA,CAAAC,IAAAA,GAAA,MAAAX,gBAAA,EAAA,CAAA,CAAA;AAKA;;aAGA,GAAOgB,EAAA,CAAAC;;;;;;;;SAE4DC,IAAA,GAAAF,EAAA,CAAAG,oBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,IAAA,EAAAC,IAAA;IAAAC,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,UAAA;IAAAC,IAAA,EAAA;MAAAC,cAAA,EAAA;AAAA,KAAA;IAAAC,QAAA,EAAA,CAAA,QAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAb;AAAA,GAAA,CAAA;;AAInE,EAAA,CAAA,wBAAA,CAAA;AAAAI,EAAAA,UAAyD;;;;;AAEhBE,IAAAA,IAAA,EAAAQ,SAAA;IACzCC,IAAA,EAAA,CAAA;;;;;;;;;AArGA,MAAA,OAAA,CAAA;;;;;;kDAqIT,WAAAC,WAAA,EAAA,CAAA,GAAA,EAAA,CAAA;yBAIAC,cAAA,EAAAC,WAAA;+CAIA,EAAA,CAAA,CAAAC,IAAA,CAAAvC,cAAA,CAAAK,CAAAA,GAAA,CAAAmC,GAAA,IAAAA,GAAA,CAAAjC,QAAA,OAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;EAIEgC,WAAA,GAAAC,KAAA,CAAA,YAAA,EAAA,IAAAlC,SAAgC,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;yBAMlCD,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA,MAAA;AAAAkC,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;;;;;;;EAnGAC,SAAA,GAAAH,KAAA,CAAA,QAAA,EAAA,IAAAlC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAqB,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAGnBqC,EAAAA,aAAA,GAAAJ,KAAA,CAAAlC,QAAAA,EAAAA,IAAAA,SAAA,GAAqB,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;EAGrBsC,QAAA,GAAAL,KAAA,CAAA,KAAA,EAAA,IAAAlC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA,UAAA;AAAAkC,IAAAA,SAAA,EAAmDC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;AAGnDR,EAAAA,WAAA,GAAAY,KAAA,CAAAxC,IAAAA,SAAA,IAAAS,SAAiD,EAAA;IAAAR,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAGpDF,EAAAA,QAAA,OAAA0C,cAAA,CAAA;;AAyGDC,IAAAA,KAAA,OAAAC,IAAA;IACwCC,KAAA,EAAA,KAAAC,UAAA;gCAGf,CAAA;AACEC,IAAAA,OAAO,EAAAA,MAAK,IAAA,CAAAC,WAAA,CAAAC;AAGpB,GAAA,CAAA;aAGY,GAAAC,MAAA,YAAAjD,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;aAEEiD,GAAA;AACtBC,IAAAA,iBAAU,OAAY,IAAAvB,CAAAA,WAAA,CAAAtB,GAAA,MAAAuC,UAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAE/BM,IAAAA,iBAAoC,CAAA,MAAA;MAC3B,IAAO,CAAG,IAAA,CAAAC,WAAS,EAAA,EAAA;QAEyB,IAAArD,CAAAA,QAAA,CAAAsD,eAAA,EAAA;;AAM5C,KAAA,CAAA;AAGA;SAETC,GAAA;AAEE,IAAA,IAAA,CAAAF,WAAA,CAAO9C,GAAA,CAAA,IAAA,CAAA;;;;;AAKRiD,EAAAA,WAAAA,GAAA;IAGC,IAAA,CAAAC,KAAA,CAAAhD,UAAA,CAAA,IAAA,CAAA;;;QAKF,CAAAiD,cAAA,EAAAC,CAAAA,GAAA,CAAAvD,KAAA,CAAA;;;;yBA3DQ,CAAAQ,MAAA,CAAAR,KAAA,CAAA;AAAC,IAAA,IAAA,CAAAsD,cAAA,CAAAnD,GAAA,CAAAC,IAAAA,GAAA,MAAAkD,cAAA,EAAA,CAAA,CAAA;AAET;AACAE,EAAAA,OAAAA,IAAA,GAAA/C,EAAA,CAAAC,kBAAM,CAAA;IAAAG,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAQ,IAAAA,QAAA,EAAAb,EAAA;AAAAM,IAAAA,IAAA,EAAAd,OAAA;IAAAwD,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAjD,EAAA,CAAAkD,eAAA,CAAApC;AAAA,GAAA,CAAA;SACJZ,IAAA,GAAAF,EAAA,CAAAG,oBAAa,CAAA;AAAAC,IAAAA,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,IAAA,EAAAd,OAAA;IAAAgB,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,aAAA;IAAA0C,MAAA,EAAA;MAAA9B,WAAA,EAAA;QAAA+B,iBAAA,EAAA,aAAA;QAAAC,UAAA,EAAA,aAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAC,IAAA,EAAA;QAAAL,iBAAA,EAAA,MAAA;QAAAC,UAAA,EAAA,MAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAE,YAAA,EAAA;QAAAN,iBAAA,EAAA,cAAA;QAAAC,UAAA,EAAA,cAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAA/B,SAAA,EAAA;QAAA2B,iBAAA,EAAA,WAAA;QAAAC,UAAA,EAAA,WAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAA9B,aAAA,EAAA;QAAA0B,iBAAA,EAAA,eAAA;QAAAC,UAAA,EAAA,eAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAA7B,QAAA,EAAA;QAAAyB,iBAAA,EAAA,UAAA;QAAAC,UAAA,EAAA,UAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAxC,WAAA,EAAA;QAAAoC,iBAAA,EAAA,aAAA;QAAAC,UAAA,EAAA,aAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA;AAAA,KAAA;IAAAG,OAAA,EAAA;MAAA3C,WAAA,EAAA;AAAA,KAAA;IAAAN,IAAA,EAAA;MAAAkD,UAAA,EAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;MAAAC,SAAA,EAAA;AAAA,QAAA,SAAA,EAAA,4BAAA;AAAA,QAAA,aAAA,EAAA,gCAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;MAAAC,UAAA,EAAA;AAAA,QAAA,eAAA,EAAA,qBAAA;AAAA,QAAA,oBAAA,EAAA,qBAAA;AAAA,QAAA,uBAAA,EAAA,wBAAA;AAAA,QAAA,4BAAA,EAAA;AAAA,OAAA;MAAAnD,cAAA,EAAA;AAAA,KAAA;IAAAC,QAAA,EAAA,CAAA,WAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAb;AAAA,GAAA,CAAA;;AAGb,EAAA,CAAA,wBAAA,CAAA;EAAAI,UAAA,EAAA,QAAA;EAAAC,OAAA,EAAA,eAAA;AAAAQ,EAAAA,QAAA,EAAAb,EAAA;AAAAM,EAAAA,IAAA,EAAAd,OAAA;EAAAuE,UAAA,EAAA,CAAA;AACAzD,IAAAA,IAAA,EAAAQ,SAAA;IACAC,IAAA,EAAA,CAAA;MACAN,QAAA,EAAA,aAAA;;;;;yBApDK,EAAA,qBAAA;AAAA,QAAA,sBAAA,EAAA,qBAAA;QACL,yBAAY,EAAA,wBAAA;sCACG,EAAA,6BAAA;QACf,WAAA,EAAA,4BAAA;AAEF,QAAA,eAA+C,EAAA,gCAAA;QACvC,WAAA,EAAA;;;;;;;AASN,EAAA,WAAA,GAAA,MAAA,CAAAuD,UAAE,CAAA;;EAwCLC,QAAA,GAAAC,MAAA,CAAA1E,OAAA,CAAA;AAmFkB2E,EAAAA,GAAA,GAAAD,MAAA,CAAAE,YAAA,CAAA,CAAAC,KAAA,CAA+C,SAAA,CAAA;qBAKd,MAAA,IAAA,CAAAlC,WAAA,CAAAC,aAAA,MAAAhD,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;qBAIT,MAAA,IAAA,CAAA4E,QAAA,CAAA9E,QAAA,MAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;yDAG1B,EAAAiF,CAAAA,IAAA,CAAApF,QAAA,IAAAA,QAAA,CAAA8C,KAAA,EAAAA,KAAAA,IAAAA,CAAAA,KAAA,SAAA5C,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;;;;;;AAQb2C,EAAAA,KAAA,GAAAV,KAAA,CAAAiD,QAAA,KAAAnF,SAAyB,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAIzBF,EAAAA,QAAA,OAAAqF,UAAA,CAAA;IACF,GAAA,IAAA;;WAnDQ,EAAA,IAAA,CAAAC,OAAA;AACRvF,IAAAA,QAAA,OAAAA,QAAA;AACA8C,IAAAA,KAAA,MAAA,CAAAA;AAEE,GAAA,CAAA;AACA0C,EAAAA,QAAAA,GAAsB;IACtB,IAAA,CAAAT,QAAA,CAAA3E,QAAA,CAAA,IAAA,CAAA;;AAEAqD,EAAAA,WAAAA,GAAA;IACA,IAAAsB,CAAAA,QAAA,CAAArE,UAAA,CAAA,IAAA,CAAA;;SAEFmD,IAAA,GAAA/C,EAAA,CAAAC,kBAAA,CAAA;IAAAG,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAQ,IAAAA,QAAA,EAAAb,EAAA;AAAAM,IAAAA,IAAA,EAAAqE,GAAA;IAAA3B,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAjD,EAAA,CAAAkD,eAAA,CAAApC;AAAA,GAAA,CAAA;AAEI,EAAA,OAAAZ,IAAA,GAAAF,EAAA,CAAAG,oBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,IAAA,EAAAqE,GAAA;IAAAnE,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,SAAA;IAAA0C,MAAA,EAAA;MAAAxB,QAAA,EAAA;QAAAyB,iBAAA,EAAA,UAAA;QAAAC,UAAA,EAAA,UAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAxB,KAAA,EAAA;QAAAoB,iBAAA,EAAA,OAAA;QAAAC,UAAA,EAAA,OAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,IAAA;QAAAC,iBAAA,EAAA;AAAA;AAAA,KAAA;IAAA9C,IAAA,EAAA;MAAAkD,UAAA,EAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;MAAAE,UAAA,EAAA;AAAA,QAAA,kBAAA,EAAA,mBAAA;AAAA,QAAA,SAAA,EAAA,eAAA;AAAA,QAAA,eAAA,EAAA,qBAAA;AAAA,QAAA,oBAAA,EAAA,qBAAA;AAAA,QAAA,oBAAA,EAAA,qBAAA;AAAA,QAAA,oBAAA,EAAA;AAAA,OAAA;MAAAnD,cAAA,EAAA;AAAA,KAAA;IAAAC,QAAA,EAAA,CAAA,OAAA,CAAA;AAAAC,IAAAA,QAAA,EAAAb;AAAA,GAAA,CAAA;;AAED,EAAA,CAAA,wBAAA,CAAA;EAAAI,UAAA,EAAA,QAAA;EAAAC,OAAA,EAAA,eAAA;AAAAQ,EAAAA,QAAA,EAAAb,EAAA;AAAAM,EAAAA,IAAA,EAAAqE,GAAA;EAAAZ,UAAA,EAAA,CAAA;AAEJzD,IAAAA,IAAA,EAAAQ,SAAA;;MAqCDL,QAAA,EAAA,SAAA;;;;;;;QA9DA,iBAAA,EAAA,qBAAA;;;;;;;;;;;AAkEE0D,EAAAA,GAAA,GAAAD,MAAA,CAAAE,YAAA,EAAAC,KAAA,CAAA,cAAA,EAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QACA,WAAA,EAAA,eAAA;AAAA,QAAA,iBAAA,EAAA,qBAAA;wBACc,iCAAA;QACf,wBAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}