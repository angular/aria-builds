{"version":3,"file":"tree.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/tree/tree.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  afterRenderEffect,\n  booleanAttribute,\n  computed,\n  inject,\n  input,\n  model,\n  signal,\n  Signal,\n  OnInit,\n  OnDestroy,\n  untracked,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DeferredContent, DeferredContentAware} from '@angular/aria/deferred-content';\nimport {ComboboxTreePattern, TreeItemPattern, TreePattern} from '@angular/aria/private';\nimport {ComboboxPopup} from '../combobox';\n\ninterface HasElement {\n  element: Signal<HTMLElement>;\n}\n\n/**\n * Sort directives by their document order.\n */\nfunction sortDirectives(a: HasElement, b: HasElement) {\n  return (a.element().compareDocumentPosition(b.element()) & Node.DOCUMENT_POSITION_PRECEDING) > 0\n    ? 1\n    : -1;\n}\n\n/**\n * A Tree container.\n *\n * Transforms nested lists into an accessible, ARIA-compliant tree structure.\n *\n * ```html\n * <ul ngTree [(value)]=\"selectedItems\" [multi]=\"true\">\n *   <li ngTreeItem [value]=\"'leaf1'\">Leaf Item 1</li>\n *   <li ngTreeItem [value]=\"'parent1'\">\n *     Parent Item 1\n *     <ul ngTreeItemGroup [value]=\"'parent1'\">\n *       <ng-template ngTreeItemGroupContent>\n *         <li ngTreeItem [value]=\"'child1.1'\">Child Item 1.1</li>\n *         <li ngTreeItem [value]=\"'child1.2'\">Child Item 1.2</li>\n *       </ng-template>\n *     </ul>\n *   </li>\n *   <li ngTreeItem [value]=\"'leaf2'\" [disabled]=\"true\">Disabled Leaf Item 2</li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[ngTree]',\n  exportAs: 'ngTree',\n  host: {\n    'class': 'ng-tree',\n    'role': 'tree',\n    '[attr.id]': 'id()',\n    '[attr.aria-orientation]': '_pattern.orientation()',\n    '[attr.aria-multiselectable]': '_pattern.multi()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-activedescendant]': '_pattern.activedescendant()',\n    '[tabindex]': '_pattern.tabindex()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': 'onFocus()',\n  },\n  hostDirectives: [{directive: ComboboxPopup}],\n})\nexport class Tree<V> {\n  /** A unique identifier for the tree. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-tree-');\n\n  // TODO(wagnermaciel): https://github.com/angular/components/pull/30495#discussion_r1972601144.\n  /** A unique identifier for the tree. */\n  protected id = computed(() => this._generatedId);\n\n  /** A reference to the parent combobox popup, if one exists. */\n  private readonly _popup = inject<ComboboxPopup<V>>(ComboboxPopup, {\n    optional: true,\n  });\n\n  /** A reference to the tree element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** All TreeItem instances within this tree. */\n  private readonly _unorderedItems = signal(new Set<TreeItem<V>>());\n\n  /** Orientation of the tree. */\n  readonly orientation = input<'vertical' | 'horizontal'>('vertical');\n\n  /** Whether multi-selection is allowed. */\n  readonly multi = input(false, {transform: booleanAttribute});\n\n  /** Whether the tree is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** The selection strategy used by the tree. */\n  readonly selectionMode = input<'explicit' | 'follow'>('explicit');\n\n  /** The focus strategy used by the tree. */\n  readonly focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** Whether navigation wraps. */\n  readonly wrap = input(true, {transform: booleanAttribute});\n\n  /** Whether to skip disabled items during navigation. */\n  readonly skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** Typeahead delay. */\n  readonly typeaheadDelay = input(0.5);\n\n  /** Selected item values. */\n  readonly value = model<V[]>([]);\n\n  /** Text direction. */\n  readonly textDirection = inject(Directionality).valueSignal;\n\n  /** Whether the tree is in navigation mode. */\n  readonly nav = input(false);\n\n  /** The aria-current type. */\n  readonly currentType = input<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>(\n    'page',\n  );\n\n  /** The UI pattern for the tree. */\n  readonly _pattern: TreePattern<V>;\n\n  /** Whether the tree has received focus yet. */\n  private _hasFocused = signal(false);\n\n  constructor() {\n    const inputs = {\n      ...this,\n      id: this.id,\n      allItems: computed(() =>\n        [...this._unorderedItems()].sort(sortDirectives).map(item => item._pattern),\n      ),\n      activeItem: signal<TreeItemPattern<V> | undefined>(undefined),\n      element: () => this._elementRef.nativeElement,\n      combobox: () => this._popup?.combobox?._pattern,\n    };\n\n    this._pattern = this._popup?.combobox\n      ? new ComboboxTreePattern<V>(inputs)\n      : new TreePattern<V>(inputs);\n\n    if (this._popup?.combobox) {\n      this._popup?.controls?.set(this._pattern as ComboboxTreePattern<V>);\n    }\n\n    afterRenderEffect(() => {\n      if (!this._hasFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n\n    afterRenderEffect(() => {\n      const items = inputs.allItems();\n      const activeItem = untracked(() => inputs.activeItem());\n\n      if (!items.some(i => i === activeItem) && activeItem) {\n        this._pattern.listBehavior.unfocus();\n      }\n    });\n\n    afterRenderEffect(() => {\n      const items = inputs.allItems();\n      const value = untracked(() => this.value());\n\n      if (items && value.some(v => !items.some(i => i.value() === v))) {\n        this.value.set(value.filter(v => items.some(i => i.value() === v)));\n      }\n    });\n  }\n\n  onFocus() {\n    this._hasFocused.set(true);\n  }\n\n  register(child: TreeItem<V>) {\n    this._unorderedItems().add(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n\n  unregister(child: TreeItem<V>) {\n    this._unorderedItems().delete(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n\n  scrollActiveItemIntoView(options: ScrollIntoViewOptions = {block: 'nearest'}) {\n    this._pattern.inputs.activeItem()?.element().scrollIntoView(options);\n  }\n}\n\n/**\n * A selectable and expandable Tree Item in a Tree.\n */\n@Directive({\n  selector: '[ngTreeItem]',\n  exportAs: 'ngTreeItem',\n  host: {\n    'class': 'ng-treeitem',\n    '[attr.data-active]': '_pattern.active()',\n    'role': 'treeitem',\n    '[id]': '_pattern.id()',\n    '[attr.aria-expanded]': '_pattern.expandable() ? _pattern.expanded() : null',\n    '[attr.aria-selected]': '_pattern.selected()',\n    '[attr.aria-current]': '_pattern.current()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-level]': '_pattern.level()',\n    '[attr.aria-setsize]': '_pattern.setsize()',\n    '[attr.aria-posinset]': '_pattern.posinset()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n  },\n})\nexport class TreeItem<V> extends DeferredContentAware implements OnInit, OnDestroy, HasElement {\n  /** A reference to the tree item element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A unique identifier for the tree item. */\n  private readonly _id = inject(_IdGenerator).getId('ng-tree-item-');\n\n  /** The owned tree item group. */\n  private readonly _group = signal<TreeItemGroup<V> | undefined>(undefined);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The value of the tree item. */\n  readonly value = input.required<V>();\n\n  /** The parent tree root or tree item group. */\n  readonly parent = input.required<Tree<V> | TreeItemGroup<V>>();\n\n  /** Whether the tree item is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the tree item is selectable. */\n  readonly selectable = input<boolean>(true);\n\n  /** Optional label for typeahead. Defaults to the element's textContent. */\n  readonly label = input<string>();\n\n  /** Search term for typeahead. */\n  readonly searchTerm = computed(() => this.label() ?? this.element().textContent);\n\n  /** The tree root. */\n  readonly tree: Signal<Tree<V>> = computed(() => {\n    if (this.parent() instanceof Tree) {\n      return this.parent() as Tree<V>;\n    }\n    return (this.parent() as TreeItemGroup<V>).ownedBy().tree();\n  });\n\n  /** The UI pattern for this item. */\n  _pattern: TreeItemPattern<V>;\n\n  constructor() {\n    super();\n    this.preserveContent.set(true);\n    // Connect the group's hidden state to the DeferredContentAware's visibility.\n    afterRenderEffect(() => {\n      this.tree()._pattern instanceof ComboboxTreePattern\n        ? this.contentVisible.set(true)\n        : this.contentVisible.set(this._pattern.expanded());\n    });\n  }\n\n  ngOnInit() {\n    this.parent().register(this);\n    this.tree().register(this);\n\n    const treePattern = computed(() => this.tree()._pattern);\n    const parentPattern = computed(() => {\n      if (this.parent() instanceof Tree) {\n        return treePattern();\n      }\n      return (this.parent() as TreeItemGroup<V>).ownedBy()._pattern;\n    });\n    this._pattern = new TreeItemPattern<V>({\n      ...this,\n      id: () => this._id,\n      tree: treePattern,\n      parent: parentPattern,\n      children: computed(() => this._group()?.children() ?? []),\n      hasChildren: computed(() => !!this._group()),\n    });\n  }\n\n  ngOnDestroy() {\n    this.parent().unregister(this);\n    this.tree().unregister(this);\n  }\n\n  register(group: TreeItemGroup<V>) {\n    this._group.set(group);\n  }\n\n  unregister() {\n    this._group.set(undefined);\n  }\n}\n\n/**\n * Contains children tree itmes.\n */\n@Directive({\n  selector: 'ng-template[ngTreeItemGroup]',\n  exportAs: 'ngTreeItemGroup',\n  hostDirectives: [DeferredContent],\n})\nexport class TreeItemGroup<V> implements OnInit, OnDestroy {\n  /** The DeferredContent host directive. */\n  private readonly _deferredContent = inject(DeferredContent);\n\n  /** All groupable items that are descendants of the group. */\n  private readonly _unorderedItems = signal(new Set<TreeItem<V>>());\n\n  /** Child items within this group. */\n  readonly children = computed<TreeItemPattern<V>[]>(() =>\n    [...this._unorderedItems()].sort(sortDirectives).map(c => c._pattern),\n  );\n\n  /** Tree item that owns the group. */\n  readonly ownedBy = input.required<TreeItem<V>>();\n\n  ngOnInit() {\n    this._deferredContent.deferredContentAware.set(this.ownedBy());\n    this.ownedBy().register(this);\n  }\n\n  ngOnDestroy() {\n    this.ownedBy().unregister();\n  }\n\n  register(child: TreeItem<V>) {\n    this._unorderedItems().add(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n\n  unregister(child: TreeItem<V>) {\n    this._unorderedItems().delete(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n}\n"],"names":["_popup","inject","optional","_unorderedItems","signal","Set","ngDevMode","debugName","input","transform","booleanAttribute","disabled","focusMode","wrap","skipDisabled","textDirection","Directionality","valueSignal","currentType","_pattern","id","allItems","computed","sort","sortDirectives","map","item","activeItem","undefined","element","_elementRef","nativeElement","combobox","ComboboxTreePattern","inputs","TreePattern","_hasFocused","setDefaultState","items","untracked","some","i","listBehavior","unfocus","afterRenderEffect","value","v","set","filter","add","child","unregister","delete","scrollActiveItemIntoView","options","block","scrollIntoView","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","Tree","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective","isStandalone","selector","orientation","classPropertyName","publicName","isSignal","isRequired","transformFunction","multi","selectionMode","typeaheadDelay","nav","outputs","host","attributes","listeners","properties","classAttribute","exportAs","hostDirectives","directive","i1","decorators","ComboboxPopup","ctorParameters","ElementRef","_id","_IdGenerator","getId","_group","required","parent","selectable","label","tree","constructor","preserveContent","contentVisible","ngOnInit","register","ownedBy"],"mappings":"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"}