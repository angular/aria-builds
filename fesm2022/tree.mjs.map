{"version":3,"file":"tree.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/tree/tree.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  afterRenderEffect,\n  booleanAttribute,\n  computed,\n  inject,\n  input,\n  model,\n  signal,\n  Signal,\n  OnInit,\n  OnDestroy,\n  untracked,\n  afterNextRender,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DeferredContent, DeferredContentAware} from '@angular/aria/deferred-content';\nimport {ComboboxTreePattern, TreeItemPattern, TreePattern} from '@angular/aria/private';\nimport {ComboboxPopup} from '../combobox';\n\ninterface HasElement {\n  element: Signal<HTMLElement>;\n}\n\n/**\n * Sort directives by their document order.\n */\nfunction sortDirectives(a: HasElement, b: HasElement) {\n  return (a.element().compareDocumentPosition(b.element()) & Node.DOCUMENT_POSITION_PRECEDING) > 0\n    ? 1\n    : -1;\n}\n\n/**\n * A Tree container.\n *\n * Transforms nested lists into an accessible, ARIA-compliant tree structure.\n *\n * ```html\n * <ul ngTree [(value)]=\"selectedItems\" [multi]=\"true\">\n *   <li ngTreeItem [value]=\"'leaf1'\">Leaf Item 1</li>\n *   <li ngTreeItem [value]=\"'parent1'\">\n *     Parent Item 1\n *     <ul ngTreeItemGroup [value]=\"'parent1'\">\n *       <ng-template ngTreeItemGroupContent>\n *         <li ngTreeItem [value]=\"'child1.1'\">Child Item 1.1</li>\n *         <li ngTreeItem [value]=\"'child1.2'\">Child Item 1.2</li>\n *       </ng-template>\n *     </ul>\n *   </li>\n *   <li ngTreeItem [value]=\"'leaf2'\" [disabled]=\"true\">Disabled Leaf Item 2</li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[ngTree]',\n  exportAs: 'ngTree',\n  host: {\n    'class': 'ng-tree',\n    'role': 'tree',\n    '[attr.id]': 'id()',\n    '[attr.aria-orientation]': '_pattern.orientation()',\n    '[attr.aria-multiselectable]': '_pattern.multi()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-activedescendant]': '_pattern.activedescendant()',\n    '[tabindex]': '_pattern.tabindex()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': 'onFocus()',\n  },\n  hostDirectives: [{directive: ComboboxPopup}],\n})\nexport class Tree<V> {\n  /** A unique identifier for the tree. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-tree-', true);\n\n  // TODO(wagnermaciel): https://github.com/angular/components/pull/30495#discussion_r1972601144.\n  /** A unique identifier for the tree. */\n  protected id = computed(() => this._generatedId);\n\n  /** A reference to the parent combobox popup, if one exists. */\n  private readonly _popup = inject<ComboboxPopup<V>>(ComboboxPopup, {\n    optional: true,\n  });\n\n  /** A reference to the tree element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** All TreeItem instances within this tree. */\n  private readonly _unorderedItems = signal(new Set<TreeItem<V>>());\n\n  /** Orientation of the tree. */\n  readonly orientation = input<'vertical' | 'horizontal'>('vertical');\n\n  /** Whether multi-selection is allowed. */\n  readonly multi = input(false, {transform: booleanAttribute});\n\n  /** Whether the tree is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** The selection strategy used by the tree. */\n  readonly selectionMode = input<'explicit' | 'follow'>('explicit');\n\n  /** The focus strategy used by the tree. */\n  readonly focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** Whether navigation wraps. */\n  readonly wrap = input(true, {transform: booleanAttribute});\n\n  /** Whether to skip disabled items during navigation. */\n  readonly skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** Typeahead delay. */\n  readonly typeaheadDelay = input(0.5);\n\n  /** Selected item values. */\n  readonly value = model<V[]>([]);\n\n  /** Text direction. */\n  readonly textDirection = inject(Directionality).valueSignal;\n\n  /** Whether the tree is in navigation mode. */\n  readonly nav = input(false);\n\n  /** The aria-current type. */\n  readonly currentType = input<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>(\n    'page',\n  );\n\n  /** The UI pattern for the tree. */\n  readonly _pattern: TreePattern<V>;\n\n  /** Whether the tree has received focus yet. */\n  private _hasFocused = signal(false);\n\n  constructor() {\n    const inputs = {\n      ...this,\n      id: this.id,\n      allItems: computed(() =>\n        [...this._unorderedItems()].sort(sortDirectives).map(item => item._pattern),\n      ),\n      activeItem: signal<TreeItemPattern<V> | undefined>(undefined),\n      element: () => this._elementRef.nativeElement,\n      combobox: () => this._popup?.combobox?._pattern,\n    };\n\n    this._pattern = this._popup?.combobox\n      ? new ComboboxTreePattern<V>(inputs)\n      : new TreePattern<V>(inputs);\n\n    if (this._popup?.combobox) {\n      this._popup?.controls?.set(this._pattern as ComboboxTreePattern<V>);\n    }\n\n    afterRenderEffect(() => {\n      if (!this._hasFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n\n    afterRenderEffect(() => {\n      const items = inputs.allItems();\n      const activeItem = untracked(() => inputs.activeItem());\n\n      if (!items.some(i => i === activeItem) && activeItem) {\n        this._pattern.listBehavior.unfocus();\n      }\n    });\n\n    afterRenderEffect(() => {\n      const items = inputs.allItems();\n      const value = untracked(() => this.value());\n\n      if (items && value.some(v => !items.some(i => i.value() === v))) {\n        this.value.set(value.filter(v => items.some(i => i.value() === v)));\n      }\n    });\n  }\n\n  onFocus() {\n    this._hasFocused.set(true);\n  }\n\n  register(child: TreeItem<V>) {\n    this._unorderedItems().add(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n\n  unregister(child: TreeItem<V>) {\n    this._unorderedItems().delete(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n\n  scrollActiveItemIntoView(options: ScrollIntoViewOptions = {block: 'nearest'}) {\n    this._pattern.inputs.activeItem()?.element().scrollIntoView(options);\n  }\n}\n\n/**\n * A selectable and expandable Tree Item in a Tree.\n */\n@Directive({\n  selector: '[ngTreeItem]',\n  exportAs: 'ngTreeItem',\n  host: {\n    'class': 'ng-treeitem',\n    '[attr.data-active]': '_pattern.active()',\n    'role': 'treeitem',\n    '[id]': '_pattern.id()',\n    '[attr.aria-expanded]': '_pattern.expandable() ? _pattern.expanded() : null',\n    '[attr.aria-selected]': '_pattern.selected()',\n    '[attr.aria-current]': '_pattern.current()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-level]': '_pattern.level()',\n    '[attr.aria-setsize]': '_pattern.setsize()',\n    '[attr.aria-posinset]': '_pattern.posinset()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n  },\n})\nexport class TreeItem<V> extends DeferredContentAware implements OnInit, OnDestroy, HasElement {\n  /** A reference to the tree item element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A unique identifier for the tree item. */\n  private readonly _id = inject(_IdGenerator).getId('ng-tree-item-', true);\n\n  /** The owned tree item group. */\n  private readonly _group = signal<TreeItemGroup<V> | undefined>(undefined);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The value of the tree item. */\n  readonly value = input.required<V>();\n\n  /** The parent tree root or tree item group. */\n  readonly parent = input.required<Tree<V> | TreeItemGroup<V>>();\n\n  /** Whether the tree item is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the tree item is selectable. */\n  readonly selectable = input<boolean>(true);\n\n  /** Optional label for typeahead. Defaults to the element's textContent. */\n  readonly label = input<string>();\n\n  /** Search term for typeahead. */\n  readonly searchTerm = computed(() => this.label() ?? this.element().textContent);\n\n  /** The tree root. */\n  readonly tree: Signal<Tree<V>> = computed(() => {\n    if (this.parent() instanceof Tree) {\n      return this.parent() as Tree<V>;\n    }\n    return (this.parent() as TreeItemGroup<V>).ownedBy().tree();\n  });\n\n  /** The UI pattern for this item. */\n  _pattern: TreeItemPattern<V>;\n\n  constructor() {\n    super();\n    afterNextRender(() => {\n      if (this.tree()._pattern instanceof ComboboxTreePattern) {\n        this.preserveContent.set(true);\n      }\n    });\n    // Connect the group's hidden state to the DeferredContentAware's visibility.\n    afterRenderEffect(() => {\n      this.tree()._pattern instanceof ComboboxTreePattern\n        ? this.contentVisible.set(true)\n        : this.contentVisible.set(this._pattern.expanded());\n    });\n  }\n\n  ngOnInit() {\n    this.parent().register(this);\n    this.tree().register(this);\n\n    const treePattern = computed(() => this.tree()._pattern);\n    const parentPattern = computed(() => {\n      if (this.parent() instanceof Tree) {\n        return treePattern();\n      }\n      return (this.parent() as TreeItemGroup<V>).ownedBy()._pattern;\n    });\n    this._pattern = new TreeItemPattern<V>({\n      ...this,\n      id: () => this._id,\n      tree: treePattern,\n      parent: parentPattern,\n      children: computed(() => this._group()?.children() ?? []),\n      hasChildren: computed(() => !!this._group()),\n    });\n  }\n\n  ngOnDestroy() {\n    this.parent().unregister(this);\n    this.tree().unregister(this);\n  }\n\n  register(group: TreeItemGroup<V>) {\n    this._group.set(group);\n  }\n\n  unregister() {\n    this._group.set(undefined);\n  }\n}\n\n/**\n * Contains children tree itmes.\n */\n@Directive({\n  selector: 'ng-template[ngTreeItemGroup]',\n  exportAs: 'ngTreeItemGroup',\n  hostDirectives: [DeferredContent],\n})\nexport class TreeItemGroup<V> implements OnInit, OnDestroy {\n  /** The DeferredContent host directive. */\n  private readonly _deferredContent = inject(DeferredContent);\n\n  /** All groupable items that are descendants of the group. */\n  private readonly _unorderedItems = signal(new Set<TreeItem<V>>());\n\n  /** Child items within this group. */\n  readonly children = computed<TreeItemPattern<V>[]>(() =>\n    [...this._unorderedItems()].sort(sortDirectives).map(c => c._pattern),\n  );\n\n  /** Tree item that owns the group. */\n  readonly ownedBy = input.required<TreeItem<V>>();\n\n  ngOnInit() {\n    this._deferredContent.deferredContentAware.set(this.ownedBy());\n    this.ownedBy().register(this);\n  }\n\n  ngOnDestroy() {\n    this.ownedBy().unregister();\n  }\n\n  register(child: TreeItem<V>) {\n    this._unorderedItems().add(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n\n  unregister(child: TreeItem<V>) {\n    this._unorderedItems().delete(child);\n    this._unorderedItems.set(new Set(this._unorderedItems()));\n  }\n}\n"],"names":["_popup","inject","ComboboxPopup","_unorderedItems","signal","Set","ngDevMode","debugName","transform","booleanAttribute","selectionMode","input","focusMode","skipDisabled","typeaheadDelay","value","model","nav","inputs","id","allItems","activeItem","undefined","element","_elementRef","nativeElement","combobox","_pattern","ComboboxTreePattern","TreePattern","controls","set","_hasFocused","setDefaultState","items","untracked","some","i","listBehavior","unfocus","afterRenderEffect","v","filter","add","child","unregister","delete","scrollActiveItemIntoView","options","scrollIntoView","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","Tree","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective","isStandalone","selector","orientation","classPropertyName","publicName","isSignal","isRequired","transformFunction","multi","disabled","wrap","currentType","outputs","host","attributes","listeners","properties","classAttribute","exportAs","hostDirectives","directive","i1","args","ctorParameters","DeferredContentAware","ElementRef","_id","_IdGenerator","getId","_group","required","parent","selectable","label","searchTerm","computed","textContent","ownedBy","tree","constructor","afterNextRender","contentVisible","expanded","ngOnInit","treePattern"],"mappings":";;;;;;;;;;;;;;;;;;EAmJMA,MAAA,GAAAC,MAAO,CAAAC,aAAA,EAAA;;AAEP,GAAA,CAAA;;AASAC,EAAAA,eAAA,GAAAC,MAAA,CAAAC,IAAAA,GAAA,QAAAC,SAAA,GAAA,CAAA;IAAAC,SAAmC,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;aAGrC,QAAS,iBAAAD,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;IAIcA,SAAA,EAAA,OAAA;AAAAC,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;;aAGrB,EAAA,UAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;AAIAC,EAAAA,aAAA,GAAAC,KAAA,CAAqB,UAAA,EAAA,IAAAL,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAInBK,EAAAA,SAAA,GAAAD,KAAA,CAAAL,QAAAA,EAAAA,IAAAA,SAAA,GAA2B,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;qCAIR,CAAA;IAAAA,SAAA,EAAA,MAAA;AAAAC,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;EAIrBI,YAAA,GAAAF,KAAA,CAAA,IAAA,EAAA,IAAAL,SAAA,GAAA,CAAA;IAAAC,SAAoC,EAAA,cAAA;AAAAC,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;AAGtCK,EAAAA,cAAA,GAAAH,KAAA,CAAAL,GAAAA,EAAAA,IAAAA,SAAA,GAAE,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAIFQ,EAAAA,KAAA,GAAAC,KAAA,CAAAV,EAAAA,EAAAA,IAAAA,SAAA,GAA0B,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;EAQ5BU,GAAA,GAAAN,KAAA,CAAA,KAAA,EAAA,IAA6BL,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;sBAG7B,MAAA,EAAA,IAAAD,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;;;;;AA1IS,IAAA,MAAAW,MAAA,GAAA;AACT,MAAA,GAAA,IAAA;AAIEC,MAAAA,EAAA,OAAAA,EAAA;AACAC,MAAAA;MAEAC,UAAA,EAAAjB,MAAA,CAAAkB,SAAA,CAAA;AACAC,MAAAA,OAAA,EAAAA,MAAA,IAAA,CAAAC,WAAA,CAAAC,aAAA;AAEAC,MAAAA,QAAA,EAAAA,MAAA,IAAA,CAAA1B,MAAA,EAAA0B,QAAA,EAAAC;AACA,KAAA;AACA,IAAA,IAAA,CAAAA,QAAA,GAAA,IAAA,CAAA3B,MAAA,EAAA0B,QAAA,GACA,IAAAE,mBAAA,CAAAV,MAAA,CACD,GAAA,IAAAW,WAAA,CAAAX,MAAA,CACD;;AAiIF,MAAA,IAAA,CAAAlB,MAAA,EAAA8B,QAAA,EAAAC,GAAA,CAAA,IAAA,CAAAJ,QAAA,CAAA;;AAEG,IAAA,iBAAA,CAAA,MAAA;AAoB2C,MAAA,IAAA,CAAA,IAAA,CAAAK,WAAA,EAAA,EAAA;QAC3B,IAAA,CAAAL,QAAA,CAAAM,eAAgC,EAAA;AAEJ;AAG7C,KAAA,CAAA;AACgC,IAAA,iBAAA,CAAA,MAAA;AAED,MAAA,MAAAC,KAAA,GAAAhB,MAAA,CAAAE,QAAA,EAAA;AAG/B,MAAA,MAAAC,UAAkC,GAAAc,SAAA,CAAAjB,MAAAA,MAAA,CAAAG,UAAA,EAAA,CAAA;MACzB,IAAQ,CAAAa,KAAA,CAAAE,IAAA,CAAAC,CAAA;AAE8B,QAAA,IAAA,CAAAV,QAAA,CAAAW,YAAA,CAAAC,OAAA,EAAA;AACtC;AAET,KAAyC,CAAA;AAGzCC,IAAAA,iBAA2C,CAAA,MAAA;AAClC,MAAA,MAAAN,KAAa,GAAAhB,MAAe,CAAIE;MAEkC,MAAAL,KAAA,GAAAoB,SAAA,CAAA,MAAA,IAAA,CAAApB,KAAA,EAAA,CAAA;MAG1C,IAAAmB,KAAA,IAAAnB,KAAA,CAAAqB,IAAA,CAAAK,CAAA,IAAA,CAAAP,KAAA,CAAAE,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAtB,KAAA,EAAA,KAAA0B,CAAA,CAAA,CAAA,EAAA;QACxB,IAAA,CAAA1B,KAAA,CAAAgB,GAAqB,CAAAhB,KAAA,CAAA2B,iBAAmB,CAAAN,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAtB,KAAA,EAAA,KAAA0B,CAAA,CAAA,CAAA,CAAA;AAE5B;AACZ,KAAA,CAAA;;;oBAIC,CAAAV,GAAK,CAAA,IAAA,CAAA;;gBAIf,EAAQ;AAER,IAAA,IAAA,CAAA5B,eAAA,EAAA,CAAAwC,GAAA,CAAAC,KAAA,CAAA;AACE,IAAA,IAAA,CAAAzC,eAAA,CAAA4B,GAAA,CAAA1B,IAAAA,GAAA,MAAAF,eAAA,EAAA,CAAA,CAAA;;AAGI0C,EAAAA,UAAAA,CAAAD,KAAA,EAAA;wBACF,EAAAE,CAAAA,MAAA,CAAAF,KAAA,CAAA;AACF,IAAA,IAAA,CAAAzC,eAAA,CAAA4B,GAAA,CAAA1B,IAAAA,GAAA,MAAAF,eAAA,EAAA,CAAA,CAAA;;AAGc4C,EAAAA,wBAAAA,CAAAC,OAAA,GAAA;;;wBACH,CAAA3B,UAAA,EAAc,EAAAE,OAAK,EAAA0B,CAAAA,cAAI,CAAAD,OAAA,CAAA;AAC9B;aAEN,GAAAE,EAAA,CAAAC,kBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,QAAA,EAAAJ,EAAA;AAAAK,IAAAA,IAAA,EAAAC,IAAA;IAAAC,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAR,EAAA,CAAAS,eAAA,CAAAC;AAAA,GAAA,CAAA;SAEAC,IAAQ,GAAAX,EAAA,CAAAY,oBAAA,CAAA;IAAAV,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAE,IAAAA,IAAA,EAAAC,IAAA;IAAAO,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,UAAA;IAAA9C,MAAA,EAAA;MAAA+C,WAAA,EAAA;QAAAC,iBAAA,EAAA,aAAA;QAAAC,UAAA,EAAA,aAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAC,KAAA,EAAA;QAAAL,iBAAA,EAAA,OAAA;QAAAC,UAAA,EAAA,OAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAE,QAAA,EAAA;QAAAN,iBAAA,EAAA,UAAA;QAAAC,UAAA,EAAA,UAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAA5D,aAAA,EAAA;QAAAwD,iBAAA,EAAA,eAAA;QAAAC,UAAA,EAAA,eAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAA1D,SAAA,EAAA;QAAAsD,iBAAA,EAAA,WAAA;QAAAC,UAAA,EAAA,WAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAG,IAAA,EAAA;QAAAP,iBAAA,EAAA,MAAA;QAAAC,UAAA,EAAA,MAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAzD,YAAA,EAAA;QAAAqD,iBAAA,EAAA,cAAA;QAAAC,UAAA,EAAA,cAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAxD,cAAA,EAAA;QAAAoD,iBAAA,EAAA,gBAAA;QAAAC,UAAA,EAAA,gBAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAvD,KAAA,EAAA;QAAAmD,iBAAA,EAAA,OAAA;QAAAC,UAAA,EAAA,OAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAArD,GAAA,EAAA;QAAAiD,iBAAA,EAAA,KAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA,OAAA;MAAAI,WAAA,EAAA;QAAAR,iBAAA,EAAA,aAAA;QAAAC,UAAA,EAAA,aAAA;QAAAC,QAAA,EAAA,IAAA;QAAAC,UAAA,EAAA,KAAA;QAAAC,iBAAA,EAAA;AAAA;AAAA,KAAA;IAAAK,OAAA,EAAA;MAAA5D,KAAA,EAAA;AAAA,KAAA;IAAA6D,IAAA,EAAA;MAAAC,UAAA,EAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;MAAAC,SAAA,EAAA;AAAA,QAAA,SAAA,EAAA,4BAAA;AAAA,QAAA,aAAA,EAAA,gCAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;MAAAC,UAAA,EAAA;AAAA,QAAA,SAAA,EAAA,MAAA;AAAA,QAAA,uBAAA,EAAA,wBAAA;AAAA,QAAA,2BAAA,EAAA,kBAAA;AAAA,QAAA,oBAAA,EAAA,qBAAA;AAAA,QAAA,4BAAA,EAAA,6BAAA;AAAA,QAAA,UAAA,EAAA;AAAA,OAAA;MAAAC,cAAA,EAAA;AAAA,KAAA;IAAAC,QAAA,EAAA,CAAA,QAAA,CAAA;IAAAC,cAAA,EAAA,CAAA;MAAAC,SAAA,EAAAC;AAAA,KAAA,CAAA;AAAA9B,IAAAA,QAAA,EAAAJ;AAAA,GAAA,CAAA;;;;;;;;AAKNK,IAAAA,IAAA,EAAAK,SAAA;IACEyB,IAAA,EAAA,CAAA;;;;;;mBA9KoD,EAAA,MAAA;AAAA,QAAA,yBAAA,EAAA,wBAAA;QAC/C,6BAAe,EAAA,kBAAA;8BAED,EAAA,qBAAA;QACd,8BAAA,EAAA,6BAAA;AAET,QAAA,YAA4B,EAAA,qBAAA;AACnB,QAAA,WAAQ,EAAW,4BAAA;AAE5B,QAAA,eAAsB,EAAA,gCAAA;AACb,QAAA,WAAA,EAAA;;AAGA,MAAA,cAAA,EAAA,CAAA;AAAAF,QAAAA;;;;AAGA,EAAA,cAAA,EAAAG,MAAA;AAAc,CAAA,CAAA;AAQf,MAAA,QAAA,SAAAC,oBAAA,CAAA;AAGNtF,EAAAA,WAAAA,GAAAA,MAAA,CAAAuF,UAAA,CAAA;AAuJAC,EAAAA,GAAA,GAAAxF,MAAA,CAAAyF,YAAA,EAAAC,KAAA,CAAA,eAAA,EAAA,IAAA,CAAA;AAEEC,EAAAA,MAAA,GAAAxF,MAAA,CAAAkB,SAAA,MAAAhB,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;;;AAvFKQ,EAAAA,KAAA,GAAAJ,KAAA,CAAAkF,QAAA,KAAAvF,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAGTuF,EAAAA,MAAA,GAAAnF,KAAA,CAAAkF,QAAA,KAAAvF,SAAM,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;EAGJiE,QAAA,GAAA7D,KAAA,CAAA,KAAA,EAAA,IAAAL,SAAkB,GAAA,CAAA;IAAAC,SAAA,EAAA,UAAA;AAAAC,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,GAAA,CAAA;AAAAD,IAAAA,SAAA,EAAAC;AAAA,GAAA,CAAA,CAAA,CAAA;EAGlBsF,UAAA,GAAApF,KAAA,CAAA,IAAA,EAAA,IAAAL,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAGAyF,EAAAA,KAAA,GAAArF,KAAA,CAAAL,IAAAA,SAAA,IAAAgB,SAAA,EAAA;IAAAf,SAAuC,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;EAGvC0F,UAAA,GAAAC,QAAA,CAAA,MAAA,IAAA,CAAAF,KAAA,EAAA,IAAmB,KAAAzE,OAAA,EAAA,CAAA4E,WAAA,EAAA,IAAA7F,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;IA+FvB,IAAA,IAAA,CAAAuF,MAAA,EAAA,YAAAtC,IAAA,EAAA;AAEG,MAAA,OAAA,IAAA,CAAAsC,MAAA,EAAA;;AAQgB,IAAA,OAAA,IAAA,CAAAA,MAAA,EAAA,CAAAM,OAAA,GAA0BC,IAAA,EAAA;AAEkB,GAAA,EAAA,IAAA/F,SAAA,GAAA,CAAA;AAAAC,IAAAA,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,GAAA,CAAA;EAIpDoB,QACC;AAG2B2E,EAAAA,WAAAA,GAAA;AAC5B,IAAA,KAAA,EAAA;IAETC,eAAQ,CAAA,MAAA;AACN,MAAA,IAAI,IAAC,CAAAF,IAAA,EAAiB1E,CAAAA,QAAwB,YAAMC,mBAAA,EAAA;;;AAKpD,KAAA,CAAA;qBAII,CAAA,MAAA;MACJ,IAAAyE,CAAAA,IAAA,EAAK,CAAA1E,QAAA,YAAAC,mBAAA,GACP,IAAA,CAAA4E,cAAA,CAAAzE,GAAA,CAEA,IAAA,CAAA,GAAA,IAAA,CAAAyE,cAA6B,CAAAzE,GAAA,CAAA,IAAA,CAAAJ,QAAA,CAAA8E,QAAA,EAAA,CAAA;;;UAG7BC,GAAA;;;;;;;;AArCS,QAAA,OAAAC,WAAA,EAAA;AAET;wBACc,EAAAP,CAAAA,OAAA,GAAAzE,QAAA;AACf,KAAA,EAAA,IAAArB,SAAA,GAAA,CAAA;MAAAC,SAAA,EAAA;AAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA7BK,MAAA,EAAA,UAAA;AAAA,QAAA,MAAA,EAAA,eAAA;QACA,sBAAiB,EAAA,oDAAA;QACjB,sBAAqB,EAAA,qBAAA;QACrB,qBAAA,EAAA,oBAAA;QACA,sBAAa,EAAA,qBAAA;AACd,QAAA,mBAAA,EAAC,kBAAA;QACJ,qBAAA,EAAA,oBAAA;AAEA,QAAA,sBAAW,EAAA,qBAAA;;;;;AAKX,EAAA,cAAA,EAAA+E,MAAA;AAAA,CAAA,CAAA;AAKE,MAAA,aAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}