{"version":3,"file":"accordion.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/accordion/accordion.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  input,\n  ElementRef,\n  inject,\n  contentChildren,\n  afterRenderEffect,\n  signal,\n  model,\n  booleanAttribute,\n  computed,\n  WritableSignal,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DeferredContent, DeferredContentAware} from '@angular/aria/deferred-content';\nimport {\n  AccordionGroupPattern,\n  AccordionPanelPattern,\n  AccordionTriggerPattern,\n} from '@angular/aria/private';\n\n/**\n * Represents the content panel of an accordion item. It is controlled by an\n * associated `AccordionTrigger`.\n */\n@Directive({\n  selector: '[ngAccordionPanel]',\n  exportAs: 'ngAccordionPanel',\n  hostDirectives: [\n    {\n      directive: DeferredContentAware,\n      inputs: ['preserveContent'],\n    },\n  ],\n  host: {\n    'class': 'ng-accordion-panel',\n    'role': 'region',\n    '[attr.id]': '_pattern.id()',\n    '[attr.aria-labelledby]': '_pattern.accordionTrigger()?.id()',\n    '[attr.inert]': '_pattern.hidden() ? true : null',\n  },\n})\nexport class AccordionPanel {\n  /** The DeferredContentAware host directive. */\n  private readonly _deferredContentAware = inject(DeferredContentAware);\n\n  /** A global unique identifier for the panel. */\n  private readonly _id = inject(_IdGenerator).getId('accordion-trigger-', true);\n\n  /** A local unique identifier for the panel, used to match with its trigger's value. */\n  value = input.required<string>();\n\n  /** The parent accordion trigger pattern that controls this panel. This is set by AccordionGroup. */\n  readonly accordionTrigger: WritableSignal<AccordionTriggerPattern | undefined> =\n    signal(undefined);\n\n  /** The UI pattern instance for this panel. */\n  readonly _pattern: AccordionPanelPattern = new AccordionPanelPattern({\n    id: () => this._id,\n    value: this.value,\n    accordionTrigger: () => this.accordionTrigger(),\n  });\n\n  constructor() {\n    // Connect the panel's hidden state to the DeferredContentAware's visibility.\n    afterRenderEffect(() => {\n      this._deferredContentAware.contentVisible.set(!this._pattern.hidden());\n    });\n  }\n}\n\n/**\n * Represents the trigger button for an accordion item. It controls the expansion\n * state of an associated `AccordionPanel`.\n */\n@Directive({\n  selector: '[ngAccordionTrigger]',\n  exportAs: 'ngAccordionTrigger',\n  host: {\n    'class': 'ng-accordion-trigger',\n    '[attr.data-active]': '_pattern.active()',\n    'role': 'button',\n    '[id]': '_pattern.id()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-controls]': '_pattern.controls()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.disabled]': 'hardDisabled() ? true : null',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': '_pattern.onFocus($event)',\n  },\n})\nexport class AccordionTrigger {\n  /** A global unique identifier for the trigger. */\n  private readonly _id = inject(_IdGenerator).getId('ng-accordion-trigger-', true);\n\n  /** A reference to the trigger element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent AccordionGroup. */\n  private readonly _accordionGroup = inject(AccordionGroup);\n\n  /** A local unique identifier for the trigger, used to match with its panel's value. */\n  value = input.required<string>();\n\n  /** Whether the trigger is disabled. */\n  disabled = input(false, {transform: booleanAttribute});\n\n  /**\n   * Whether this trigger is completely inaccessible.\n   *\n   * TODO(ok7sai): Consider move this to UI patterns.\n   */\n  readonly hardDisabled = computed(() => this._pattern.disabled() && this._pattern.tabindex() < 0);\n\n  /** The accordion panel pattern controlled by this trigger. This is set by AccordionGroup. */\n  readonly accordionPanel: WritableSignal<AccordionPanelPattern | undefined> = signal(undefined);\n\n  /** The UI pattern instance for this trigger. */\n  readonly _pattern: AccordionTriggerPattern = new AccordionTriggerPattern({\n    id: () => this._id,\n    value: this.value,\n    disabled: this.disabled,\n    element: () => this._elementRef.nativeElement,\n    accordionGroup: computed(() => this._accordionGroup._pattern),\n    accordionPanel: this.accordionPanel,\n  });\n}\n\n/**\n * Container for a group of accordion items. It manages the overall state and\n * interactions of the accordion, such as keyboard navigation and expansion mode.\n */\n@Directive({\n  selector: '[ngAccordionGroup]',\n  exportAs: 'ngAccordionGroup',\n  host: {\n    'class': 'ng-accordion-group',\n  },\n})\nexport class AccordionGroup {\n  /** A reference to the group element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The AccordionTriggers nested inside this group. */\n  protected readonly _triggers = contentChildren(AccordionTrigger, {descendants: true});\n\n  /** The AccordionPanels nested inside this group. */\n  protected readonly _panels = contentChildren(AccordionPanel, {descendants: true});\n\n  /** The text direction (ltr or rtl). */\n  readonly textDirection = inject(Directionality).valueSignal;\n\n  /** Whether the entire accordion group is disabled. */\n  disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether multiple accordion items can be expanded simultaneously. */\n  multiExpandable = input(true, {transform: booleanAttribute});\n\n  /** The values of the current selected/expanded accordions. */\n  value = model<string[]>([]);\n\n  /** Whether disabled items should be skipped during keyboard navigation. */\n  skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** Whether keyboard navigation should wrap around from the last item to the first, and vice-versa. */\n  wrap = input(false, {transform: booleanAttribute});\n\n  /** The UI pattern instance for this accordion group. */\n  readonly _pattern: AccordionGroupPattern = new AccordionGroupPattern({\n    ...this,\n    // TODO(ok7sai): Consider making `activeItem` an internal state in the pattern and call\n    // `setDefaultState` in the CDK.\n    activeItem: signal(undefined),\n    items: computed(() => this._triggers().map(trigger => trigger._pattern)),\n    expandedIds: this.value,\n    // TODO(ok7sai): Investigate whether an accordion should support horizontal mode.\n    orientation: () => 'vertical',\n    element: () => this._elementRef.nativeElement,\n  });\n\n  constructor() {\n    // Effect to link triggers with their corresponding panels and update the group's items.\n    afterRenderEffect(() => {\n      const triggers = this._triggers();\n      const panels = this._panels();\n\n      for (const trigger of triggers) {\n        const panel = panels.find(p => p.value() === trigger.value());\n        trigger.accordionPanel.set(panel?._pattern);\n        if (panel) {\n          panel.accordionTrigger.set(trigger._pattern);\n        }\n      }\n    });\n  }\n}\n\n/**\n * A structural directive that marks the `ng-template` to be used as the content\n * for a `AccordionPanel`. This content can be lazily loaded.\n */\n@Directive({\n  selector: 'ng-template[ngAccordionContent]',\n  hostDirectives: [DeferredContent],\n})\nexport class AccordionContent {}\n"],"names":["AccordionPanel","accordionTrigger","signal","undefined","ngDevMode","debugName","_pattern","AccordionPanelPattern","value","constructor","afterRenderEffect","_deferredContentAware","contentVisible","set","hidden","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","Directive","decorators","args","selector","ctorParameters","input","required","disabled","transform","booleanAttribute","hardDisabled","computed","tabindex","element","_elementRef","nativeElement","accordionGroup","_accordionGroup","AccordionTrigger","ɵdir","ɵɵngDeclareDirective","isStandalone","inputs","classPropertyName","publicName","isSignal","isRequired","transformFunction","host","attributes","listeners","properties","classAttribute","exportAs","textDirection","inject","Directionality","valueSignal","wrap","AccordionGroupPattern","items","_triggers","map","trigger","triggers","AccordionContent"],"mappings":"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"}