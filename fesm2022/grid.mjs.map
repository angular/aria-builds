{"version":3,"file":"grid.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/grid/grid.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {\n  afterRenderEffect,\n  booleanAttribute,\n  computed,\n  contentChild,\n  contentChildren,\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  model,\n  Signal,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {GridPattern, GridRowPattern, GridCellPattern, GridCellWidgetPattern} from '../private';\n\n/** A directive that provides grid-based navigation and selection behavior. */\n@Directive({\n  selector: '[ngGrid]',\n  exportAs: 'ngGrid',\n  host: {\n    'class': 'grid',\n    'role': 'grid',\n    '[tabindex]': '_pattern.tabIndex()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-activedescendant]': '_pattern.activeDescendant()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(pointermove)': '_pattern.onPointermove($event)',\n    '(pointerup)': '_pattern.onPointerup($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class Grid {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The rows that make up the grid. */\n  private readonly _rows = contentChildren(GridRow);\n\n  /** The UI patterns for the rows in the grid. */\n  private readonly _rowPatterns: Signal<GridRowPattern[]> = computed(() =>\n    this._rows().map(r => r._pattern),\n  );\n\n  /** Text direction. */\n  readonly textDirection = inject(Directionality).valueSignal;\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether selection is enabled for the grid. */\n  readonly enableSelection = input(false, {transform: booleanAttribute});\n\n  /** Whether the grid is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether to skip disabled items during navigation. */\n  readonly skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** The focus strategy used by the grid. */\n  readonly focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** The wrapping behavior for keyboard navigation along the row axis. */\n  readonly rowWrap = input<'continuous' | 'loop' | 'nowrap'>('loop');\n\n  /** The wrapping behavior for keyboard navigation along the column axis. */\n  readonly colWrap = input<'continuous' | 'loop' | 'nowrap'>('loop');\n\n  /** The UI pattern for the grid. */\n  readonly _pattern = new GridPattern({\n    ...this,\n    rows: this._rowPatterns,\n    getCell: e => this._getCell(e),\n  });\n\n  constructor() {\n    afterRenderEffect(() => this._pattern.resetStateEffect());\n    afterRenderEffect(() => this._pattern.focusEffect());\n  }\n\n  /** Gets the cell pattern for a given element. */\n  private _getCell(element: Element): GridCellPattern | undefined {\n    const cellElement = element.closest('[ngGridCell]');\n    if (cellElement === undefined) return;\n\n    const widgetElement = element.closest('[ngGridCellWidget]');\n    for (const row of this._rowPatterns()) {\n      for (const cell of row.inputs.cells()) {\n        if (\n          cell.element() === cellElement ||\n          (widgetElement !== undefined && cell.element() === widgetElement)\n        ) {\n          return cell;\n        }\n      }\n    }\n    return;\n  }\n}\n\n/** A directive that represents a row in a grid. */\n@Directive({\n  selector: '[ngGridRow]',\n  exportAs: 'ngGridRow',\n  host: {\n    'class': 'grid-row',\n    '[attr.role]': 'role()',\n  },\n})\nexport class GridRow {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The cells that make up this row. */\n  private readonly _cells = contentChildren(GridCell);\n\n  /** The UI patterns for the cells in this row. */\n  private readonly _cellPatterns: Signal<GridCellPattern[]> = computed(() =>\n    this._cells().map(c => c._pattern),\n  );\n\n  /** The parent grid. */\n  private readonly _grid = inject(Grid);\n\n  /** The parent grid UI pattern. */\n  readonly grid = computed(() => this._grid._pattern);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The ARIA role for the row. */\n  readonly role = input<'row' | 'rowheader'>('row');\n\n  /** The index of this row within the grid. */\n  readonly rowIndex = input<number>();\n\n  /** The UI pattern for the grid row. */\n  readonly _pattern = new GridRowPattern({\n    ...this,\n    cells: this._cellPatterns,\n  });\n}\n\n/** A directive that represents a cell in a grid. */\n@Directive({\n  selector: '[ngGridCell]',\n  exportAs: 'ngGridCell',\n  host: {\n    'class': 'grid-cell',\n    '[attr.role]': 'role()',\n    '[attr.id]': '_pattern.id()',\n    '[attr.rowspan]': '_pattern.rowSpan()',\n    '[attr.colspan]': '_pattern.colSpan()',\n    '[attr.data-active]': '_pattern.active()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-rowspan]': '_pattern.rowSpan()',\n    '[attr.aria-colspan]': '_pattern.colSpan()',\n    '[attr.aria-rowindex]': '_pattern.ariaRowIndex()',\n    '[attr.aria-colindex]': '_pattern.ariaColIndex()',\n    '[attr.aria-selected]': '_pattern.ariaSelected()',\n    '[tabindex]': '_pattern.tabIndex()',\n  },\n})\nexport class GridCell {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The widget contained within this cell, if any. */\n  private readonly _widgets = contentChild(GridCellWidget);\n\n  /** The UI pattern for the widget in this cell. */\n  private readonly _widgetPattern: Signal<GridCellWidgetPattern | undefined> = computed(\n    () => this._widgets()?._pattern,\n  );\n\n  /** The parent row. */\n  private readonly _row = inject(GridRow);\n\n  /** A unique identifier for the cell. */\n  private readonly _id = inject(_IdGenerator).getId('ng-grid-cell-', true);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The ARIA role for the cell. */\n  readonly role = input<'gridcell' | 'columnheader'>('gridcell');\n\n  /** The number of rows the cell should span. */\n  readonly rowSpan = input<number>(1);\n\n  /** The number of columns the cell should span. */\n  readonly colSpan = input<number>(1);\n\n  /** The index of this cell's row within the grid. */\n  readonly rowIndex = input<number>();\n\n  /** The index of this cell's column within the grid. */\n  readonly colIndex = input<number>();\n\n  /** Whether the cell is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the cell is selected. */\n  readonly selected = model<boolean>(false);\n\n  /** Whether the cell is selectable. */\n  readonly selectable = input<boolean>(true);\n\n  /** The UI pattern for the grid cell. */\n  readonly _pattern = new GridCellPattern({\n    ...this,\n    id: () => this._id,\n    grid: this._row.grid,\n    row: () => this._row._pattern,\n    widget: this._widgetPattern,\n  });\n}\n\n/** A directive that represents a widget inside a grid cell. */\n@Directive({\n  selector: '[ngGridCellWidget]',\n  exportAs: 'ngGridCellWidget',\n  host: {\n    'class': 'grid-cell-widget',\n    '[attr.data-active]': '_pattern.active()',\n    '[tabindex]': '_pattern.tabIndex()',\n  },\n})\nexport class GridCellWidget {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent cell. */\n  private readonly _cell = inject(GridCell);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether the widget is activated and the grid navigation should be paused. */\n  readonly activate = model<boolean>(false);\n\n  /** The UI pattern for the grid cell widget. */\n  readonly _pattern = new GridCellWidgetPattern({\n    ...this,\n    cell: () => this._cell._pattern,\n  });\n\n  /** Focuses the widget. */\n  focus(): void {\n    this.element().focus();\n  }\n}\n"],"names":["Grid","inject","ElementRef","contentChildren","GridRow","ngDevMode","debugName","element","computed","_elementRef","nativeElement","transform","booleanAttribute","focusMode","input","rowWrap","colWrap","_pattern","GridPattern","rows","_rowPatterns","getCell","e","_getCell","afterRenderEffect","resetStateEffect","focusEffect","cellElement","closest","widgetElement","row","cell","inputs","cells","ngImport","i0","type","deps","target","ɵɵFactoryTarget","Directive","args","selector","_cellPatterns","_cells","map","c","grid","_grid","role","undefined","ɵfac","ɵɵngDeclareFactory","minVersion","ɵdir","ɵɵngDeclareDirective","version","isStandalone","classPropertyName","publicName","isSignal","isRequired","transformFunction","rowIndex","host","properties","classAttribute","queries","propertyName","predicate","GridCell","exportAs","decorators","_widgetPattern","_widgets","_row","_id","_IdGenerator","getId","colSpan","selected","model","selectable","GridCellPattern"],"mappings":"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"}