{"version":3,"file":"grid.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/grid/grid.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {\n  afterRenderEffect,\n  booleanAttribute,\n  computed,\n  contentChild,\n  contentChildren,\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  model,\n  Signal,\n} from '@angular/core';\nimport {GridPattern, GridRowPattern, GridCellPattern, GridCellWidgetPattern} from '../private';\n\n/** A directive that provides grid-based navigation and selection behavior. */\n@Directive({\n  selector: '[ngGrid]',\n  exportAs: 'ngGrid',\n  host: {\n    'class': 'grid',\n    'role': 'grid',\n    '[tabindex]': '_pattern.tabIndex()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-activedescendant]': '_pattern.activeDescendant()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(pointermove)': '_pattern.onPointermove($event)',\n    '(pointerup)': '_pattern.onPointerup($event)',\n    '(focusin)': '_pattern.onFocusIn($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class Grid {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The rows that make up the grid. */\n  private readonly _rows = contentChildren(GridRow);\n\n  /** The UI patterns for the rows in the grid. */\n  private readonly _rowPatterns: Signal<GridRowPattern[]> = computed(() =>\n    this._rows().map(r => r._pattern),\n  );\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether selection is enabled for the grid. */\n  readonly enableSelection = input(false, {transform: booleanAttribute});\n\n  /** Whether the grid is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether to skip disabled items during navigation. */\n  readonly skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** The focus strategy used by the grid. */\n  readonly focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** The wrapping behavior for keyboard navigation along the row axis. */\n  readonly rowWrap = input<'continuous' | 'loop' | 'nowrap'>('loop');\n\n  /** The wrapping behavior for keyboard navigation along the column axis. */\n  readonly colWrap = input<'continuous' | 'loop' | 'nowrap'>('loop');\n\n  /** The UI pattern for the grid. */\n  readonly _pattern = new GridPattern({\n    ...this,\n    rows: this._rowPatterns,\n    getCell: e => this._getCell(e),\n  });\n\n  constructor() {\n    afterRenderEffect(() => this._pattern.resetStateEffect());\n    afterRenderEffect(() => this._pattern.focusEffect());\n  }\n\n  /** Gets the cell pattern for a given element. */\n  private _getCell(element: Element): GridCellPattern | undefined {\n    const cellElement = element.closest('[ngGridCell]');\n    if (cellElement === undefined) return;\n\n    const widgetElement = element.closest('[ngGridCellWidget]');\n    for (const row of this._rowPatterns()) {\n      for (const cell of row.inputs.cells()) {\n        if (\n          cell.element() === cellElement ||\n          (widgetElement !== undefined && cell.element() === widgetElement)\n        ) {\n          return cell;\n        }\n      }\n    }\n    return;\n  }\n}\n\n/** A directive that represents a row in a grid. */\n@Directive({\n  selector: '[ngGridRow]',\n  exportAs: 'ngGridRow',\n  host: {\n    'class': 'grid-row',\n    '[attr.role]': 'role()',\n  },\n})\nexport class GridRow {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The cells that make up this row. */\n  private readonly _cells = contentChildren(GridCell);\n\n  /** The UI patterns for the cells in this row. */\n  private readonly _cellPatterns: Signal<GridCellPattern[]> = computed(() =>\n    this._cells().map(c => c._pattern),\n  );\n\n  /** The parent grid. */\n  private readonly _grid = inject(Grid);\n\n  /** The parent grid UI pattern. */\n  readonly grid = computed(() => this._grid._pattern);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The ARIA role for the row. */\n  readonly role = input<'row' | 'rowheader'>('row');\n\n  /** The index of this row within the grid. */\n  readonly rowIndex = input<number>();\n\n  /** The UI pattern for the grid row. */\n  readonly _pattern = new GridRowPattern({\n    ...this,\n    cells: this._cellPatterns,\n  });\n}\n\n/** A directive that represents a cell in a grid. */\n@Directive({\n  selector: '[ngGridCell]',\n  exportAs: 'ngGridCell',\n  host: {\n    'class': 'grid-cell',\n    '[attr.role]': 'role()',\n    '[attr.id]': '_pattern.id()',\n    '[attr.rowspan]': '_pattern.rowSpan()',\n    '[attr.colspan]': '_pattern.colSpan()',\n    '[attr.data-active]': '_pattern.active()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-rowspan]': '_pattern.rowSpan()',\n    '[attr.aria-colspan]': '_pattern.colSpan()',\n    '[attr.aria-rowindex]': '_pattern.ariaRowIndex()',\n    '[attr.aria-colindex]': '_pattern.ariaColIndex()',\n    '[attr.aria-selected]': '_pattern.ariaSelected()',\n    '[tabindex]': '_pattern.tabIndex()',\n  },\n})\nexport class GridCell {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The widget contained within this cell, if any. */\n  private readonly _widgets = contentChild(GridCellWidget);\n\n  /** The UI pattern for the widget in this cell. */\n  private readonly _widgetPattern: Signal<GridCellWidgetPattern | undefined> = computed(\n    () => this._widgets()?._pattern,\n  );\n\n  /** The parent row. */\n  private readonly _row = inject(GridRow);\n\n  /** A unique identifier for the cell. */\n  private readonly _id = inject(_IdGenerator).getId('ng-grid-cell-');\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** The ARIA role for the cell. */\n  readonly role = input<'gridcell' | 'columnheader'>('gridcell');\n\n  /** The number of rows the cell should span. */\n  readonly rowSpan = input<number>(1);\n\n  /** The number of columns the cell should span. */\n  readonly colSpan = input<number>(1);\n\n  /** The index of this cell's row within the grid. */\n  readonly rowIndex = input<number>();\n\n  /** The index of this cell's column within the grid. */\n  readonly colIndex = input<number>();\n\n  /** Whether the cell is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the cell is selected. */\n  readonly selected = model<boolean>(false);\n\n  /** Whether the cell is selectable. */\n  readonly selectable = input<boolean>(true);\n\n  /** The UI pattern for the grid cell. */\n  readonly _pattern = new GridCellPattern({\n    ...this,\n    id: () => this._id,\n    grid: this._row.grid,\n    row: () => this._row._pattern,\n    widget: this._widgetPattern,\n  });\n}\n\n/** A directive that represents a widget inside a grid cell. */\n@Directive({\n  selector: '[ngGridCellWidget]',\n  exportAs: 'ngGridCellWidget',\n  host: {\n    'class': 'grid-cell-widget',\n    '[attr.data-active]': '_pattern.active()',\n    '[tabindex]': '_pattern.tabIndex()',\n  },\n})\nexport class GridCellWidget {\n  /** A reference to the host element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent cell. */\n  private readonly _cell = inject(GridCell);\n\n  /** The host native element. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether the widget is activated and the grid navigation should be paused. */\n  readonly activate = model<boolean>(false);\n\n  /** The UI pattern for the grid cell widget. */\n  readonly _pattern = new GridCellWidgetPattern({\n    ...this,\n    cell: () => this._cell._pattern,\n  });\n\n  /** Focuses the widget. */\n  focus(): void {\n    this.element().focus();\n  }\n}\n"],"names":["inject","ElementRef","contentChildren","GridRow","ngDevMode","debugName","nativeElement","enableSelection","input","transform","booleanAttribute","focusMode","rowWrap","colWrap","_pattern","GridPattern","rows","_rowPatterns","getCell","e","_getCell","constructor","afterRenderEffect","resetStateEffect","focusEffect","element","cellElement","closest","widgetElement","cell","undefined","ɵɵngDeclareFactory","minVersion","version","ɵɵngDeclareDirective","type","Grid","isStandalone","selector","inputs","classPropertyName","publicName","isSignal","isRequired","transformFunction","disabled","skipDisabled","host","attributes","listeners","properties","classAttribute","queries","propertyName","predicate","exportAs","ngImport","i0","args","ctorParameters","_cellPatterns","computed","_cells","map","c","_grid","rowIndex","cells","deps","target","ɵɵFactoryTarget","Directive","ɵdir","decorators","GridCellWidget","_row","role","selected","model","selectable","GridCellPattern","GridCell"],"mappings":"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"}