{"version":3,"file":"listbox.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/listbox/listbox.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  booleanAttribute,\n  computed,\n  contentChildren,\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  model,\n  signal,\n  untracked,\n} from '@angular/core';\nimport {ComboboxListboxPattern, ListboxPattern, OptionPattern} from '@angular/aria/private';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {toSignal} from '@angular/core/rxjs-interop';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {ComboboxPopup} from '../combobox';\n\n/**\n * A listbox container.\n *\n * Listboxes are used to display a list of items for a user to select from. The Listbox is meant\n * to be used in conjunction with Option as follows:\n *\n * ```html\n * <ul ngListbox>\n *   <li [value]=\"1\" ngOption>Item 1</li>\n *   <li [value]=\"2\" ngOption>Item 2</li>\n *   <li [value]=\"3\" ngOption>Item 3</li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[ngListbox]',\n  exportAs: 'ngListbox',\n  host: {\n    'role': 'listbox',\n    'class': 'ng-listbox',\n    '[attr.id]': 'id()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-readonly]': '_pattern.readonly()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-orientation]': '_pattern.orientation()',\n    '[attr.aria-multiselectable]': '_pattern.multi()',\n    '[attr.aria-activedescendant]': '_pattern.activedescendant()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': 'onFocus()',\n  },\n  hostDirectives: [{directive: ComboboxPopup}],\n})\nexport class Listbox<V> {\n  /** A unique identifier for the listbox. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-listbox-');\n\n  // TODO(wagnermaciel): https://github.com/angular/components/pull/30495#discussion_r1972601144.\n  /** A unique identifier for the listbox. */\n  protected id = computed(() => this._generatedId);\n\n  /** A reference to the parent combobox popup, if one exists. */\n  private readonly _popup = inject<ComboboxPopup<V>>(ComboboxPopup, {\n    optional: true,\n  });\n\n  /** A reference to the listbox element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** The Options nested inside of the Listbox. */\n  private readonly _options = contentChildren(Option, {descendants: true});\n\n  /** A signal wrapper for directionality. */\n  protected textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The Option UIPatterns of the child Options. */\n  protected items = computed(() => this._options().map(option => option._pattern));\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation = input<'vertical' | 'horizontal'>('vertical');\n\n  /** Whether multiple items in the list can be selected at once. */\n  multi = input(false, {transform: booleanAttribute});\n\n  /** Whether focus should wrap when navigating. */\n  wrap = input(true, {transform: booleanAttribute});\n\n  /** Whether disabled items in the list should be skipped when navigating. */\n  skipDisabled = input(true, {transform: booleanAttribute});\n\n  /** The focus strategy used by the list. */\n  focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** The selection strategy used by the list. */\n  selectionMode = input<'follow' | 'explicit'>('follow');\n\n  /** The amount of time before the typeahead search is reset. */\n  typeaheadDelay = input<number>(0.5); // Picked arbitrarily.\n\n  /** Whether the listbox is disabled. */\n  disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the listbox is readonly. */\n  readonly = input(false, {transform: booleanAttribute});\n\n  /** The values of the current selected items. */\n  value = model<V[]>([]);\n\n  /** The Listbox UIPattern. */\n  readonly _pattern: ListboxPattern<V>;\n\n  /** Whether the listbox has received focus yet. */\n  private _hasFocused = signal(false);\n\n  constructor() {\n    const inputs = {\n      ...this,\n      id: this.id,\n      items: this.items,\n      activeItem: signal(undefined),\n      textDirection: this.textDirection,\n      element: () => this._elementRef.nativeElement,\n      combobox: () => this._popup?.combobox?._pattern,\n    };\n\n    this._pattern = this._popup?.combobox\n      ? new ComboboxListboxPattern<V>(inputs)\n      : new ListboxPattern<V>(inputs);\n\n    if (this._popup) {\n      this._popup.controls.set(this._pattern as ComboboxListboxPattern<V>);\n    }\n\n    afterRenderEffect(() => {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const violations = this._pattern.validate();\n        for (const violation of violations) {\n          console.error(violation);\n        }\n      }\n    });\n\n    afterRenderEffect(() => {\n      if (!this._hasFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n\n    // Ensure that if the active item is removed from\n    // the list, the listbox updates it's focus state.\n    afterRenderEffect(() => {\n      const items = inputs.items();\n      const activeItem = untracked(() => inputs.activeItem());\n\n      if (!items.some(i => i === activeItem) && activeItem) {\n        this._pattern.listBehavior.unfocus();\n      }\n    });\n\n    // Ensure that the value is always in sync with the available options.\n    afterRenderEffect(() => {\n      const items = inputs.items();\n      const value = untracked(() => this.value());\n\n      if (items && value.some(v => !items.some(i => i.value() === v))) {\n        this.value.set(value.filter(v => items.some(i => i.value() === v)));\n      }\n    });\n  }\n\n  onFocus() {\n    this._hasFocused.set(true);\n  }\n\n  scrollActiveItemIntoView(options: ScrollIntoViewOptions = {block: 'nearest'}) {\n    this._pattern.inputs.activeItem()?.element().scrollIntoView(options);\n  }\n}\n\n/** A selectable option in a Listbox. */\n@Directive({\n  selector: '[ngOption]',\n  exportAs: 'ngOption',\n  host: {\n    'role': 'option',\n    'class': 'ng-option',\n    '[attr.data-active]': '_pattern.active()',\n    '[attr.id]': '_pattern.id()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-selected]': '_pattern.selected()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n  },\n})\nexport class Option<V> {\n  /** A reference to the option element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent Listbox. */\n  private readonly _listbox = inject(Listbox);\n\n  /** A unique identifier for the option. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-option-');\n\n  // TODO(wagnermaciel): https://github.com/angular/components/pull/30495#discussion_r1972601144.\n  /** A unique identifier for the option. */\n  protected id = computed(() => this._generatedId);\n\n  // TODO(wagnermaciel): See if we want to change how we handle this since textContent is not\n  // reactive. See https://github.com/angular/components/pull/30495#discussion_r1961260216.\n  /** The text used by the typeahead search. */\n  protected searchTerm = computed(() => this.label() ?? this.element().textContent);\n\n  /** The parent Listbox UIPattern. */\n  protected listbox = computed(() => this._listbox._pattern);\n\n  /** A reference to the option element to be focused on navigation. */\n  protected element = computed(() => this._elementRef.nativeElement);\n\n  /** The value of the option. */\n  value = input.required<V>();\n\n  /** Whether an item is disabled. */\n  disabled = input(false, {transform: booleanAttribute});\n\n  /** The text used by the typeahead search. */\n  label = input<string>();\n\n  /** Whether the option is selected. */\n  readonly selected = computed(() => this._pattern.selected());\n\n  /** The Option UIPattern. */\n  readonly _pattern = new OptionPattern<V>({\n    ...this,\n    id: this.id,\n    value: this.value,\n    listbox: this.listbox,\n    element: this.element,\n    searchTerm: this.searchTerm,\n  });\n}\n"],"names":["inject","ComboboxPopup","optional","_elementRef","ElementRef","_directionality","Directionality","contentChildren","Option","ngDevMode","debugName","descendants","textDirection","toSignal","change","initialValue","value","items","computed","_options","map","option","_pattern","transform","booleanAttribute","wrap","input","focusMode","selectionMode","disabled","readonly","model","constructor","element","nativeElement","combobox","_popup","ComboboxListboxPattern","inputs","ListboxPattern","controls","set","violations","validate","violation","console","error","_hasFocused","setDefaultState","afterRenderEffect","activeItem","untracked","some","i","listBehavior","unfocus","v","filter","scrollActiveItemIntoView","options","block","args","selector","directive","ctorParameters","Listbox","_generatedId","_IdGenerator","getId"],"mappings":"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"}