{"version":3,"file":"radio-group.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/radio-group/radio-group.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  booleanAttribute,\n  computed,\n  contentChildren,\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  linkedSignal,\n  model,\n  signal,\n  WritableSignal,\n} from '@angular/core';\nimport {\n  RadioButtonPattern,\n  RadioGroupInputs,\n  RadioGroupPattern,\n  ToolbarRadioGroupInputs,\n  ToolbarRadioGroupPattern,\n} from '@angular/aria/private';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {ToolbarWidgetGroup} from '@angular/aria/toolbar';\n\n// TODO: Move mapSignal to it's own file so it can be reused across components.\n\n/**\n * Creates a new writable signal (signal V) whose value is connected to the given original\n * writable signal (signal T) such that updating signal V updates signal T and vice-versa.\n *\n * This function establishes a two-way synchronization between the source signal and the new mapped\n * signal. When the source signal changes, the mapped signal updates by applying the `transform`\n * function. When the mapped signal is explicitly set or updated, the change is propagated back to\n * the source signal by applying the `reverse` function.\n */\nexport function mapSignal<T, V>(\n  originalSignal: WritableSignal<T>,\n  operations: {\n    transform: (value: T) => V;\n    reverse: (value: V) => T;\n  },\n) {\n  const mappedSignal = linkedSignal(() => operations.transform(originalSignal()));\n  const updateMappedSignal = mappedSignal.update;\n  const setMappedSignal = mappedSignal.set;\n\n  mappedSignal.set = (newValue: V) => {\n    setMappedSignal(newValue);\n    originalSignal.set(operations.reverse(newValue));\n  };\n\n  mappedSignal.update = (updateFn: (value: V) => V) => {\n    updateMappedSignal(oldValue => updateFn(oldValue));\n    originalSignal.update(oldValue => operations.reverse(updateFn(operations.transform(oldValue))));\n  };\n\n  return mappedSignal;\n}\n\n/**\n * A radio button group container.\n *\n * Radio groups are used to group multiple radio buttons or radio group labels so they function as\n * a single form control. The RadioGroup is meant to be used in conjunction with RadioButton\n * as follows:\n *\n * ```html\n * <div ngRadioGroup>\n *   <div ngRadioButton value=\"1\">Option 1</div>\n *   <div ngRadioButton value=\"2\">Option 2</div>\n *   <div ngRadioButton value=\"3\">Option 3</div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[ngRadioGroup]',\n  exportAs: 'ngRadioGroup',\n  host: {\n    'role': 'radiogroup',\n    'class': 'ng-radio-group',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-readonly]': '_pattern.readonly()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-orientation]': '_pattern.orientation()',\n    '[attr.aria-activedescendant]': '_pattern.activedescendant()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': 'onFocus()',\n  },\n  hostDirectives: [\n    {\n      directive: ToolbarWidgetGroup,\n      inputs: ['disabled'],\n    },\n  ],\n})\nexport class RadioGroup<V> {\n  /** A reference to the radio group element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the ToolbarWidgetGroup, if the radio group is in a toolbar. */\n  private readonly _toolbarWidgetGroup = inject(ToolbarWidgetGroup);\n\n  /** Whether the radio group is inside of a Toolbar. */\n  private readonly _hasToolbar = computed(() => !!this._toolbarWidgetGroup.toolbar());\n\n  /** The RadioButtons nested inside of the RadioGroup. */\n  private readonly _radioButtons = contentChildren(RadioButton, {descendants: true});\n\n  /** A signal wrapper for directionality. */\n  protected textDirection = inject(Directionality).valueSignal;\n\n  /** The RadioButton UIPatterns of the child RadioButtons. */\n  protected items = computed(() => this._radioButtons().map(radio => radio._pattern));\n\n  /** Whether the radio group is vertically or horizontally oriented. */\n  readonly orientation = input<'vertical' | 'horizontal'>('vertical');\n\n  /** Whether disabled items in the group should be focusable. */\n  readonly softDisabled = input(false, {transform: booleanAttribute});\n\n  /** The focus strategy used by the radio group. */\n  readonly focusMode = input<'roving' | 'activedescendant'>('roving');\n\n  /** Whether the radio group is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the radio group is readonly. */\n  readonly readonly = input(false, {transform: booleanAttribute});\n\n  /** The value of the currently selected radio button. */\n  readonly value = model<V | null>(null);\n\n  /** The internal selection state for the radio group. */\n  private readonly _value = mapSignal<V | null, V[]>(this.value, {\n    transform: value => (value !== null ? [value] : []),\n    reverse: values => (values.length === 0 ? null : values[0]),\n  });\n\n  /** The RadioGroup UIPattern. */\n  readonly _pattern: RadioGroupPattern<V>;\n\n  /** Whether the radio group has received focus yet. */\n  private _hasFocused = signal(false);\n\n  constructor() {\n    const inputs: RadioGroupInputs<V> | ToolbarRadioGroupInputs<V> = {\n      ...this,\n      items: this.items,\n      value: this._value,\n      activeItem: signal(undefined),\n      textDirection: this.textDirection,\n      element: () => this._elementRef.nativeElement,\n      getItem: e => {\n        if (!(e.target instanceof HTMLElement)) {\n          return undefined;\n        }\n        const element = e.target.closest('[role=\"radio\"]');\n        return this.items().find(i => i.element() === element);\n      },\n      toolbar: this._toolbarWidgetGroup.toolbar,\n    };\n\n    this._pattern = this._hasToolbar()\n      ? new ToolbarRadioGroupPattern<V>(inputs as ToolbarRadioGroupInputs<V>)\n      : new RadioGroupPattern<V>(inputs as RadioGroupInputs<V>);\n\n    if (this._hasToolbar()) {\n      this._toolbarWidgetGroup.controls.set(this._pattern as ToolbarRadioGroupPattern<V>);\n    }\n\n    afterRenderEffect(() => {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const violations = this._pattern.validate();\n        for (const violation of violations) {\n          console.error(violation);\n        }\n      }\n    });\n\n    afterRenderEffect(() => {\n      if (!this._hasFocused() && !this._hasToolbar()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n\n  onFocus() {\n    this._hasFocused.set(true);\n  }\n}\n\n/** A selectable radio button in a RadioGroup. */\n@Directive({\n  selector: '[ngRadioButton]',\n  exportAs: 'ngRadioButton',\n  host: {\n    'role': 'radio',\n    'class': 'ng-radio-button',\n    '[attr.data-active]': '_pattern.active()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-checked]': '_pattern.selected()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[id]': '_pattern.id()',\n  },\n})\nexport class RadioButton<V> {\n  /** A reference to the radio button element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent RadioGroup. */\n  private readonly _radioGroup = inject(RadioGroup);\n\n  /** A unique identifier for the radio button. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-radio-button-', true);\n\n  /** A unique identifier for the radio button. */\n  readonly id = computed(() => this._generatedId);\n\n  /** The value associated with the radio button. */\n  readonly value = input.required<V>();\n\n  /** The parent RadioGroup UIPattern. */\n  readonly group = computed(() => this._radioGroup._pattern);\n\n  /** A reference to the radio button element to be focused on navigation. */\n  element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether the radio button is disabled. */\n  disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the radio button is selected. */\n  readonly selected = computed(() => this._pattern.selected());\n\n  /** The RadioButton UIPattern. */\n  readonly _pattern = new RadioButtonPattern<V>({\n    ...this,\n    id: this.id,\n    value: this.value,\n    group: this.group,\n    element: this.element,\n  });\n}\n"],"names":["update","updateFn","updateMappedSignal","oldValue","operations","reverse","transform","mappedSignal","_hasToolbar","computed","_toolbarWidgetGroup","toolbar","ngDevMode","debugName","_radioButtons","contentChildren","RadioButton","descendants","items","map","radio","_pattern","orientation","input","softDisabled","booleanAttribute","focusMode","readonly","value","model","_value","mapSignal","values","length","signal","constructor","inputs","activeItem","undefined","textDirection","getItem","e","target","HTMLElement","element","find","i","ToolbarRadioGroupPattern","RadioGroupPattern","controls","set","violations","validate","violation","_hasFocused","setDefaultState","onFocus","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","RadioGroup","deps","ɵɵFactoryTarget","Directive","ɵɵngDeclareDirective","isStandalone","selector","classPropertyName","publicName","isSignal","isRequired","transformFunction","disabled","outputs","host","attributes","listeners","properties","classAttribute","queries","propertyName","predicate","exportAs","hostDirectives","directive","i1","ToolbarWidgetGroup","ctorParameters","inject"],"mappings":"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"}