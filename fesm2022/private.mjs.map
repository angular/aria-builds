{"version":3,"file":"private.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/combobox/combobox.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-focus/list-focus.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-navigation/list-navigation.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-selection/list-selection.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-typeahead/list-typeahead.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list/list.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/listbox/listbox.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/listbox/option.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/listbox/combobox-listbox.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/menu/menu.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/radio-group/radio-group.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/radio-group/radio-button.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/radio-group/toolbar-radio-group.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/signal-like/signal-like.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/expansion/expansion.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/label/label.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/tabs/tabs.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/toolbar/toolbar-widget.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/toolbar/toolbar-widget-group.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/toolbar/toolbar.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/accordion/accordion.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/tree/tree.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/tree/combobox-tree.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\n\n/** Represents the required inputs for a combobox. */\nexport interface ComboboxInputs<T extends ListItem<V>, V> {\n  /** The controls for the popup associated with the combobox. */\n  popupControls: SignalLike<ComboboxListboxControls<T, V> | ComboboxTreeControls<T, V> | undefined>;\n\n  /** The HTML input element that serves as the combobox input. */\n  inputEl: SignalLike<HTMLInputElement | undefined>;\n\n  /** The HTML element that serves as the combobox container. */\n  containerEl: SignalLike<HTMLElement | undefined>;\n\n  /** The filtering mode for the combobox. */\n  filterMode: SignalLike<'manual' | 'auto-select' | 'highlight'>;\n\n  /** The current value of the combobox. */\n  inputValue?: WritableSignalLike<string>;\n\n  /** The value of the first matching item in the popup. */\n  firstMatch: SignalLike<V | undefined>;\n\n  /** Whether the combobox is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** Whether the combobox is read-only. */\n  readonly: SignalLike<boolean>;\n\n  /** Whether the combobox is in a right-to-left context. */\n  textDirection: SignalLike<'rtl' | 'ltr'>;\n}\n\n/** An interface that allows combobox popups to expose the necessary controls for the combobox. */\nexport interface ComboboxListboxControls<T extends ListItem<V>, V> {\n  /** A unique identifier for the popup. */\n  id: () => string;\n\n  /** The ARIA role for the popup. */\n  role: SignalLike<'listbox' | 'tree' | 'grid'>;\n\n  /** The ID of the active item in the popup. */\n  activeId: SignalLike<string | undefined>;\n\n  /** The list of items in the popup. */\n  items: SignalLike<T[]>;\n\n  /** Navigates to the given item in the popup. */\n  focus: (item: T) => void;\n\n  /** Navigates to the next item in the popup. */\n  next: () => void;\n\n  /** Navigates to the previous item in the popup. */\n  prev: () => void;\n\n  /** Navigates to the first item in the popup. */\n  first: () => void;\n\n  /** Navigates to the last item in the popup. */\n  last: () => void;\n\n  /** Selects the current item in the popup. */\n  select: (item?: T) => void;\n\n  /** Clears the selection state of the popup. */\n  clearSelection: () => void;\n\n  /** Removes focus from any item in the popup. */\n  unfocus: () => void;\n\n  /** Returns the item corresponding to the given event. */\n  getItem: (e: PointerEvent) => T | undefined;\n\n  /** Returns the currently selected item in the popup. */\n  getSelectedItem: () => T | undefined;\n\n  /** Sets the value of the combobox based on the selected item. */\n  setValue: (value: V | undefined) => void; // For re-setting the value if the popup was destroyed.\n}\n\nexport interface ComboboxTreeControls<T extends ListItem<V>, V>\n  extends ComboboxListboxControls<T, V> {\n  /** Whether the currently active item in the popup is collapsible. */\n  isItemCollapsible: () => boolean;\n\n  /** Expands the currently active item in the popup. */\n  expandItem: () => void;\n\n  /** Collapses the currently active item in the popup. */\n  collapseItem: () => void;\n\n  /** Checks if the currently active item in the popup is expandable. */\n  isItemExpandable: () => boolean;\n\n  /** Expands all nodes in the tree. */\n  expandAll: () => void;\n\n  /** Collapses all nodes in the tree. */\n  collapseAll: () => void;\n}\n\n/** Controls the state of a combobox. */\nexport class ComboboxPattern<T extends ListItem<V>, V> {\n  /** Whether the combobox is expanded. */\n  expanded = signal(false);\n\n  /** The ID of the active item in the combobox. */\n  activedescendant = computed(() => this.inputs.popupControls()?.activeId() ?? null);\n\n  /** The currently highlighted item in the combobox. */\n  highlightedItem = signal<T | undefined>(undefined);\n\n  /** Whether the most recent input event was a deletion. */\n  isDeleting = false;\n\n  /** Whether the combobox is focused. */\n  isFocused = signal(false);\n\n  /** The key used to navigate to the previous item in the list. */\n  expandKey = computed(() => (this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight'));\n\n  /** The key used to navigate to the next item in the list. */\n  collapseKey = computed(() =>\n    this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft',\n  );\n\n  /** The ID of the popup associated with the combobox. */\n  popupId = computed(() => this.inputs.popupControls()?.id() || null);\n\n  /** The autocomplete behavior of the combobox. */\n  autocomplete = computed(() => (this.inputs.filterMode() === 'highlight' ? 'both' : 'list'));\n\n  /** The ARIA role of the popup associated with the combobox. */\n  hasPopup = computed(() => this.inputs.popupControls()?.role() || null);\n\n  /** Whether the combobox is read-only. */\n  readonly = computed(() => this.inputs.readonly() || null);\n\n  /** The keydown event manager for the combobox. */\n  keydown = computed(() => {\n    if (!this.expanded()) {\n      const manager = new KeyboardEventManager()\n        .on('ArrowDown', () => this.open({first: true}))\n        .on('ArrowUp', () => this.open({last: true}))\n        .on('Escape', () => this.close({reset: true}));\n\n      if (this.readonly()) {\n        manager\n          .on('Enter', () => this.open({selected: true}))\n          .on(' ', () => this.open({selected: true}));\n      }\n\n      return manager;\n    }\n\n    const popupControls = this.inputs.popupControls();\n\n    if (!popupControls) {\n      return new KeyboardEventManager();\n    }\n\n    const manager = new KeyboardEventManager()\n      .on('ArrowDown', () => this.next())\n      .on('ArrowUp', () => this.prev())\n      .on('Home', () => this.first())\n      .on('End', () => this.last())\n      .on('Escape', () => this.close({reset: true}))\n      .on('Enter', () => this.select({commit: true, close: true}));\n\n    if (this.readonly()) {\n      manager.on(' ', () => this.select({commit: true, close: true}));\n    }\n\n    if (popupControls.role() === 'tree') {\n      const treeControls = popupControls as ComboboxTreeControls<T, V>;\n\n      if (treeControls.isItemExpandable() || treeControls.isItemCollapsible()) {\n        manager.on(this.collapseKey(), () => this.collapseItem());\n      }\n\n      if (treeControls.isItemExpandable()) {\n        manager.on(this.expandKey(), () => this.expandItem());\n      }\n    }\n\n    return manager;\n  });\n\n  /** The pointerup event manager for the combobox. */\n  pointerup = computed(() =>\n    new PointerEventManager().on(e => {\n      const item = this.inputs.popupControls()?.getItem(e);\n\n      if (item) {\n        this.select({item, commit: true, close: true});\n        this.inputs.inputEl()?.focus(); // Return focus to the input after selecting.\n      }\n\n      if (e.target === this.inputs.inputEl()) {\n        if (this.readonly()) {\n          this.expanded() ? this.close() : this.open({selected: true});\n        } else {\n          this.open();\n        }\n      }\n    }),\n  );\n\n  constructor(readonly inputs: ComboboxInputs<T, V>) {}\n\n  /** Handles keydown events for the combobox. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.inputs.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerup events for the combobox. */\n  onPointerup(event: PointerEvent) {\n    if (!this.inputs.disabled()) {\n      this.pointerup().handle(event);\n    }\n  }\n\n  /** Handles input events for the combobox. */\n  onInput(event: Event) {\n    if (this.inputs.disabled() || this.inputs.readonly()) {\n      return;\n    }\n\n    const inputEl = this.inputs.inputEl();\n\n    if (!inputEl) {\n      return;\n    }\n\n    this.open();\n    this.inputs.inputValue?.set(inputEl.value);\n    this.isDeleting = event instanceof InputEvent && !!event.inputType.match(/^delete/);\n\n    if (this.inputs.filterMode() === 'manual') {\n      const searchTerm = this.inputs.popupControls()?.getSelectedItem()?.searchTerm();\n\n      if (searchTerm && this.inputs.inputValue!() !== searchTerm) {\n        this.inputs.popupControls()?.clearSelection();\n      }\n    }\n\n    if (this.inputs.filterMode() === 'highlight' && !this.isDeleting) {\n      this.highlight();\n    }\n  }\n\n  /** Handles focus in events for the combobox. */\n  onFocusIn() {\n    this.isFocused.set(true);\n  }\n\n  /** Handles focus out events for the combobox. */\n  onFocusOut(event: FocusEvent) {\n    if (this.inputs.disabled()) {\n      return;\n    }\n\n    if (\n      !(event.relatedTarget instanceof HTMLElement) ||\n      !this.inputs.containerEl()?.contains(event.relatedTarget)\n    ) {\n      this.isFocused.set(false);\n      if (this.inputs.filterMode() !== 'manual') {\n        this.commit();\n      } else {\n        const item = this.inputs\n          .popupControls()\n          ?.items()\n          .find(i => i.searchTerm() === this.inputs.inputEl()?.value);\n\n        if (item) {\n          this.select({item});\n        }\n      }\n\n      this.close();\n    }\n  }\n\n  /** The first matching item in the combobox. */\n  firstMatch = computed(() => {\n    // TODO(wagnermaciel): Consider whether we should not provide this default behavior for the\n    // listbox. Instead, we may want to allow users to have no match so that typing does not focus\n    // any option.\n    if (this.inputs.popupControls()?.role() === 'listbox') {\n      return this.inputs.popupControls()?.items()[0];\n    }\n\n    return this.inputs\n      .popupControls()\n      ?.items()\n      .find(i => i.value() === this.inputs.firstMatch());\n  });\n\n  /** Handles filtering logic for the combobox. */\n  onFilter() {\n    // TODO(wagnermaciel)\n    // When the user first interacts with the combobox, the popup will lazily render for the first\n    // time. This is a simple way to detect this and avoid auto-focus & selection logic, but this\n    // should probably be moved to the component layer instead.\n    const isInitialRender = !this.inputs.inputValue?.().length && !this.isDeleting;\n\n    if (isInitialRender) {\n      return;\n    }\n\n    // Avoid refocusing the input if a filter event occurs after focus has left the combobox.\n    if (!this.isFocused()) {\n      return;\n    }\n\n    if (this.inputs.popupControls()?.role() === 'tree') {\n      const treeControls = this.inputs.popupControls() as ComboboxTreeControls<T, V>;\n      this.inputs.inputValue?.().length ? treeControls.expandAll() : treeControls.collapseAll();\n    }\n\n    const item = this.firstMatch();\n\n    if (!item) {\n      this.inputs.popupControls()?.clearSelection();\n      this.inputs.popupControls()?.unfocus();\n      return;\n    }\n\n    this.inputs.popupControls()?.focus(item);\n\n    if (this.inputs.filterMode() !== 'manual') {\n      this.select({item});\n    }\n\n    if (this.inputs.filterMode() === 'highlight' && !this.isDeleting) {\n      this.highlight();\n    }\n  }\n\n  /** Highlights the currently selected item in the combobox. */\n  highlight() {\n    const inputEl = this.inputs.inputEl();\n    const item = this.inputs.popupControls()?.getSelectedItem();\n\n    if (!inputEl || !item) {\n      return;\n    }\n\n    const isHighlightable = item\n      .searchTerm()\n      .toLowerCase()\n      .startsWith(this.inputs.inputValue!().toLowerCase());\n\n    if (isHighlightable) {\n      inputEl.value =\n        this.inputs.inputValue!() + item.searchTerm().slice(this.inputs.inputValue!().length);\n      inputEl.setSelectionRange(this.inputs.inputValue!().length, item.searchTerm().length);\n      this.highlightedItem.set(item);\n    }\n  }\n\n  /** Closes the combobox. */\n  close(opts?: {reset: boolean}) {\n    if (!opts?.reset) {\n      this.expanded.set(false);\n      this.inputs.popupControls()?.unfocus();\n      return;\n    }\n\n    const popupControls = this.inputs.popupControls();\n\n    if (!this.expanded()) {\n      this.inputs.inputValue?.set('');\n      popupControls?.clearSelection();\n\n      const inputEl = this.inputs.inputEl();\n\n      if (inputEl) {\n        inputEl.value = '';\n      }\n    } else if (this.expanded()) {\n      this.close();\n\n      const selectedItem = popupControls?.getSelectedItem();\n\n      if (selectedItem?.searchTerm() !== this.inputs.inputValue!()) {\n        popupControls?.clearSelection();\n      }\n    }\n\n    this.close();\n\n    if (!this.readonly()) {\n      this.inputs.popupControls()?.clearSelection();\n    }\n  }\n\n  /** Opens the combobox. */\n  open(nav?: {first?: boolean; last?: boolean; selected?: boolean}) {\n    this.expanded.set(true);\n\n    const inputEl = this.inputs.inputEl();\n\n    if (inputEl && this.inputs.filterMode() === 'highlight') {\n      const isHighlighting = inputEl.selectionStart !== inputEl.value.length;\n      this.inputs.inputValue?.set(inputEl.value.slice(0, inputEl.selectionStart || 0));\n      if (!isHighlighting) {\n        this.highlightedItem.set(undefined);\n      }\n    }\n\n    if (nav?.first) {\n      this.first();\n    }\n    if (nav?.last) {\n      this.last();\n    }\n    if (nav?.selected) {\n      const selectedItem = this.inputs.popupControls()?.getSelectedItem();\n      selectedItem ? this.inputs.popupControls()?.focus(selectedItem) : this.first();\n    }\n  }\n\n  /** Navigates to the next focusable item in the combobox popup. */\n  next() {\n    this._navigate(() => this.inputs.popupControls()?.next());\n  }\n\n  /** Navigates to the previous focusable item in the combobox popup. */\n  prev() {\n    this._navigate(() => this.inputs.popupControls()?.prev());\n  }\n\n  /** Navigates to the first focusable item in the combobox popup. */\n  first() {\n    this._navigate(() => this.inputs.popupControls()?.first());\n  }\n\n  /** Navigates to the last focusable item in the combobox popup. */\n  last() {\n    this._navigate(() => this.inputs.popupControls()?.last());\n  }\n\n  /** Collapses the currently focused item in the combobox. */\n  collapseItem() {\n    const controls = this.inputs.popupControls() as ComboboxTreeControls<T, V>;\n    this._navigate(() => controls?.collapseItem());\n  }\n\n  /** Expands the currently focused item in the combobox. */\n  expandItem() {\n    const controls = this.inputs.popupControls() as ComboboxTreeControls<T, V>;\n    this._navigate(() => controls?.expandItem());\n  }\n\n  /** Selects an item in the combobox popup. */\n  select(opts: {item?: T; commit?: boolean; close?: boolean} = {}) {\n    this.inputs.popupControls()?.select(opts.item);\n\n    if (opts.commit) {\n      this.commit();\n    }\n    if (opts.close) {\n      this.close();\n    }\n  }\n\n  /** Updates the value of the input based on the currently selected item. */\n  commit() {\n    const inputEl = this.inputs.inputEl();\n    const item = this.inputs.popupControls()?.getSelectedItem();\n\n    if (inputEl && item) {\n      inputEl.value = item.searchTerm();\n      this.inputs.inputValue?.set(item.searchTerm());\n\n      if (this.inputs.filterMode() === 'highlight') {\n        const length = inputEl.value.length;\n        inputEl.setSelectionRange(length, length);\n      }\n    }\n  }\n\n  /** Navigates and handles additional actions based on filter mode. */\n  private _navigate(operation: () => void) {\n    operation();\n\n    if (this.inputs.filterMode() !== 'manual') {\n      this.select();\n    }\n\n    if (this.inputs.filterMode() === 'highlight') {\n      // This is to handle when the user navigates back to the originally highlighted item.\n      // E.g. User types \"Al\", highlights \"Alice\", then navigates down and back up to \"Alice\".\n      const selectedItem = this.inputs.popupControls()?.getSelectedItem();\n\n      if (!selectedItem) {\n        return;\n      }\n\n      if (selectedItem === this.highlightedItem()) {\n        this.highlight();\n      } else {\n        const inputEl = this.inputs.inputEl()!;\n        inputEl.value = selectedItem?.searchTerm()!;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\n\n/** Represents an item in a collection, such as a listbox option, than may receive focus. */\nexport interface ListFocusItem {\n  /** A unique identifier for the item. */\n  id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  element: SignalLike<HTMLElement>;\n\n  /** Whether an item is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The index of the item in the list. */\n  index: SignalLike<number>;\n}\n\n/** Represents the required inputs for a collection that contains focusable items. */\nexport interface ListFocusInputs<T extends ListFocusItem> {\n  /** The focus strategy used by the list. */\n  focusMode: SignalLike<'roving' | 'activedescendant'>;\n\n  /** Whether the list is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The items in the list. */\n  items: SignalLike<T[]>;\n\n  /** The active item. */\n  activeItem: WritableSignalLike<T | undefined>;\n\n  /** Whether disabled items in the list should be skipped when navigating. */\n  skipDisabled: SignalLike<boolean>;\n\n  element: SignalLike<HTMLElement | undefined>;\n}\n\n/** Controls focus for a list of items. */\nexport class ListFocus<T extends ListFocusItem> {\n  /** The last item that was active. */\n  prevActiveItem = signal<T | undefined>(undefined);\n\n  /** The index of the last item that was active. */\n  prevActiveIndex = computed(() => {\n    return this.prevActiveItem() ? this.inputs.items().indexOf(this.prevActiveItem()!) : -1;\n  });\n\n  /** The current active index in the list. */\n  activeIndex = computed(() => {\n    return this.inputs.activeItem() ? this.inputs.items().indexOf(this.inputs.activeItem()!) : -1;\n  });\n\n  constructor(readonly inputs: ListFocusInputs<T>) {}\n\n  /** Whether the list is in a disabled state. */\n  isListDisabled(): boolean {\n    return this.inputs.disabled() || this.inputs.items().every(i => i.disabled());\n  }\n\n  /** The id of the current active item. */\n  getActiveDescendant(): string | undefined {\n    if (this.isListDisabled()) {\n      return undefined;\n    }\n    if (this.inputs.focusMode() === 'roving') {\n      return undefined;\n    }\n    return this.inputs.activeItem()?.id() ?? undefined;\n  }\n\n  /** The tabindex for the list. */\n  getListTabindex(): -1 | 0 {\n    if (this.isListDisabled()) {\n      return 0;\n    }\n    return this.inputs.focusMode() === 'activedescendant' ? 0 : -1;\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T): -1 | 0 {\n    if (this.isListDisabled()) {\n      return -1;\n    }\n    if (this.inputs.focusMode() === 'activedescendant') {\n      return -1;\n    }\n    return this.inputs.activeItem() === item ? 0 : -1;\n  }\n\n  /** Moves focus to the given item if it is focusable. */\n  focus(item: T, opts?: {focusElement?: boolean}): boolean {\n    if (this.isListDisabled() || !this.isFocusable(item)) {\n      return false;\n    }\n\n    this.prevActiveItem.set(this.inputs.activeItem());\n    this.inputs.activeItem.set(item);\n\n    if (opts?.focusElement || opts?.focusElement === undefined) {\n      this.inputs.focusMode() === 'roving'\n        ? item.element().focus()\n        : this.inputs.element()?.focus();\n    }\n\n    return true;\n  }\n\n  /** Returns true if the given item can be navigated to. */\n  isFocusable(item: T): boolean {\n    return !item.disabled() || !this.inputs.skipDisabled();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/** Represents an item in a collection, such as a listbox option, than can be navigated to. */\nexport interface ListNavigationItem extends ListFocusItem {}\n\n/** Represents the required inputs for a collection that has navigable items. */\nexport interface ListNavigationInputs<T extends ListNavigationItem> extends ListFocusInputs<T> {\n  /** Whether focus should wrap when navigating. */\n  wrap: SignalLike<boolean>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** The direction that text is read based on the users locale. */\n  textDirection: SignalLike<'rtl' | 'ltr'>;\n}\n\n/** Controls navigation for a list of items. */\nexport class ListNavigation<T extends ListNavigationItem> {\n  constructor(readonly inputs: ListNavigationInputs<T> & {focusManager: ListFocus<T>}) {}\n\n  /** Navigates to the given item. */\n  goto(item?: T, opts?: {focusElement?: boolean}): boolean {\n    return item ? this.inputs.focusManager.focus(item, opts) : false;\n  }\n\n  /** Navigates to the next item in the list. */\n  next(opts?: {focusElement?: boolean}): boolean {\n    return this._advance(1, opts);\n  }\n\n  /** Peeks the next item in the list. */\n  peekNext(): T | undefined {\n    return this._peek(1);\n  }\n\n  /** Navigates to the previous item in the list. */\n  prev(opts?: {focusElement?: boolean}): boolean {\n    return this._advance(-1, opts);\n  }\n\n  /** Peeks the previous item in the list. */\n  peekPrev(): T | undefined {\n    return this._peek(-1);\n  }\n\n  /** Navigates to the first item in the list. */\n  first(opts?: {focusElement?: boolean}): boolean {\n    const item = this.inputs.items().find(i => this.inputs.focusManager.isFocusable(i));\n    return item ? this.goto(item, opts) : false;\n  }\n\n  /** Navigates to the last item in the list. */\n  last(opts?: {focusElement?: boolean}): boolean {\n    const items = this.inputs.items();\n    for (let i = items.length - 1; i >= 0; i--) {\n      if (this.inputs.focusManager.isFocusable(items[i])) {\n        return this.goto(items[i], opts);\n      }\n    }\n    return false;\n  }\n\n  /** Advances to the next or previous focusable item in the list based on the given delta. */\n  private _advance(delta: 1 | -1, opts?: {focusElement?: boolean}): boolean {\n    const item = this._peek(delta);\n    return item ? this.goto(item, opts) : false;\n  }\n\n  /** Peeks the next or previous focusable item in the list based on the given delta. */\n  private _peek(delta: 1 | -1): T | undefined {\n    const items = this.inputs.items();\n    const itemCount = items.length;\n    const startIndex = this.inputs.focusManager.activeIndex();\n    const step = (i: number) =>\n      this.inputs.wrap() ? (i + delta + itemCount) % itemCount : i + delta;\n\n    // If wrapping is enabled, this loop ultimately terminates when `i` gets back to `startIndex`\n    // in the case that all options are disabled. If wrapping is disabled, the loop terminates\n    // when the index goes out of bounds.\n    for (let i = step(startIndex); i !== startIndex && i < itemCount && i >= 0; i = step(i)) {\n      if (this.inputs.focusManager.isFocusable(items[i])) {\n        return items[i];\n      }\n    }\n\n    return;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/** Represents an item in a collection, such as a listbox option, than can be selected. */\nexport interface ListSelectionItem<V> extends ListFocusItem {\n  /** The value of the item. */\n  value: SignalLike<V>;\n\n  /** Whether the item is selectable. */\n  selectable: SignalLike<boolean>;\n}\n\n/** Represents the required inputs for a collection that contains selectable items. */\nexport interface ListSelectionInputs<T extends ListSelectionItem<V>, V> extends ListFocusInputs<T> {\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The current value of the list selection. */\n  value: WritableSignalLike<V[]>;\n\n  /** The selection strategy used by the list. */\n  selectionMode: SignalLike<'follow' | 'explicit'>;\n}\n\n/** Controls selection for a list of items. */\nexport class ListSelection<T extends ListSelectionItem<V>, V> {\n  /** The start index to use for range selection. */\n  rangeStartIndex = signal<number>(0);\n\n  /** The end index to use for range selection. */\n  rangeEndIndex = signal<number>(0);\n\n  /** The currently selected items. */\n  selectedItems = computed(() =>\n    this.inputs.items().filter(item => this.inputs.value().includes(item.value())),\n  );\n\n  constructor(readonly inputs: ListSelectionInputs<T, V> & {focusManager: ListFocus<T>}) {}\n\n  /** Selects the item at the current active index. */\n  select(item?: ListSelectionItem<V>, opts = {anchor: true}) {\n    item = item ?? (this.inputs.focusManager.inputs.activeItem() as ListSelectionItem<V>);\n\n    if (\n      !item ||\n      item.disabled() ||\n      !item.selectable() ||\n      this.inputs.value().includes(item.value())\n    ) {\n      return;\n    }\n\n    if (!this.inputs.multi()) {\n      this.deselectAll();\n    }\n\n    const index = this.inputs.items().findIndex(i => i === item);\n    if (opts.anchor) {\n      this.beginRangeSelection(index);\n    }\n    this.inputs.value.update(values => values.concat(item.value()));\n  }\n\n  /** Deselects the item at the current active index. */\n  deselect(item?: T | null) {\n    item = item ?? this.inputs.focusManager.inputs.activeItem();\n\n    if (item && !item.disabled() && item.selectable()) {\n      this.inputs.value.update(values => values.filter(value => value !== item.value()));\n    }\n  }\n\n  /** Toggles the item at the current active index. */\n  toggle() {\n    const item = this.inputs.focusManager.inputs.activeItem();\n    if (item) {\n      this.inputs.value().includes(item.value()) ? this.deselect() : this.select();\n    }\n  }\n\n  /** Toggles only the item at the current active index. */\n  toggleOne() {\n    const item = this.inputs.focusManager.inputs.activeItem();\n    if (item) {\n      this.inputs.value().includes(item.value()) ? this.deselect() : this.selectOne();\n    }\n  }\n\n  /** Selects all items in the list. */\n  selectAll() {\n    if (!this.inputs.multi()) {\n      return; // Should we log a warning?\n    }\n\n    for (const item of this.inputs.items()) {\n      this.select(item, {anchor: false});\n    }\n\n    this.beginRangeSelection();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    // If an item is not in the list, it forcefully gets deselected.\n    // This actually creates a bug for the following edge case:\n    //\n    // Setup: An item is not in the list (maybe it's lazily loaded), and it is disabled & selected.\n    // Expected: If deselectAll() is called, it should NOT get deselected (because it is disabled).\n    // Actual: Calling deselectAll() will still deselect the item.\n    //\n    // Why? Because we can't check if the item is disabled if it's not in the list.\n    //\n    // Alternatively, we could NOT deselect items that are not in the list, but this has the\n    // inverse (and more common) effect of keeping enabled items selected when they aren't in the\n    // list.\n\n    for (const value of this.inputs.value()) {\n      const item = this.inputs.items().find(i => i.value() === value);\n\n      item\n        ? this.deselect(item)\n        : this.inputs.value.update(values => values.filter(v => v !== value));\n    }\n  }\n\n  /**\n   * Selects all items in the list or deselects all\n   * items in the list if all items are already selected.\n   */\n  toggleAll() {\n    const selectableValues = this.inputs\n      .items()\n      .filter(i => !i.disabled() && i.selectable())\n      .map(i => i.value());\n\n    selectableValues.every(i => this.inputs.value().includes(i))\n      ? this.deselectAll()\n      : this.selectAll();\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    const item = this.inputs.focusManager.inputs.activeItem();\n    if (item && (item.disabled() || !item.selectable())) {\n      return;\n    }\n\n    this.deselectAll();\n\n    if (this.inputs.value().length > 0 && !this.inputs.multi()) {\n      return;\n    }\n\n    this.select();\n  }\n\n  /**\n   * Selects all items in the list up to the anchor item.\n   *\n   * Deselects all items that were previously within the\n   * selected range that are now outside of the selected range\n   */\n  selectRange(opts = {anchor: true}) {\n    const isStartOfRange = this.inputs.focusManager.prevActiveIndex() === this.rangeStartIndex();\n\n    if (isStartOfRange && opts.anchor) {\n      this.beginRangeSelection(this.inputs.focusManager.prevActiveIndex());\n    }\n\n    const itemsInRange = this._getItemsFromIndex(this.rangeStartIndex());\n    const itemsOutOfRange = this._getItemsFromIndex(this.rangeEndIndex()).filter(\n      i => !itemsInRange.includes(i),\n    );\n\n    for (const item of itemsOutOfRange) {\n      this.deselect(item);\n    }\n\n    for (const item of itemsInRange) {\n      this.select(item, {anchor: false});\n    }\n\n    if (itemsInRange.length) {\n      const item = itemsInRange.pop();\n      const index = this.inputs.items().findIndex(i => i === item);\n      this.rangeEndIndex.set(index);\n    }\n  }\n\n  /** Marks the given index as the start of a range selection. */\n  beginRangeSelection(index: number = this.inputs.focusManager.activeIndex()) {\n    this.rangeStartIndex.set(index);\n    this.rangeEndIndex.set(index);\n  }\n\n  /** Returns the items in the list starting from the given index.  */\n  private _getItemsFromIndex(index: number) {\n    if (index === -1) {\n      return [];\n    }\n\n    const upper = Math.max(this.inputs.focusManager.activeIndex(), index);\n    const lower = Math.min(this.inputs.focusManager.activeIndex(), index);\n\n    const items = [];\n    for (let i = lower; i <= upper; i++) {\n      items.push(this.inputs.items()[i]);\n    }\n\n    if (this.inputs.focusManager.activeIndex() < index) {\n      return items.reverse();\n    }\n\n    return items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/**\n * Represents an item in a collection, such as a listbox option, than can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadItem extends ListFocusItem {\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n}\n\n/**\n * Represents the required inputs for a collection that contains items that can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadInputs<T extends ListTypeaheadItem> extends ListFocusInputs<T> {\n  /** The amount of time before the typeahead search is reset. */\n  typeaheadDelay: SignalLike<number>;\n}\n\n/** Controls typeahead for a list of items. */\nexport class ListTypeahead<T extends ListTypeaheadItem> {\n  /** A reference to the timeout for resetting the typeahead search. */\n  timeout?: ReturnType<typeof setTimeout> | undefined;\n\n  /** The focus controller of the parent list. */\n  focusManager: ListFocus<T>;\n\n  /** Whether the user is actively typing a typeahead search query. */\n  isTyping = computed(() => this._query().length > 0);\n\n  /** Keeps track of the characters that typeahead search is being called with. */\n  private _query = signal('');\n\n  /** The index where that the typeahead search was initiated from. */\n  private _startIndex = signal<number | undefined>(undefined);\n\n  constructor(readonly inputs: ListTypeaheadInputs<T> & {focusManager: ListFocus<T>}) {\n    this.focusManager = inputs.focusManager;\n  }\n\n  /** Performs a typeahead search, appending the given character to the search string. */\n  search(char: string): boolean {\n    if (char.length !== 1) {\n      return false;\n    }\n\n    if (!this.isTyping() && char === ' ') {\n      return false;\n    }\n\n    if (this._startIndex() === undefined) {\n      this._startIndex.set(this.focusManager.activeIndex());\n    }\n\n    clearTimeout(this.timeout);\n    this._query.update(q => q + char.toLowerCase());\n    const item = this._getItem();\n\n    if (item) {\n      this.focusManager.focus(item);\n    }\n\n    this.timeout = setTimeout(() => {\n      this._query.set('');\n      this._startIndex.set(undefined);\n    }, this.inputs.typeaheadDelay() * 1000);\n\n    return true;\n  }\n\n  /**\n   * Returns the first item whose search term matches the\n   * current query starting from the the current anchor index.\n   */\n  private _getItem() {\n    let items = this.focusManager.inputs.items();\n    const after = items.slice(this._startIndex()! + 1);\n    const before = items.slice(0, this._startIndex()!);\n    items = after.concat(before);\n    items.push(this.inputs.items()[this._startIndex()!]);\n\n    const focusableItems = [];\n    for (const item of items) {\n      if (this.focusManager.isFocusable(item)) {\n        focusableItems.push(item);\n      }\n    }\n\n    return focusableItems.find(i => i.searchTerm().toLowerCase().startsWith(this._query()));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\nimport {\n  ListNavigation,\n  ListNavigationInputs,\n  ListNavigationItem,\n} from '../list-navigation/list-navigation';\nimport {\n  ListSelection,\n  ListSelectionInputs,\n  ListSelectionItem,\n} from '../list-selection/list-selection';\nimport {\n  ListTypeahead,\n  ListTypeaheadInputs,\n  ListTypeaheadItem,\n} from '../list-typeahead/list-typeahead';\n\n/** The operations that the list can perform after navigation. */\ninterface NavOptions {\n  toggle?: boolean;\n  select?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n  focusElement?: boolean;\n}\n\n/** Represents an item in the list. */\nexport type ListItem<V> = ListTypeaheadItem &\n  ListNavigationItem &\n  ListSelectionItem<V> &\n  ListFocusItem;\n\n/** The necessary inputs for the list behavior. */\nexport type ListInputs<T extends ListItem<V>, V> = ListFocusInputs<T> &\n  ListNavigationInputs<T> &\n  ListSelectionInputs<T, V> &\n  ListTypeaheadInputs<T>;\n\n/** Controls the state of a list. */\nexport class List<T extends ListItem<V>, V> {\n  /** Controls navigation for the list. */\n  navigationBehavior: ListNavigation<T>;\n\n  /** Controls selection for the list. */\n  selectionBehavior: ListSelection<T, V>;\n\n  /** Controls typeahead for the list. */\n  typeaheadBehavior: ListTypeahead<T>;\n\n  /** Controls focus for the list. */\n  focusBehavior: ListFocus<T>;\n\n  /** Whether the list is disabled. */\n  disabled = computed(() => this.focusBehavior.isListDisabled());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.focusBehavior.getActiveDescendant());\n\n  /** The tabindex of the list. */\n  tabindex = computed(() => this.focusBehavior.getListTabindex());\n\n  /** The index of the currently active item in the list. */\n  activeIndex = computed(() => this.focusBehavior.activeIndex());\n\n  /**\n   * The uncommitted index for selecting a range of options.\n   *\n   * NOTE: This is subtly distinct from the \"rangeStartIndex\" in the ListSelection behavior.\n   * The anchorIndex does not necessarily represent the start of a range, but represents the most\n   * recent index where the user showed intent to begin a range selection. Usually, this is wherever\n   * the user most recently pressed the \"Shift\" key, but if the user presses shift + space to select\n   * from the anchor, the user is not intending to start a new range from this index.\n   *\n   * In other words, \"rangeStartIndex\" is only set when a user commits to starting a range selection\n   * while \"anchorIndex\" is set whenever a user indicates they may be starting a range selection.\n   */\n  private _anchorIndex = signal(0);\n\n  /** Whether the list should wrap. Used to disable wrapping while range selecting. */\n  private _wrap = signal(true);\n\n  constructor(readonly inputs: ListInputs<T, V>) {\n    this.focusBehavior = new ListFocus(inputs);\n    this.selectionBehavior = new ListSelection({...inputs, focusManager: this.focusBehavior});\n    this.typeaheadBehavior = new ListTypeahead({...inputs, focusManager: this.focusBehavior});\n    this.navigationBehavior = new ListNavigation({\n      ...inputs,\n      focusManager: this.focusBehavior,\n      wrap: computed(() => this._wrap() && this.inputs.wrap()),\n    });\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T) {\n    return this.focusBehavior.getItemTabindex(item);\n  }\n\n  /** Navigates to the first option in the list. */\n  first(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.first(opts));\n  }\n\n  /** Navigates to the last option in the list. */\n  last(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.last(opts));\n  }\n\n  /** Navigates to the next option in the list. */\n  next(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.next(opts));\n  }\n\n  /** Navigates to the previous option in the list. */\n  prev(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.prev(opts));\n  }\n\n  /** Navigates to the given item in the list. */\n  goto(item: T, opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.goto(item, opts));\n  }\n\n  /** Removes focus from the list. */\n  unfocus() {\n    this.inputs.activeItem.set(undefined);\n  }\n\n  /** Marks the given index as the potential start of a range selection. */\n  anchor(index: number) {\n    this._anchorIndex.set(index);\n  }\n\n  /** Handles typeahead search navigation for the list. */\n  search(char: string, opts?: NavOptions) {\n    this._navigate(opts, () => this.typeaheadBehavior.search(char));\n  }\n\n  /** Checks if the list is currently typing for typeahead search. */\n  isTyping() {\n    return this.typeaheadBehavior.isTyping();\n  }\n\n  /** Selects the currently active item in the list. */\n  select(item?: T) {\n    this.selectionBehavior.select(item);\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    this.selectionBehavior.selectOne();\n  }\n\n  /** Deselects the currently active item in the list. */\n  deselect() {\n    this.selectionBehavior.deselect();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    this.selectionBehavior.deselectAll();\n  }\n\n  /** Toggles the currently active item in the list. */\n  toggle() {\n    this.selectionBehavior.toggle();\n  }\n\n  /** Toggles the currently active item in the list, deselecting all other items. */\n  toggleOne() {\n    this.selectionBehavior.toggleOne();\n  }\n\n  /** Toggles the selection of all items in the list. */\n  toggleAll() {\n    this.selectionBehavior.toggleAll();\n  }\n\n  /** Checks if the given item is able to receive focus. */\n  isFocusable(item: T) {\n    return this.focusBehavior.isFocusable(item);\n  }\n\n  /** Handles updating selection for the list. */\n  updateSelection(opts: NavOptions = {anchor: true}) {\n    if (opts.toggle) {\n      this.selectionBehavior.toggle();\n    }\n    if (opts.select) {\n      this.selectionBehavior.select();\n    }\n    if (opts.selectOne) {\n      this.selectionBehavior.selectOne();\n    }\n    if (opts.selectRange) {\n      this.selectionBehavior.selectRange();\n    }\n    if (!opts.anchor) {\n      this.anchor(this.selectionBehavior.rangeStartIndex());\n    }\n  }\n\n  /**\n   * Safely performs a navigation operation.\n   *\n   * Handles conditionally disabling wrapping for when a navigation\n   * operation is occurring while the user is selecting a range of options.\n   *\n   * Handles boilerplate calling of focus & selection operations. Also ensures these\n   * additional operations are only called if the navigation operation moved focus to a new option.\n   */\n  private _navigate(opts: NavOptions = {}, operation: () => boolean) {\n    if (opts?.selectRange) {\n      this._wrap.set(false);\n      this.selectionBehavior.rangeStartIndex.set(this._anchorIndex());\n    }\n\n    const moved = operation();\n\n    if (moved) {\n      this.updateSelection(opts);\n    }\n\n    this._wrap.set(true);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OptionPattern} from './option';\nimport {KeyboardEventManager, PointerEventManager, Modifier} from '../behaviors/event-manager';\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs} from '../behaviors/list/list';\n\n/** Represents the required inputs for a listbox. */\nexport type ListboxInputs<V> = ListInputs<OptionPattern<V>, V> & {\n  /** A unique identifier for the listbox. */\n  id: SignalLike<string>;\n\n  /** Whether the listbox is readonly. */\n  readonly: SignalLike<boolean>;\n};\n\n/** Controls the state of a listbox. */\nexport class ListboxPattern<V> {\n  listBehavior: List<OptionPattern<V>, V>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether the listbox is disabled. */\n  disabled = computed(() => this.listBehavior.disabled());\n\n  /** Whether the listbox is readonly. */\n  readonly: SignalLike<boolean>;\n\n  /** The tabindex of the listbox. */\n  tabindex: SignalLike<-1 | 0> = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The number of items in the listbox. */\n  setsize = computed(() => this.inputs.items().length);\n\n  /** Whether the listbox selection follows focus. */\n  followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** Whether the listbox should wrap. Used to disable wrapping while range selecting. */\n  wrap = signal(true);\n\n  /** The key used to navigate to the previous item in the list. */\n  prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next item in the list. */\n  nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/;\n\n  /** The keydown event manager for the listbox. */\n  keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    if (this.readonly()) {\n      return manager\n        .on(this.prevKey, () => this.listBehavior.prev())\n        .on(this.nextKey, () => this.listBehavior.next())\n        .on('Home', () => this.listBehavior.first())\n        .on('End', () => this.listBehavior.last())\n        .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n    }\n\n    if (!this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.listBehavior.prev())\n        .on(this.nextKey, () => this.listBehavior.next())\n        .on('Home', () => this.listBehavior.first())\n        .on('End', () => this.listBehavior.last())\n        .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n    }\n\n    if (this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.listBehavior.prev({selectOne: true}))\n        .on(this.nextKey, () => this.listBehavior.next({selectOne: true}))\n        .on('Home', () => this.listBehavior.first({selectOne: true}))\n        .on('End', () => this.listBehavior.last({selectOne: true}))\n        .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key, {selectOne: true}));\n    }\n\n    if (this.inputs.multi()) {\n      manager\n        .on(Modifier.Any, 'Shift', () => this.listBehavior.anchor(this.listBehavior.activeIndex()))\n        .on(Modifier.Shift, this.prevKey, () => this.listBehavior.prev({selectRange: true}))\n        .on(Modifier.Shift, this.nextKey, () => this.listBehavior.next({selectRange: true}))\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'Home', () =>\n          this.listBehavior.first({selectRange: true, anchor: false}),\n        )\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'End', () =>\n          this.listBehavior.last({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, 'Enter', () =>\n          this.listBehavior.updateSelection({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, this.dynamicSpaceKey, () =>\n          this.listBehavior.updateSelection({selectRange: true, anchor: false}),\n        );\n    }\n\n    if (!this.followFocus() && this.inputs.multi()) {\n      manager\n        .on(this.dynamicSpaceKey, () => this.listBehavior.toggle())\n        .on('Enter', () => this.listBehavior.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => this.listBehavior.toggleAll());\n    }\n\n    if (!this.followFocus() && !this.inputs.multi()) {\n      manager.on(this.dynamicSpaceKey, () => this.listBehavior.toggleOne());\n      manager.on('Enter', () => this.listBehavior.toggleOne());\n    }\n\n    if (this.inputs.multi() && this.followFocus()) {\n      manager\n        .on([Modifier.Ctrl, Modifier.Meta], this.prevKey, () => this.listBehavior.prev())\n        .on([Modifier.Ctrl, Modifier.Meta], this.nextKey, () => this.listBehavior.next())\n        .on([Modifier.Ctrl, Modifier.Meta], ' ', () => this.listBehavior.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Enter', () => this.listBehavior.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Home', () => this.listBehavior.first())\n        .on([Modifier.Ctrl, Modifier.Meta], 'End', () => this.listBehavior.last())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => {\n          this.listBehavior.toggleAll();\n          this.listBehavior.select(); // Ensure the currect option remains selected.\n        });\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the listbox. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.readonly()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!));\n    }\n\n    if (this.multi()) {\n      manager.on(Modifier.Shift, e =>\n        this.listBehavior.goto(this._getItem(e)!, {selectRange: true}),\n      );\n    }\n\n    if (!this.multi() && this.followFocus()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!, {selectOne: true}));\n    }\n\n    if (!this.multi() && !this.followFocus()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!, {toggle: true}));\n    }\n\n    if (this.multi() && this.followFocus()) {\n      return manager\n        .on(e => this.listBehavior.goto(this._getItem(e)!, {selectOne: true}))\n        .on(Modifier.Ctrl, e => this.listBehavior.goto(this._getItem(e)!, {toggle: true}));\n    }\n\n    if (this.multi() && !this.followFocus()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!, {toggle: true}));\n    }\n\n    return manager;\n  });\n\n  constructor(readonly inputs: ListboxInputs<V>) {\n    this.readonly = inputs.readonly;\n    this.orientation = inputs.orientation;\n    this.multi = inputs.multi;\n    this.listBehavior = new List(inputs);\n  }\n\n  /** Returns a set of violations */\n  validate(): string[] {\n    const violations: string[] = [];\n\n    if (!this.inputs.multi() && this.inputs.value().length > 1) {\n      violations.push(\n        `A single-select listbox should not have multiple selected options. Selected options: ${this.inputs.value().join(', ')}`,\n      );\n    }\n\n    return violations;\n  }\n\n  /** Handles keydown events for the listbox. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /**\n   * Sets the listbox to it's default initial state.\n   *\n   * Sets the active index of the listbox to the first focusable selected\n   * item if one exists. Otherwise, sets focus to the first focusable item.\n   *\n   * This method should be called once the listbox and it's options are properly initialized,\n   * meaning the ListboxPattern and OptionPatterns should have references to each other before this\n   * is called.\n   */\n  setDefaultState() {\n    let firstItem: OptionPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.listBehavior.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n        if (item.selected()) {\n          this.inputs.activeItem.set(item);\n          return;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeItem.set(firstItem);\n    }\n  }\n\n  protected _getItem(e: PointerEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"option\"]');\n    return this.inputs.items().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\n\n/**\n * Represents the properties exposed by a listbox that need to be accessed by an option.\n * This exists to avoid circular dependency errors between the listbox and option.\n */\ninterface ListboxPattern<V> {\n  inputs: ListInputs<OptionPattern<V>, V>;\n  listBehavior: List<OptionPattern<V>, V>;\n}\n\n/** Represents the required inputs for an option in a listbox. */\nexport interface OptionInputs<V> extends Omit<ListItem<V>, 'index' | 'selectable'> {\n  listbox: SignalLike<ListboxPattern<V> | undefined>;\n}\n\n/** Represents an option in a listbox. */\nexport class OptionPattern<V> {\n  /** A unique identifier for the option. */\n  id: SignalLike<string>;\n\n  /** The value of the option. */\n  value: SignalLike<V>;\n\n  /** The position of the option in the list. */\n  index = computed(() => this.listbox()?.inputs.items().indexOf(this) ?? -1);\n\n  /** Whether the option is active. */\n  active = computed(() => this.listbox()?.inputs.activeItem() === this);\n\n  /** Whether the option is selected. */\n  selected = computed(() => this.listbox()?.inputs.value().includes(this.value()));\n\n  /** Whether the option is selectable. */\n  selectable = () => true;\n\n  /** Whether the option is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n\n  /** A reference to the parent listbox. */\n  listbox: SignalLike<ListboxPattern<V> | undefined>;\n\n  /** The tabindex of the option. */\n  tabindex = computed(() => this.listbox()?.listBehavior.getItemTabindex(this));\n\n  /** The html element that should receive focus. */\n  element: SignalLike<HTMLElement>;\n\n  constructor(args: OptionInputs<V>) {\n    this.id = args.id;\n    this.value = args.value;\n    this.listbox = args.listbox;\n    this.element = args.element;\n    this.disabled = args.disabled;\n    this.searchTerm = args.searchTerm;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {ListboxInputs, ListboxPattern} from './listbox';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {OptionPattern} from './option';\nimport {ComboboxPattern, ComboboxListboxControls} from '../combobox/combobox';\n\nexport type ComboboxListboxInputs<V> = ListboxInputs<V> & {\n  /** The combobox controlling the listbox. */\n  combobox: SignalLike<ComboboxPattern<OptionPattern<V>, V> | undefined>;\n};\n\nexport class ComboboxListboxPattern<V>\n  extends ListboxPattern<V>\n  implements ComboboxListboxControls<OptionPattern<V>, V>\n{\n  /** A unique identifier for the popup. */\n  id = computed(() => this.inputs.id());\n\n  /** The ARIA role for the listbox. */\n  role = computed(() => 'listbox' as const);\n\n  /** The id of the active (focused) item in the listbox. */\n  activeId = computed(() => this.listBehavior.activedescendant());\n\n  /** The list of options in the listbox. */\n  items: SignalLike<OptionPattern<V>[]> = computed(() => this.inputs.items());\n\n  /** The tabindex for the listbox. Always -1 because the combobox handles focus. */\n  override tabindex: SignalLike<-1 | 0> = () => -1;\n\n  constructor(override readonly inputs: ComboboxListboxInputs<V>) {\n    if (inputs.combobox()) {\n      inputs.multi = () => false;\n      inputs.focusMode = () => 'activedescendant';\n      inputs.element = inputs.combobox()!.inputs.inputEl;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The combobox handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The combobox handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Noop. The combobox controls the open state. */\n  override setDefaultState(): void {}\n\n  /** Navigates to the specified item in the listbox. */\n  focus = (item: OptionPattern<V>) => this.listBehavior.goto(item);\n\n  /** Navigates to the next focusable item in the listbox. */\n  next = () => this.listBehavior.next();\n\n  /** Navigates to the previous focusable item in the listbox. */\n  prev = () => this.listBehavior.prev();\n\n  /** Navigates to the last focusable item in the listbox. */\n  last = () => this.listBehavior.last();\n\n  /** Navigates to the first focusable item in the listbox. */\n  first = () => this.listBehavior.first();\n\n  /** Unfocuses the currently focused item in the listbox. */\n  unfocus = () => this.listBehavior.unfocus();\n\n  /** Selects the specified item in the listbox. */\n  select = (item?: OptionPattern<V>) => this.listBehavior.select(item);\n\n  /** Clears the selection in the listbox. */\n  clearSelection = () => this.listBehavior.deselectAll();\n\n  /** Retrieves the OptionPattern associated with a pointer event. */\n  getItem = (e: PointerEvent) => this._getItem(e);\n\n  /** Retrieves the currently selected item in the listbox. */\n  getSelectedItem = () => this.inputs.items().find(i => i.selected());\n\n  /** Sets the value of the combobox listbox. */\n  setValue = (value: V | undefined) => this.inputs.value.set(value ? [value] : []);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, Signal, signal} from '@angular/core';\nimport {KeyboardEventManager} from '../behaviors/event-manager';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\n\n/** The inputs for the MenuBarPattern class. */\nexport interface MenuBarInputs<V> extends Omit<ListInputs<MenuItemPattern<V>, V>, 'disabled'> {\n  /** The menu items contained in the menu. */\n  items: SignalLike<MenuItemPattern<V>[]>;\n\n  /** Callback function triggered when a menu item is selected. */\n  onSelect?: (value: V) => void;\n}\n\n/** The inputs for the MenuPattern class. */\nexport interface MenuInputs<V>\n  extends Omit<ListInputs<MenuItemPattern<V>, V>, 'value' | 'disabled'> {\n  /** The unique ID of the menu. */\n  id: SignalLike<string>;\n\n  /** The menu items contained in the menu. */\n  items: SignalLike<MenuItemPattern<V>[]>;\n\n  /** A reference to the parent menu or menu trigger. */\n  parent: SignalLike<MenuTriggerPattern<V> | MenuItemPattern<V> | undefined>;\n\n  /** Callback function triggered when a menu item is selected. */\n  onSelect?: (value: V) => void;\n}\n\n/** The inputs for the MenuTriggerPattern class. */\nexport interface MenuTriggerInputs<V> {\n  /** A reference to the menu trigger element. */\n  element: SignalLike<HTMLElement | undefined>;\n\n  /** A reference to the menu associated with the trigger. */\n  menu: SignalLike<MenuPattern<V> | undefined>;\n}\n\n/** The inputs for the MenuItemPattern class. */\nexport interface MenuItemInputs<V> extends Omit<ListItem<V>, 'index' | 'selectable'> {\n  /** A reference to the parent menu or menu trigger. */\n  parent: SignalLike<MenuPattern<V> | MenuBarPattern<V> | undefined>;\n\n  /** A reference to the submenu associated with the menu item. */\n  submenu: SignalLike<MenuPattern<V> | undefined>;\n}\n\n/** The menu ui pattern class. */\nexport class MenuPattern<V> {\n  /** The unique ID of the menu. */\n  id: SignalLike<string>;\n\n  /** The role of the menu. */\n  role = () => 'menu';\n\n  /** Whether the menu is visible. */\n  isVisible = computed(() => (this.inputs.parent() ? !!this.inputs.parent()?.expanded() : true));\n\n  /** Controls list behavior for the menu items. */\n  listBehavior: List<MenuItemPattern<V>, V>;\n\n  /** Whether the menu or any of its child elements are currently focused. */\n  isFocused = signal(false);\n\n  /** Whether the menu has received focus. */\n  hasBeenFocused = signal(false);\n\n  /** Whether the menu should be focused on mouse over. */\n  shouldFocus = computed(() => {\n    const root = this.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      return true;\n    }\n\n    if (root instanceof MenuBarPattern || root instanceof MenuPattern) {\n      return root.isFocused();\n    }\n\n    return false;\n  });\n\n  /** The key used to expand sub-menus. */\n  private _expandKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key used to collapse sub-menus. */\n  private _collapseKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/;\n\n  /** The root of the menu. */\n  root: Signal<MenuTriggerPattern<V> | MenuBarPattern<V> | MenuPattern<V> | undefined> = computed(\n    () => {\n      const parent = this.inputs.parent();\n\n      if (!parent) {\n        return this;\n      }\n\n      if (parent instanceof MenuTriggerPattern) {\n        return parent;\n      }\n\n      const grandparent = parent.inputs.parent();\n\n      if (grandparent instanceof MenuBarPattern) {\n        return grandparent;\n      }\n\n      return grandparent?.root();\n    },\n  );\n\n  /** Handles keyboard events for the menu. */\n  keydownManager = computed(() => {\n    return new KeyboardEventManager()\n      .on('ArrowDown', () => this.next())\n      .on('ArrowUp', () => this.prev())\n      .on('Home', () => this.first())\n      .on('End', () => this.last())\n      .on('Enter', () => this.trigger())\n      .on('Escape', () => this.closeAll())\n      .on(this._expandKey, () => this.expand())\n      .on(this._collapseKey, () => this.collapse())\n      .on(this.dynamicSpaceKey, () => this.trigger())\n      .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n  });\n\n  constructor(readonly inputs: MenuInputs<V>) {\n    this.id = inputs.id;\n    this.listBehavior = new List<MenuItemPattern<V>, V>({\n      ...inputs,\n      value: signal([]),\n      disabled: () => false,\n    });\n  }\n\n  /** Sets the default state for the menu. */\n  setDefaultState() {\n    if (!this.inputs.parent()) {\n      this.inputs.activeItem.set(this.inputs.items()[0]);\n    }\n  }\n\n  /** Handles keyboard events for the menu. */\n  onKeydown(event: KeyboardEvent) {\n    this.keydownManager().handle(event);\n  }\n\n  /** Handles mouseover events for the menu. */\n  onMouseOver(event: MouseEvent) {\n    if (!this.isVisible()) {\n      return;\n    }\n\n    const item = this.inputs.items().find(i => i.element()?.contains(event.target as Node));\n\n    if (!item) {\n      return;\n    }\n\n    const activeItem = this?.inputs.activeItem();\n\n    if (activeItem && activeItem !== item) {\n      activeItem.close();\n    }\n\n    if (item.expanded() && item.submenu()?.inputs.activeItem()) {\n      item.submenu()?.inputs.activeItem()?.close();\n      item.submenu()?.listBehavior.unfocus();\n    }\n\n    item.open();\n    this.listBehavior.goto(item, {focusElement: this.shouldFocus()});\n  }\n\n  /** Handles mouseout events for the menu. */\n  onMouseOut(event: MouseEvent) {\n    if (this.isFocused()) {\n      return;\n    }\n\n    const root = this.root();\n    const parent = this.inputs.parent();\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (!root || !parent || parent instanceof MenuTriggerPattern) {\n      return;\n    }\n\n    const grandparent = parent.inputs.parent();\n\n    if (!grandparent || grandparent instanceof MenuBarPattern) {\n      return;\n    }\n\n    if (!grandparent.inputs.element()?.contains(relatedTarget)) {\n      parent.close();\n    }\n  }\n\n  /** Handles click events for the menu. */\n  onClick(event: MouseEvent) {\n    const relatedTarget = event.target as Node | null;\n    const item = this.inputs.items().find(i => i.element()?.contains(relatedTarget));\n\n    if (item) {\n      item.open();\n      this.listBehavior.goto(item);\n      this.submit(item);\n    }\n  }\n\n  /** Handles focusin events for the menu. */\n  onFocusIn() {\n    this.isFocused.set(true);\n    this.hasBeenFocused.set(true);\n  }\n\n  /** Handles the focusout event for the menu. */\n  onFocusOut(event: FocusEvent) {\n    const parent = this.inputs.parent();\n    const parentEl = parent?.inputs.element();\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (!relatedTarget) {\n      this.isFocused.set(false);\n      this.inputs.parent()?.close({refocus: true});\n    }\n\n    if (parent instanceof MenuItemPattern) {\n      const grandparent = parent.inputs.parent();\n      const siblings = grandparent?.inputs.items().filter(i => i !== parent);\n      const item = siblings?.find(i => i.element().contains(relatedTarget));\n\n      if (item) {\n        return;\n      }\n    }\n\n    if (\n      this.isVisible() &&\n      !parentEl?.contains(relatedTarget) &&\n      !this.inputs.element()?.contains(relatedTarget)\n    ) {\n      this.isFocused.set(false);\n      this.inputs.parent()?.close();\n    }\n  }\n\n  /** Focuses the previous menu item. */\n  prev() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.prev();\n  }\n\n  /** Focuses the next menu item. */\n  next() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.next();\n  }\n\n  /** Focuses the first menu item. */\n  first() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.first();\n  }\n\n  /** Focuses the last menu item. */\n  last() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.last();\n  }\n\n  /** Triggers the active menu item. */\n  trigger() {\n    this.inputs.activeItem()?.hasPopup()\n      ? this.inputs.activeItem()?.open({first: true})\n      : this.submit();\n  }\n\n  /** Submits the menu. */\n  submit(item = this.inputs.activeItem()) {\n    const root = this.root();\n\n    if (item && !item.disabled()) {\n      const isMenu = root instanceof MenuPattern;\n      const isMenuBar = root instanceof MenuBarPattern;\n      const isMenuTrigger = root instanceof MenuTriggerPattern;\n\n      if (!item.submenu() && isMenuTrigger) {\n        root.close({refocus: true});\n      }\n\n      if (!item.submenu() && isMenuBar) {\n        root.close();\n        root?.inputs.onSelect?.(item.value());\n      }\n\n      if (!item.submenu() && isMenu) {\n        root.inputs.activeItem()?.close({refocus: true});\n        root?.inputs.onSelect?.(item.value());\n      }\n    }\n  }\n\n  /** Collapses the current menu or focuses the previous item in the menubar. */\n  collapse() {\n    const root = this.root();\n    const parent = this.inputs.parent();\n\n    if (parent instanceof MenuItemPattern && !(parent.inputs.parent() instanceof MenuBarPattern)) {\n      parent.close({refocus: true});\n    } else if (root instanceof MenuBarPattern) {\n      root.prev();\n    }\n  }\n\n  /** Expands the current menu or focuses the next item in the menubar. */\n  expand() {\n    const root = this.root();\n    const activeItem = this.inputs.activeItem();\n\n    if (activeItem?.submenu()) {\n      activeItem.open({first: true});\n    } else if (root instanceof MenuBarPattern) {\n      root.next();\n    }\n  }\n\n  /** Closes the menu and all parent menus. */\n  closeAll() {\n    const root = this.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      root.close({refocus: true});\n    }\n\n    if (root instanceof MenuBarPattern) {\n      root.close();\n    }\n\n    if (root instanceof MenuPattern) {\n      root.inputs.activeItem()?.close({refocus: true});\n    }\n  }\n}\n\n/** The menubar ui pattern class. */\nexport class MenuBarPattern<V> {\n  /** Controls list behavior for the menu items. */\n  listBehavior: List<MenuItemPattern<V>, V>;\n\n  /** The key used to navigate to the next item. */\n  private _nextKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key used to navigate to the previous item. */\n  private _previousKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/;\n\n  /** Whether the menubar or any of its children are currently focused. */\n  isFocused = signal(false);\n\n  /** Whether the menubar has been focused. */\n  hasBeenFocused = signal(false);\n\n  /** Handles keyboard events for the menu. */\n  keydownManager = computed(() => {\n    return new KeyboardEventManager()\n      .on(this._nextKey, () => this.next())\n      .on(this._previousKey, () => this.prev())\n      .on('End', () => this.listBehavior.last())\n      .on('Home', () => this.listBehavior.first())\n      .on('Enter', () => this.inputs.activeItem()?.open({first: true}))\n      .on('ArrowUp', () => this.inputs.activeItem()?.open({last: true}))\n      .on('ArrowDown', () => this.inputs.activeItem()?.open({first: true}))\n      .on(this.dynamicSpaceKey, () => this.inputs.activeItem()?.open({first: true}))\n      .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n  });\n\n  constructor(readonly inputs: MenuBarInputs<V>) {\n    this.listBehavior = new List<MenuItemPattern<V>, V>({...inputs, disabled: () => false});\n  }\n\n  /** Sets the default state for the menubar. */\n  setDefaultState() {\n    this.inputs.activeItem.set(this.inputs.items()[0]);\n  }\n\n  /** Handles keyboard events for the menu. */\n  onKeydown(event: KeyboardEvent) {\n    this.keydownManager().handle(event);\n  }\n\n  /** Handles click events for the menu bar. */\n  onClick(event: MouseEvent) {\n    const item = this.inputs.items().find(i => i.element()?.contains(event.target as Node));\n\n    if (!item) {\n      return;\n    }\n\n    this.goto(item);\n    item.expanded() ? item.close() : item.open();\n  }\n\n  /** Handles mouseover events for the menu bar. */\n  onMouseOver(event: MouseEvent) {\n    const item = this.inputs.items().find(i => i.element()?.contains(event.target as Node));\n\n    if (item) {\n      this.goto(item, {focusElement: this.isFocused()});\n    }\n  }\n\n  /** Handles focusin events for the menu bar. */\n  onFocusIn() {\n    this.isFocused.set(true);\n    this.hasBeenFocused.set(true);\n  }\n\n  /** Handles focusout events for the menu bar. */\n  onFocusOut(event: FocusEvent) {\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (!this.inputs.element()?.contains(relatedTarget)) {\n      this.isFocused.set(false);\n      this.close();\n    }\n  }\n\n  /** Goes to and optionally focuses the specified menu item. */\n  goto(item: MenuItemPattern<V>, opts?: {focusElement?: boolean}) {\n    const prevItem = this.inputs.activeItem();\n    this.listBehavior.goto(item, opts);\n\n    if (prevItem?.expanded()) {\n      prevItem?.close();\n      this.inputs.activeItem()?.open();\n    }\n\n    if (item === prevItem) {\n      if (item.expanded() && item.submenu()?.inputs.activeItem()) {\n        item.submenu()?.inputs.activeItem()?.close();\n        item.submenu()?.listBehavior.unfocus();\n      }\n    }\n  }\n\n  /** Focuses the next menu item. */\n  next() {\n    const prevItem = this.inputs.activeItem();\n    this.listBehavior.next();\n\n    if (prevItem?.expanded()) {\n      prevItem?.close();\n      this.inputs.activeItem()?.open({first: true});\n    }\n  }\n\n  /** Focuses the previous menu item. */\n  prev() {\n    const prevItem = this.inputs.activeItem();\n    this.listBehavior.prev();\n\n    if (prevItem?.expanded()) {\n      prevItem?.close();\n      this.inputs.activeItem()?.open({first: true});\n    }\n  }\n\n  /** Closes the menubar and refocuses the root menu bar item. */\n  close() {\n    this.inputs.activeItem()?.close({refocus: this.isFocused()});\n  }\n}\n\n/** The menu trigger ui pattern class. */\nexport class MenuTriggerPattern<V> {\n  /** Whether the menu is expanded. */\n  expanded = signal(false);\n\n  /** The role of the menu trigger. */\n  role = () => 'button';\n\n  /** Whether the menu trigger has a popup. */\n  hasPopup = () => true;\n\n  /** The menu associated with the trigger. */\n  menu: SignalLike<MenuPattern<V> | undefined>;\n\n  /** The tabindex of the menu trigger. */\n  tabindex = computed(() => (this.expanded() && this.menu()?.inputs.activeItem() ? -1 : 0));\n\n  /** Handles keyboard events for the menu trigger. */\n  keydownManager = computed(() => {\n    return new KeyboardEventManager()\n      .on(' ', () => this.open({first: true}))\n      .on('Enter', () => this.open({first: true}))\n      .on('ArrowDown', () => this.open({first: true}))\n      .on('ArrowUp', () => this.open({last: true}))\n      .on('Escape', () => this.close({refocus: true}));\n  });\n\n  constructor(readonly inputs: MenuTriggerInputs<V>) {\n    this.menu = this.inputs.menu;\n  }\n\n  /** Handles keyboard events for the menu trigger. */\n  onKeydown(event: KeyboardEvent) {\n    this.keydownManager().handle(event);\n  }\n\n  /** Handles click events for the menu trigger. */\n  onClick() {\n    this.expanded() ? this.close() : this.open({first: true});\n  }\n\n  /** Handles focusout events for the menu trigger. */\n  onFocusOut(event: FocusEvent) {\n    const element = this.inputs.element();\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (\n      this.expanded() &&\n      !element?.contains(relatedTarget) &&\n      !this.inputs.menu()?.inputs.element()?.contains(relatedTarget)\n    ) {\n      this.close();\n    }\n  }\n\n  /** Opens the menu. */\n  open(opts?: {first?: boolean; last?: boolean}) {\n    this.expanded.set(true);\n\n    if (opts?.first) {\n      this.inputs.menu()?.first();\n    } else if (opts?.last) {\n      this.inputs.menu()?.last();\n    }\n  }\n\n  /** Closes the menu. */\n  close(opts: {refocus?: boolean} = {}) {\n    this.expanded.set(false);\n    this.menu()?.listBehavior.unfocus();\n\n    if (opts.refocus) {\n      this.inputs.element()?.focus();\n    }\n\n    let menuitems = this.inputs.menu()?.inputs.items() ?? [];\n\n    while (menuitems.length) {\n      const menuitem = menuitems.pop();\n      menuitem?._expanded.set(false);\n      menuitem?.inputs.parent()?.listBehavior.unfocus();\n      menuitems = menuitems.concat(menuitem?.submenu()?.inputs.items() ?? []);\n    }\n  }\n}\n\n/** The menu item ui pattern class. */\nexport class MenuItemPattern<V> implements ListItem<V> {\n  /** The value of the menu item. */\n  value: SignalLike<V>;\n\n  /** The unique ID of the menu item. */\n  id: SignalLike<string>;\n\n  /** Whether the menu item is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The search term for the menu item. */\n  searchTerm: SignalLike<string>;\n\n  /** The element of the menu item. */\n  element: SignalLike<HTMLElement>;\n\n  /** Whether the menu item is active. */\n  isActive = computed(() => this.inputs.parent()?.inputs.activeItem() === this);\n\n  /** The tabindex of the menu item. */\n  tabindex = computed(() => {\n    if (this.submenu() && this.submenu()?.inputs.activeItem()) {\n      return -1;\n    }\n    return this.inputs.parent()?.listBehavior.getItemTabindex(this) ?? -1;\n  });\n\n  /** The position of the menu item in the menu. */\n  index = computed(() => this.inputs.parent()?.inputs.items().indexOf(this) ?? -1);\n\n  /** Whether the menu item is expanded. */\n  expanded = computed(() => (this.submenu() ? this._expanded() : null));\n\n  /** Whether the menu item is expanded. */\n  _expanded = signal(false);\n\n  /** The ID of the menu that the menu item controls. */\n  controls = signal<string | undefined>(undefined);\n\n  /** The role of the menu item. */\n  role = () => 'menuitem';\n\n  /** Whether the menu item has a popup. */\n  hasPopup = computed(() => !!this.submenu());\n\n  /** The submenu associated with the menu item. */\n  submenu: SignalLike<MenuPattern<V> | undefined>;\n\n  /** Whether the menu item is selectable. */\n  selectable: SignalLike<boolean>;\n\n  constructor(readonly inputs: MenuItemInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.submenu = this.inputs.submenu;\n    this.searchTerm = inputs.searchTerm;\n    this.selectable = computed(() => !this.submenu());\n  }\n\n  /** Opens the submenu. */\n  open(opts?: {first?: boolean; last?: boolean}) {\n    this._expanded.set(true);\n\n    if (opts?.first) {\n      this.submenu()?.first();\n    }\n    if (opts?.last) {\n      this.submenu()?.last();\n    }\n  }\n\n  /** Closes the submenu. */\n  close(opts: {refocus?: boolean} = {}) {\n    this._expanded.set(false);\n\n    if (opts.refocus) {\n      this.inputs.parent()?.listBehavior.goto(this);\n    }\n\n    let menuitems = this.inputs.submenu()?.inputs.items() ?? [];\n\n    while (menuitems.length) {\n      const menuitem = menuitems.pop();\n      menuitem?._expanded.set(false);\n      menuitem?.inputs.parent()?.listBehavior.unfocus();\n      menuitems = menuitems.concat(menuitem?.submenu()?.inputs.items() ?? []);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {List, ListInputs} from '../behaviors/list/list';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {RadioButtonPattern} from './radio-button';\n\n/** Represents the required inputs for a radio group. */\nexport type RadioGroupInputs<V> = Omit<\n  ListInputs<RadioButtonPattern<V>, V>,\n  'multi' | 'selectionMode' | 'wrap' | 'typeaheadDelay'\n> & {\n  /** Whether the radio group is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** Whether the radio group is readonly. */\n  readonly: SignalLike<boolean>;\n\n  /** A function that returns the radio button associated with a given element. */\n  getItem: (e: PointerEvent) => RadioButtonPattern<V> | undefined;\n};\n\n/** Controls the state of a radio group. */\nexport class RadioGroupPattern<V> {\n  /** The list behavior for the radio group. */\n  readonly listBehavior: List<RadioButtonPattern<V>, V>;\n\n  /** Whether the radio group is vertically or horizontally oriented. */\n  readonly orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether focus should wrap when navigating. */\n  readonly wrap = signal(false);\n\n  /** The selection strategy used by the radio group. */\n  readonly selectionMode = signal<'follow' | 'explicit'>('follow');\n\n  /** Whether the radio group is disabled. */\n  readonly disabled = computed(() => this.inputs.disabled() || this.listBehavior.disabled());\n\n  /** The currently selected radio button. */\n  readonly selectedItem = computed(() => this.listBehavior.selectionBehavior.selectedItems()[0]);\n\n  /** Whether the radio group is readonly. */\n  readonly readonly = computed(() => this.selectedItem()?.disabled() || this.inputs.readonly());\n\n  /** The tabindex of the radio group. */\n  readonly tabindex = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active radio button (if using activedescendant). */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The key used to navigate to the previous radio button. */\n  private readonly _prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next radio button. */\n  private readonly _nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the radio group. */\n  readonly keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    // Readonly mode allows navigation but not selection changes.\n    if (this.readonly()) {\n      return manager\n        .on(this._prevKey, () => this.listBehavior.prev())\n        .on(this._nextKey, () => this.listBehavior.next())\n        .on('Home', () => this.listBehavior.first())\n        .on('End', () => this.listBehavior.last());\n    }\n\n    // Default behavior: navigate and select on arrow keys, home, end.\n    // Space/Enter also select the focused item.\n    return manager\n      .on(this._prevKey, () => this.listBehavior.prev({selectOne: true}))\n      .on(this._nextKey, () => this.listBehavior.next({selectOne: true}))\n      .on('Home', () => this.listBehavior.first({selectOne: true}))\n      .on('End', () => this.listBehavior.last({selectOne: true}))\n      .on(' ', () => this.listBehavior.selectOne())\n      .on('Enter', () => this.listBehavior.selectOne());\n  });\n\n  /** The pointerdown event manager for the radio group. */\n  readonly pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.readonly()) {\n      // Navigate focus only in readonly mode.\n      return manager.on(e => this.listBehavior.goto(this.inputs.getItem(e)!));\n    }\n\n    // Default behavior: navigate and select on click.\n    return manager.on(e => this.listBehavior.goto(this.inputs.getItem(e)!, {selectOne: true}));\n  });\n\n  constructor(readonly inputs: RadioGroupInputs<V>) {\n    this.orientation = inputs.orientation;\n    this.listBehavior = new List({\n      ...inputs,\n      wrap: this.wrap,\n      selectionMode: this.selectionMode,\n      multi: () => false,\n      typeaheadDelay: () => 0, // Radio groups do not support typeahead.\n    });\n  }\n\n  /** Handles keydown events for the radio group. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerdown events for the radio group. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /**\n   * Sets the radio group to its default initial state.\n   *\n   * Sets the active index to the selected radio button if one exists and is focusable.\n   * Otherwise, sets the active index to the first focusable radio button.\n   */\n  setDefaultState() {\n    let firstItem: RadioButtonPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.listBehavior.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n        if (item.selected()) {\n          this.inputs.activeItem.set(item);\n          return;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeItem.set(firstItem);\n    }\n  }\n\n  /** Validates the state of the radio group and returns a list of accessibility violations. */\n  validate(): string[] {\n    const violations: string[] = [];\n\n    if (this.selectedItem()?.disabled() && this.inputs.skipDisabled()) {\n      violations.push(\n        \"Accessibility Violation: The selected radio button is disabled while 'skipDisabled' is true, making the selection unreachable via keyboard.\",\n      );\n    }\n\n    return violations;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\nimport type {RadioGroupPattern} from './radio-group';\n\n/** Represents the required inputs for a radio button in a radio group. */\nexport interface RadioButtonInputs<V>\n  extends Omit<ListItem<V>, 'searchTerm' | 'index' | 'selectable'> {\n  /** A reference to the parent radio group. */\n  group: SignalLike<RadioGroupPattern<V> | undefined>;\n}\n\n/** Represents a radio button within a radio group. */\nexport class RadioButtonPattern<V> {\n  /** A unique identifier for the radio button. */\n  readonly id: SignalLike<string>;\n\n  /** The value associated with the radio button. */\n  readonly value: SignalLike<V>;\n\n  /** The position of the radio button within the group. */\n  readonly index: SignalLike<number> = computed(\n    () => this.group()?.listBehavior.inputs.items().indexOf(this) ?? -1,\n  );\n\n  /** Whether the radio button is currently the active one (focused). */\n  readonly active = computed(() => this.group()?.listBehavior.inputs.activeItem() === this);\n\n  /** Whether the radio button is selected. */\n  readonly selected: SignalLike<boolean> = computed(\n    () => !!this.group()?.listBehavior.inputs.value().includes(this.value()),\n  );\n\n  /** Whether the radio button is selectable. */\n  readonly selectable = () => true;\n\n  /** Whether the radio button is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** A reference to the parent radio group. */\n  readonly group: SignalLike<RadioGroupPattern<V> | undefined>;\n\n  /** The tabindex of the radio button. */\n  readonly tabindex = computed(() => this.group()?.listBehavior.getItemTabindex(this));\n\n  /** The HTML element associated with the radio button. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** The search term for typeahead. */\n  readonly searchTerm = () => ''; // Radio groups do not support typeahead.\n\n  constructor(readonly inputs: RadioButtonInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.group = inputs.group;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {RadioGroupInputs, RadioGroupPattern} from './radio-group';\nimport type {ToolbarPattern} from '../toolbar/toolbar';\nimport type {ToolbarWidgetGroupControls} from '../toolbar/toolbar-widget-group';\n\n/** Represents the required inputs for a toolbar controlled radio group. */\nexport type ToolbarRadioGroupInputs<V> = RadioGroupInputs<V> & {\n  /** The toolbar controlling the radio group. */\n  toolbar: SignalLike<ToolbarPattern<V> | undefined>;\n};\n\n/** Controls the state of a radio group in a toolbar. */\nexport class ToolbarRadioGroupPattern<V>\n  extends RadioGroupPattern<V>\n  implements ToolbarWidgetGroupControls\n{\n  constructor(override readonly inputs: ToolbarRadioGroupInputs<V>) {\n    if (!!inputs.toolbar()) {\n      inputs.orientation = inputs.toolbar()!.orientation;\n      inputs.skipDisabled = inputs.toolbar()!.skipDisabled;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The toolbar handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The toolbar handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Whether the radio group is currently on the first item. */\n  isOnFirstItem() {\n    return this.listBehavior.navigationBehavior.peekPrev() === undefined;\n  }\n\n  /** Whether the radio group is currently on the last item. */\n  isOnLastItem() {\n    return this.listBehavior.navigationBehavior.peekNext() === undefined;\n  }\n\n  /** Navigates to the next radio button in the group. */\n  next(wrap: boolean) {\n    this.wrap.set(wrap);\n    this.listBehavior.next();\n    this.wrap.set(false);\n  }\n\n  /** Navigates to the previous radio button in the group. */\n  prev(wrap: boolean) {\n    this.wrap.set(wrap);\n    this.listBehavior.prev();\n    this.wrap.set(false);\n  }\n\n  /** Navigates to the first radio button in the group. */\n  first() {\n    this.listBehavior.first();\n  }\n\n  /** Navigates to the last radio button in the group. */\n  last() {\n    this.listBehavior.last();\n  }\n\n  /** Removes focus from the radio group. */\n  unfocus() {\n    this.inputs.activeItem.set(undefined);\n  }\n\n  /** Triggers the action of the currently active radio button in the group. */\n  trigger() {\n    if (this.readonly()) return;\n    this.listBehavior.selectOne();\n  }\n\n  /** Navigates to the radio button targeted by a pointer event. */\n  goto(e: PointerEvent) {\n    this.listBehavior.goto(this.inputs.getItem(e)!, {\n      selectOne: !this.readonly(),\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport type SignalLike<T> = () => T;\n\nexport interface WritableSignalLike<T> extends SignalLike<T> {\n  set(value: T): void;\n  update(updateFn: (value: T) => T): void;\n}\n\n/** Converts a getter setter style signal to a WritableSignalLike. */\nexport function convertGetterSetterToWritableSignalLike<T>(\n  getter: () => T,\n  setter: (v: T) => void,\n): WritableSignalLike<T> {\n  // tslint:disable-next-line:ban Have to use `Object.assign` to preserve the getter function.\n  return Object.assign(getter, {\n    set: setter,\n    update: (updateCallback: (v: T) => T) => setter(updateCallback(getter())),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {computed} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\n\n/** Represents an item that can be expanded or collapsed. */\nexport interface ExpansionItem {\n  /** Whether the item is expandable. */\n  expandable: SignalLike<boolean>;\n\n  /** Used to uniquely identify an expansion item. */\n  expansionId: SignalLike<string>;\n\n  /** Whether the expansion is disabled. */\n  disabled: SignalLike<boolean>;\n}\n\nexport interface ExpansionControl extends ExpansionItem {}\n/**\n * Controls a single item's expansion state and interactions,\n * delegating actual state changes to an Expansion manager.\n */\nexport class ExpansionControl {\n  /** Whether this specific item is currently expanded. Derived from the Expansion manager. */\n  readonly isExpanded = computed(() => this.inputs.expansionManager.isExpanded(this));\n\n  /** Whether this item can be expanded. */\n  readonly isExpandable = computed(() => this.inputs.expansionManager.isExpandable(this));\n\n  constructor(readonly inputs: ExpansionItem & {expansionManager: ListExpansion}) {\n    this.expansionId = inputs.expansionId;\n    this.expandable = inputs.expandable;\n    this.disabled = inputs.disabled;\n  }\n\n  /** Requests the Expansion manager to open this item. */\n  open() {\n    this.inputs.expansionManager.open(this);\n  }\n\n  /** Requests the Expansion manager to close this item. */\n  close() {\n    this.inputs.expansionManager.close(this);\n  }\n\n  /** Requests the Expansion manager to toggle this item. */\n  toggle() {\n    this.inputs.expansionManager.toggle(this);\n  }\n}\n\n/** Represents the required inputs for an expansion behavior. */\nexport interface ListExpansionInputs {\n  /** Whether multiple items can be expanded at once. */\n  multiExpandable: SignalLike<boolean>;\n\n  /** An array of ids of the currently expanded items. */\n  expandedIds: WritableSignalLike<string[]>;\n\n  /** An array of expansion items. */\n  items: SignalLike<ExpansionItem[]>;\n\n  /** Whether all expansions are disabled. */\n  disabled: SignalLike<boolean>;\n}\n\n/** Manages the expansion state of a list of items. */\nexport class ListExpansion {\n  /** A signal holding an array of ids of the currently expanded items. */\n  expandedIds: WritableSignalLike<string[]>;\n\n  constructor(readonly inputs: ListExpansionInputs) {\n    this.expandedIds = inputs.expandedIds;\n  }\n\n  /** Opens the specified item. */\n  open(item: ExpansionItem) {\n    if (!this.isExpandable(item)) return;\n    if (this.isExpanded(item)) return;\n    if (!this.inputs.multiExpandable()) {\n      this.closeAll();\n    }\n    this.expandedIds.update(ids => ids.concat(item.expansionId()));\n  }\n\n  /** Closes the specified item. */\n  close(item: ExpansionItem) {\n    if (this.isExpandable(item)) {\n      this.expandedIds.update(ids => ids.filter(id => id !== item.expansionId()));\n    }\n  }\n\n  /** Toggles the expansion state of the specified item. */\n  toggle(item: ExpansionItem) {\n    this.expandedIds().includes(item.expansionId()) ? this.close(item) : this.open(item);\n  }\n\n  /** Opens all focusable items in the list. */\n  openAll() {\n    if (this.inputs.multiExpandable()) {\n      for (const item of this.inputs.items()) {\n        this.open(item);\n      }\n    }\n  }\n\n  /** Closes all focusable items in the list. */\n  closeAll() {\n    for (const item of this.inputs.items()) {\n      this.close(item);\n    }\n  }\n\n  /** Checks whether the specified item is expandable / collapsible. */\n  isExpandable(item: ExpansionItem) {\n    return !this.inputs.disabled() && !item.disabled() && item.expandable();\n  }\n\n  /** Checks whether the specified item is currently expanded. */\n  isExpanded(item: ExpansionItem): boolean {\n    return this.expandedIds().includes(item.expansionId());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../signal-like/signal-like';\n\n/** Represents the required inputs for the label control. */\nexport interface LabelControlInputs {\n  /** The default `aria-labelledby` ids. */\n  defaultLabelledBy: SignalLike<string[]>;\n}\n\n/** Represents the optional inputs for the label control. */\nexport interface LabelControlOptionalInputs {\n  /** The `aria-label`. */\n  label?: SignalLike<string | undefined>;\n\n  /** The user-provided `aria-labelledby` ids. */\n  labelledBy?: SignalLike<string[]>;\n}\n\n/** Controls label and description of an element. */\nexport class LabelControl {\n  /** The `aria-label`. */\n  readonly label = computed(() => this.inputs.label?.());\n\n  /** The `aria-labelledby` ids. */\n  readonly labelledBy = computed(() => {\n    const label = this.label();\n    const labelledBy = this.inputs.labelledBy?.();\n    const defaultLabelledBy = this.inputs.defaultLabelledBy();\n\n    if (labelledBy && labelledBy.length > 0) {\n      return labelledBy;\n    }\n\n    // If an aria-label is provided by developers, do not set aria-labelledby with the\n    // defaultLabelledBy value because if both attributes are set, aria-labelledby will be used.\n    if (label) {\n      return [];\n    }\n\n    return defaultLabelledBy;\n  });\n\n  constructor(readonly inputs: LabelControlInputs & LabelControlOptionalInputs) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {\n  ExpansionItem,\n  ExpansionControl,\n  ListExpansionInputs,\n  ListExpansion,\n} from '../behaviors/expansion/expansion';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {LabelControl, LabelControlOptionalInputs} from '../behaviors/label/label';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\n\n/** The required inputs to tabs. */\nexport interface TabInputs\n  extends Omit<ListItem<string>, 'searchTerm' | 'index' | 'selectable'>,\n    Omit<ExpansionItem, 'expansionId' | 'expandable'> {\n  /** The parent tablist that controls the tab. */\n  tablist: SignalLike<TabListPattern>;\n\n  /** The remote tabpanel controlled by the tab. */\n  tabpanel: SignalLike<TabPanelPattern | undefined>;\n}\n\n/** A tab in a tablist. */\nexport class TabPattern {\n  /** Controls expansion for this tab. */\n  readonly expansion: ExpansionControl;\n\n  /** A global unique identifier for the tab. */\n  readonly id: SignalLike<string>;\n\n  /** The index of the tab. */\n  readonly index = computed(() => this.inputs.tablist().inputs.items().indexOf(this));\n\n  /** A local unique identifier for the tab. */\n  readonly value: SignalLike<string>;\n\n  /** Whether the tab is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** The html element that should receive focus. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the tab is selectable. */\n  readonly selectable = () => true;\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm = () => ''; // Unused because tabs do not support typeahead.\n\n  /** Whether this tab has expandable content. */\n  readonly expandable = computed(() => this.expansion.expandable());\n\n  /** The unique identifier used by the expansion behavior. */\n  readonly expansionId = computed(() => this.expansion.expansionId());\n\n  /** Whether the tab is expanded. */\n  readonly expanded = computed(() => this.expansion.isExpanded());\n\n  /** Whether the tab is active. */\n  readonly active = computed(() => this.inputs.tablist().inputs.activeItem() === this);\n\n  /** Whether the tab is selected. */\n  readonly selected = computed(() => !!this.inputs.tablist().inputs.value().includes(this.value()));\n\n  /** The tabindex of the tab. */\n  readonly tabindex = computed(() => this.inputs.tablist().listBehavior.getItemTabindex(this));\n\n  /** The id of the tabpanel associated with the tab. */\n  readonly controls = computed(() => this.inputs.tabpanel()?.id());\n\n  constructor(readonly inputs: TabInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.disabled = inputs.disabled;\n    this.element = inputs.element;\n    this.expansion = new ExpansionControl({\n      ...inputs,\n      expansionId: inputs.value,\n      expandable: () => true,\n      expansionManager: inputs.tablist().expansionManager,\n    });\n  }\n}\n\n/** The required inputs for the tabpanel. */\nexport interface TabPanelInputs extends LabelControlOptionalInputs {\n  id: SignalLike<string>;\n  tab: SignalLike<TabPattern | undefined>;\n  value: SignalLike<string>;\n}\n\n/** A tabpanel associated with a tab. */\nexport class TabPanelPattern {\n  /** A global unique identifier for the tabpanel. */\n  readonly id: SignalLike<string>;\n\n  /** A local unique identifier for the tabpanel. */\n  readonly value: SignalLike<string>;\n\n  /** Controls label for this tabpanel. */\n  readonly labelManager: LabelControl;\n\n  /** Whether the tabpanel is hidden. */\n  readonly hidden = computed(() => this.inputs.tab()?.expanded() === false);\n\n  /** The tabindex of this tabpanel. */\n  readonly tabindex = computed(() => (this.hidden() ? -1 : 0));\n\n  /** The aria-labelledby value for this tabpanel. */\n  readonly labelledBy = computed(() =>\n    this.labelManager.labelledBy().length > 0\n      ? this.labelManager.labelledBy().join(' ')\n      : undefined,\n  );\n\n  constructor(readonly inputs: TabPanelInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.labelManager = new LabelControl({\n      ...inputs,\n      defaultLabelledBy: computed(() => (this.inputs.tab() ? [this.inputs.tab()!.id()] : [])),\n    });\n  }\n}\n\n/** The required inputs for the tablist. */\nexport type TabListInputs = Omit<ListInputs<TabPattern, string>, 'multi' | 'typeaheadDelay'> &\n  Omit<ListExpansionInputs, 'multiExpandable' | 'expandedIds' | 'items'>;\n\n/** Controls the state of a tablist. */\nexport class TabListPattern {\n  /** The list behavior for the tablist. */\n  readonly listBehavior: List<TabPattern, string>;\n\n  /** Controls expansion for the tablist. */\n  readonly expansionManager: ListExpansion;\n\n  /** Whether the tablist is vertically or horizontally oriented. */\n  readonly orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether the tablist is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** The tabindex of the tablist. */\n  readonly tabindex = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active tab. */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** Whether selection should follow focus. */\n  readonly followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** The key used to navigate to the previous tab in the tablist. */\n  readonly prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next item in the list. */\n  readonly nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the tablist. */\n  readonly keydown = computed(() => {\n    return new KeyboardEventManager()\n      .on(this.prevKey, () => this.listBehavior.prev({select: this.followFocus()}))\n      .on(this.nextKey, () => this.listBehavior.next({select: this.followFocus()}))\n      .on('Home', () => this.listBehavior.first({select: this.followFocus()}))\n      .on('End', () => this.listBehavior.last({select: this.followFocus()}))\n      .on(' ', () => this.listBehavior.select())\n      .on('Enter', () => this.listBehavior.select());\n  });\n\n  /** The pointerdown event manager for the tablist. */\n  readonly pointerdown = computed(() => {\n    return new PointerEventManager().on(e =>\n      this.listBehavior.goto(this._getItem(e)!, {select: true}),\n    );\n  });\n\n  constructor(readonly inputs: TabListInputs) {\n    this.disabled = inputs.disabled;\n    this.orientation = inputs.orientation;\n\n    this.listBehavior = new List({\n      ...inputs,\n      multi: () => false,\n      typeaheadDelay: () => 0, // Tabs do not support typeahead.\n    });\n\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n      multiExpandable: () => false,\n      expandedIds: this.inputs.value,\n    });\n  }\n\n  /**\n   * Sets the tablist to its default initial state.\n   *\n   * Sets the active index of the tablist to the first focusable selected\n   * tab if one exists. Otherwise, sets focus to the first focusable tab.\n   *\n   * This method should be called once the tablist and its tabs are properly initialized.\n   */\n  setDefaultState() {\n    let firstItem: TabPattern | undefined;\n\n    for (const item of this.inputs.items()) {\n      if (!this.listBehavior.isFocusable(item)) continue;\n\n      if (firstItem === undefined) {\n        firstItem = item;\n      }\n\n      if (item.selected()) {\n        this.inputs.activeItem.set(item);\n        return;\n      }\n    }\n    if (firstItem !== undefined) {\n      this.inputs.activeItem.set(firstItem);\n    }\n  }\n\n  /** Handles keydown events for the tablist. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** The pointerdown event manager for the tablist. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Returns the tab item associated with the given pointer event. */\n  private _getItem(e: PointerEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"tab\"]');\n    return this.inputs.items().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\nimport type {ToolbarPattern} from './toolbar';\n\n/** Represents the required inputs for a toolbar widget in a toolbar. */\nexport interface ToolbarWidgetInputs<V>\n  extends Omit<ListItem<V>, 'searchTerm' | 'value' | 'index' | 'selectable'> {\n  /** A reference to the parent toolbar. */\n  toolbar: SignalLike<ToolbarPattern<V>>;\n}\n\nexport class ToolbarWidgetPattern<V> implements ListItem<V> {\n  /** A unique identifier for the widget. */\n  readonly id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the widget is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** A reference to the parent toolbar. */\n  readonly toolbar: SignalLike<ToolbarPattern<V>>;\n\n  /** The tabindex of the widgdet. */\n  readonly tabindex = computed(() => this.toolbar().listBehavior.getItemTabindex(this));\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm = () => ''; // Unused because toolbar does not support typeahead.\n\n  /** The value associated with the widget. */\n  readonly value = () => '' as V; // Unused because toolbar does not support selection.\n\n  /** Whether the widget is selectable. */\n  readonly selectable = () => true; // Unused because toolbar does not support selection.\n\n  /** The position of the widget within the toolbar. */\n  readonly index = computed(() => this.toolbar().inputs.items().indexOf(this) ?? -1);\n\n  /** Whether the widget is currently the active one (focused). */\n  readonly active = computed(() => this.toolbar().inputs.activeItem() === this);\n\n  constructor(readonly inputs: ToolbarWidgetInputs<V>) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.toolbar = inputs.toolbar;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\nimport type {ToolbarPattern} from './toolbar';\n\n/** An interface that allows sub patterns to expose the necessary controls for the toolbar. */\nexport interface ToolbarWidgetGroupControls {\n  /** Whether the widget group is currently on the first item. */\n  isOnFirstItem(): boolean;\n\n  /** Whether the widget group is currently on the last item. */\n  isOnLastItem(): boolean;\n\n  /** Navigates to the next widget in the group. */\n  next(wrap: boolean): void;\n\n  /** Navigates to the previous widget in the group. */\n  prev(wrap: boolean): void;\n\n  /** Navigates to the first widget in the group. */\n  first(): void;\n\n  /** Navigates to the last widget in the group. */\n  last(): void;\n\n  /** Removes focus from the widget group. */\n  unfocus(): void;\n\n  /** Triggers the action of the currently active widget in the group. */\n  trigger(): void;\n\n  /** Navigates to the widget targeted by a pointer event. */\n  goto(event: PointerEvent): void;\n\n  /** Sets the widget group to its default initial state. */\n  setDefaultState(): void;\n}\n\n/** Represents the required inputs for a toolbar widget group. */\nexport interface ToolbarWidgetGroupInputs<V>\n  extends Omit<ListItem<V>, 'searchTerm' | 'value' | 'index' | 'selectable'> {\n  /** A reference to the parent toolbar. */\n  toolbar: SignalLike<ToolbarPattern<V> | undefined>;\n\n  /** The controls for the sub patterns associated with the toolbar. */\n  controls: SignalLike<ToolbarWidgetGroupControls | undefined>;\n}\n\n/** A group of widgets within a toolbar that provides nested navigation. */\nexport class ToolbarWidgetGroupPattern<V> implements ListItem<V> {\n  /** A unique identifier for the widget. */\n  readonly id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the widget is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** A reference to the parent toolbar. */\n  readonly toolbar: SignalLike<ToolbarPattern<V> | undefined>;\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm = () => ''; // Unused because toolbar does not support typeahead.\n\n  /** The value associated with the widget. */\n  readonly value = () => '' as V; // Unused because toolbar does not support selection.\n\n  /** Whether the widget is selectable. */\n  readonly selectable = () => true; // Unused because toolbar does not support selection.\n\n  /** The position of the widget within the toolbar. */\n  readonly index = computed(() => this.toolbar()?.inputs.items().indexOf(this) ?? -1);\n\n  /** The actions that can be performed on the widget group. */\n  readonly controls: SignalLike<ToolbarWidgetGroupControls> = computed(\n    () => this.inputs.controls() ?? this._defaultControls,\n  );\n\n  /** Default toolbar widget group controls when no controls provided. */\n  private readonly _defaultControls: ToolbarWidgetGroupControls = {\n    isOnFirstItem: () => true,\n    isOnLastItem: () => true,\n    next: () => {},\n    prev: () => {},\n    first: () => {},\n    last: () => {},\n    unfocus: () => {},\n    trigger: () => {},\n    goto: () => {},\n    setDefaultState: () => {},\n  };\n\n  constructor(readonly inputs: ToolbarWidgetGroupInputs<V>) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.toolbar = inputs.toolbar;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {List, ListInputs} from '../behaviors/list/list';\nimport {ToolbarWidgetPattern} from './toolbar-widget';\nimport {ToolbarWidgetGroupPattern} from './toolbar-widget-group';\n\n/** Represents the required inputs for a toolbar. */\nexport type ToolbarInputs<V> = Omit<\n  ListInputs<ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V>, V>,\n  'multi' | 'typeaheadDelay' | 'value' | 'selectionMode' | 'focusMode'\n> & {\n  /** A function that returns the toolbar item associated with a given element. */\n  getItem: (e: Element) => ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V> | undefined;\n};\n\n/** Controls the state of a toolbar. */\nexport class ToolbarPattern<V> {\n  /** The list behavior for the toolbar. */\n  readonly listBehavior: List<ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V>, V>;\n\n  /** Whether the tablist is vertically or horizontally oriented. */\n  readonly orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether disabled items in the group should be skipped when navigating. */\n  readonly skipDisabled: SignalLike<boolean>;\n\n  /** Whether the toolbar is disabled. */\n  readonly disabled = computed(() => this.listBehavior.disabled());\n\n  /** The tabindex of the toolbar (if using activedescendant). */\n  readonly tabindex = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active widget (if using activedescendant). */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The key used to navigate to the previous widget. */\n  private readonly _prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next widget. */\n  private readonly _nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The alternate key used to navigate to the previous widget. */\n  private readonly _altPrevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n    }\n    return 'ArrowUp';\n  });\n\n  /** The alternate key used to navigate to the next widget. */\n  private readonly _altNextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n    }\n    return 'ArrowDown';\n  });\n\n  /** The keydown event manager for the toolbar. */\n  private readonly _keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    return manager\n      .on(this._nextKey, () => this._next())\n      .on(this._prevKey, () => this._prev())\n      .on(this._altNextKey, () => this._groupNext())\n      .on(this._altPrevKey, () => this._groupPrev())\n      .on(' ', () => this._trigger())\n      .on('Enter', () => this._trigger())\n      .on('Home', () => this._first())\n      .on('End', () => this._last());\n  });\n\n  /** The pointerdown event manager for the toolbar. */\n  private readonly _pointerdown = computed(() => new PointerEventManager().on(e => this._goto(e)));\n\n  /** Navigates to the next widget in the toolbar. */\n  private _next() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      if (!item.disabled() && !item.controls().isOnLastItem()) {\n        item.controls().next(false);\n        return;\n      }\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.next();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().first();\n    }\n  }\n\n  /** Navigates to the previous widget in the toolbar. */\n  private _prev() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      if (!item.disabled() && !item.controls().isOnFirstItem()) {\n        item.controls().prev(false);\n        return;\n      }\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.prev();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().last();\n    }\n  }\n\n  private _groupNext() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetPattern) return;\n    item?.controls().next(true);\n  }\n\n  private _groupPrev() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetPattern) return;\n    item?.controls().prev(true);\n  }\n\n  /** Triggers the action of the currently active widget. */\n  private _trigger() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().trigger();\n    }\n  }\n\n  /** Navigates to the first widget in the toolbar. */\n  private _first() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.first();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().first();\n    }\n  }\n\n  /** Navigates to the last widget in the toolbar. */\n  private _last() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.last();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().last();\n    }\n  }\n\n  /** Navigates to the widget targeted by a pointer event. */\n  private _goto(e: PointerEvent) {\n    const item = this.inputs.getItem(e.target as Element);\n    if (!item) return;\n\n    this.listBehavior.goto(item);\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().goto(e);\n    }\n  }\n\n  constructor(readonly inputs: ToolbarInputs<V>) {\n    this.orientation = inputs.orientation;\n    this.skipDisabled = inputs.skipDisabled;\n\n    this.listBehavior = new List({\n      ...inputs,\n      multi: () => false,\n      focusMode: () => 'roving',\n      selectionMode: () => 'explicit',\n      value: signal([] as V[]),\n      typeaheadDelay: () => 0, // Toolbar widgets do not support typeahead.\n    });\n  }\n\n  /** Handles keydown events for the toolbar. */\n  onKeydown(event: KeyboardEvent) {\n    if (this.disabled()) return;\n    this._keydown().handle(event);\n  }\n\n  /** Handles pointerdown events for the toolbar. */\n  onPointerdown(event: PointerEvent) {\n    if (this.disabled()) return;\n    this._pointerdown().handle(event);\n  }\n\n  /**\n   * Sets the toolbar to its default initial state.\n   *\n   * Sets the active index to the selected widget if one exists and is focusable.\n   * Otherwise, sets the active index to the first focusable widget.\n   */\n  setDefaultState() {\n    let firstItem: ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.listBehavior.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeItem.set(firstItem);\n    }\n    if (firstItem instanceof ToolbarWidgetGroupPattern) {\n      firstItem.controls().setDefaultState();\n    }\n  }\n\n  /** Validates the state of the toolbar and returns a list of accessibility violations. */\n  validate(): string[] {\n    const violations: string[] = [];\n\n    return violations;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {\n  ExpansionItem,\n  ExpansionControl,\n  ListExpansion,\n  ListExpansionInputs,\n} from '../behaviors/expansion/expansion';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../behaviors/list-focus/list-focus';\nimport {\n  ListNavigation,\n  ListNavigationInputs,\n  ListNavigationItem,\n} from '../behaviors/list-navigation/list-navigation';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\n\n/** Inputs of the AccordionGroupPattern. */\nexport type AccordionGroupInputs = Omit<\n  ListNavigationInputs<AccordionTriggerPattern> &\n    ListFocusInputs<AccordionTriggerPattern> &\n    Omit<ListExpansionInputs, 'items'>,\n  'focusMode'\n>;\n\nconst focusMode = () => 'roving' as const;\n\nexport interface AccordionGroupPattern extends AccordionGroupInputs {}\n/** A pattern controls the nested Accordions. */\nexport class AccordionGroupPattern {\n  /** Controls navigation for the group. */\n  navigation: ListNavigation<AccordionTriggerPattern>;\n\n  /** Controls focus for the group. */\n  focusManager: ListFocus<AccordionTriggerPattern>;\n\n  /** Controls expansion for the group. */\n  expansionManager: ListExpansion;\n\n  constructor(readonly inputs: AccordionGroupInputs) {\n    this.wrap = inputs.wrap;\n    this.orientation = inputs.orientation;\n    this.textDirection = inputs.textDirection;\n    this.activeItem = inputs.activeItem;\n    this.disabled = inputs.disabled;\n    this.multiExpandable = inputs.multiExpandable;\n    this.items = inputs.items;\n    this.expandedIds = inputs.expandedIds;\n    this.skipDisabled = inputs.skipDisabled;\n    this.focusManager = new ListFocus({\n      ...inputs,\n      focusMode,\n    });\n    this.navigation = new ListNavigation({\n      ...inputs,\n      focusMode,\n      focusManager: this.focusManager,\n    });\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n    });\n  }\n}\n\n/** Inputs for the AccordionTriggerPattern. */\nexport type AccordionTriggerInputs = Omit<ListNavigationItem & ListFocusItem, 'index'> &\n  Omit<ExpansionItem, 'expansionId' | 'expandable'> & {\n    /** A local unique identifier for the trigger. */\n    value: SignalLike<string>;\n\n    /** The parent accordion group that controls this trigger. */\n    accordionGroup: SignalLike<AccordionGroupPattern>;\n\n    /** The accordion panel controlled by this trigger. */\n    accordionPanel: SignalLike<AccordionPanelPattern | undefined>;\n  };\n\nexport interface AccordionTriggerPattern extends AccordionTriggerInputs {}\n/** A pattern controls the expansion state of an accordion. */\nexport class AccordionTriggerPattern {\n  /** Whether this tab has expandable content. */\n  expandable: SignalLike<boolean>;\n\n  /** The unique identifier used by the expansion behavior. */\n  expansionId: SignalLike<string>;\n\n  /** Whether an accordion is expanded. */\n  expanded: SignalLike<boolean>;\n\n  /** Controls the expansion state for the trigger. */\n  expansionControl: ExpansionControl;\n\n  /** Whether the trigger is active. */\n  active = computed(() => this.inputs.accordionGroup().activeItem() === this);\n\n  /** Id of the accordion panel controlled by the trigger. */\n  controls = computed(() => this.inputs.accordionPanel()?.id());\n\n  /** The tabindex of the trigger. */\n  tabindex = computed(() => (this.inputs.accordionGroup().focusManager.isFocusable(this) ? 0 : -1));\n\n  /** Whether the trigger is disabled. Disabling an accordion group disables all the triggers. */\n  disabled = computed(() => this.inputs.disabled() || this.inputs.accordionGroup().disabled());\n\n  /** The index of the trigger within its accordion group. */\n  index = computed(() => this.inputs.accordionGroup().items().indexOf(this));\n\n  constructor(readonly inputs: AccordionTriggerInputs) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.value = inputs.value;\n    this.expansionControl = new ExpansionControl({\n      ...inputs,\n      expansionId: inputs.value,\n      expandable: () => true,\n      expansionManager: inputs.accordionGroup().expansionManager,\n    });\n    this.expandable = this.expansionControl.isExpandable;\n    this.expansionId = this.expansionControl.expansionId;\n    this.expanded = this.expansionControl.isExpanded;\n  }\n\n  /** The key used to navigate to the previous accordion trigger. */\n  prevKey = computed(() => {\n    if (this.inputs.accordionGroup().orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.accordionGroup().textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next accordion trigger. */\n  nextKey = computed(() => {\n    if (this.inputs.accordionGroup().orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.accordionGroup().textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the accordion trigger. */\n  keydown = computed(() => {\n    return new KeyboardEventManager()\n      .on(this.prevKey, () => this.inputs.accordionGroup().navigation.prev())\n      .on(this.nextKey, () => this.inputs.accordionGroup().navigation.next())\n      .on('Home', () => this.inputs.accordionGroup().navigation.first())\n      .on('End', () => this.inputs.accordionGroup().navigation.last())\n      .on(' ', () => this.expansionControl.toggle())\n      .on('Enter', () => this.expansionControl.toggle());\n  });\n\n  /** The pointerdown event manager for the accordion trigger. */\n  pointerdown = computed(() => {\n    return new PointerEventManager().on(e => {\n      const item = this._getItem(e);\n\n      if (item) {\n        this.inputs.accordionGroup().navigation.goto(item);\n        this.expansionControl.toggle();\n      }\n    });\n  });\n\n  /** Handles keydown events on the trigger, delegating to the group if not disabled. */\n  onKeydown(event: KeyboardEvent): void {\n    this.keydown().handle(event);\n  }\n\n  /** Handles pointerdown events on the trigger, delegating to the group if not disabled. */\n  onPointerdown(event: PointerEvent): void {\n    this.pointerdown().handle(event);\n  }\n\n  /** Handles focus events on the trigger. This ensures the tabbing changes the active index. */\n  onFocus(event: FocusEvent): void {\n    const item = this._getItem(event);\n\n    if (item && this.inputs.accordionGroup().focusManager.isFocusable(item)) {\n      this.inputs.accordionGroup().focusManager.focus(item);\n    }\n  }\n\n  private _getItem(e: Event) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"button\"]');\n    return this.inputs\n      .accordionGroup()\n      .items()\n      .find(i => i.element() === element);\n  }\n}\n\n/** Represents the required inputs for the AccordionPanelPattern. */\nexport interface AccordionPanelInputs {\n  /** A global unique identifier for the panel. */\n  id: SignalLike<string>;\n\n  /** A local unique identifier for the panel, matching its trigger's value. */\n  value: SignalLike<string>;\n\n  /** The parent accordion trigger that controls this panel. */\n  accordionTrigger: SignalLike<AccordionTriggerPattern | undefined>;\n}\n\nexport interface AccordionPanelPattern extends AccordionPanelInputs {}\n/** Represents an accordion panel. */\nexport class AccordionPanelPattern {\n  /** Whether the accordion panel is hidden. True if the associated trigger is not expanded. */\n  hidden: SignalLike<boolean>;\n\n  constructor(readonly inputs: AccordionPanelInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.accordionTrigger = inputs.accordionTrigger;\n    this.hidden = computed(() => inputs.accordionTrigger()?.expanded() === false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\nimport {ExpansionItem, ExpansionControl, ListExpansion} from '../behaviors/expansion/expansion';\nimport {KeyboardEventManager, PointerEventManager, Modifier} from '../behaviors/event-manager';\n\n/** Represents the required inputs for a tree item. */\nexport interface TreeItemInputs<V> extends Omit<ListItem<V>, 'index'> {\n  /** The parent item. */\n  parent: SignalLike<TreeItemPattern<V> | TreePattern<V>>;\n\n  /** Whether this item has children. Children can be lazily loaded. */\n  hasChildren: SignalLike<boolean>;\n\n  /** The children items. */\n  children: SignalLike<TreeItemPattern<V>[]>;\n\n  /** The tree pattern this item belongs to. */\n  tree: SignalLike<TreePattern<V>>;\n}\n\n/**\n * Represents an item in a Tree.\n */\nexport class TreeItemPattern<V> implements ListItem<V>, ExpansionItem {\n  /** A unique identifier for this item. */\n  readonly id: SignalLike<string>;\n\n  /** The value of this item. */\n  readonly value: SignalLike<V>;\n\n  /** A reference to the item element. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the item is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm: SignalLike<string>;\n\n  /** The tree pattern this item belongs to. */\n  readonly tree: SignalLike<TreePattern<V>>;\n\n  /** The parent item. */\n  readonly parent: SignalLike<TreeItemPattern<V> | TreePattern<V>>;\n\n  /** The children items. */\n  readonly children: SignalLike<TreeItemPattern<V>[]>;\n\n  /** The position of this item among its siblings. */\n  readonly index = computed(() => this.tree().visibleItems().indexOf(this));\n\n  /** The unique identifier used by the expansion behavior. */\n  readonly expansionId: SignalLike<string>;\n\n  /** Controls expansion for child items. */\n  readonly expansionManager: ListExpansion;\n\n  /** Controls expansion for this item. */\n  readonly expansion: ExpansionControl;\n\n  /** Whether the item is expandable. It's expandable if children item exist. */\n  readonly expandable: SignalLike<boolean>;\n\n  /** Whether the item is selectable. */\n  readonly selectable: SignalLike<boolean>;\n\n  /** The level of the current item in a tree. */\n  readonly level: SignalLike<number> = computed(() => this.parent().level() + 1);\n\n  /** Whether this item is currently expanded. */\n  readonly expanded = computed(() => this.expansion.isExpanded());\n\n  /** Whether this item is visible. */\n  readonly visible: SignalLike<boolean> = computed(\n    () => this.parent().expanded() && this.parent().visible(),\n  );\n\n  /** The number of items under the same parent at the same level. */\n  readonly setsize = computed(() => this.parent().children().length);\n\n  /** The position of this item among its siblings (1-based). */\n  readonly posinset = computed(() => this.parent().children().indexOf(this) + 1);\n\n  /** Whether the item is active. */\n  readonly active = computed(() => this.tree().activeItem() === this);\n\n  /** The tabindex of the item. */\n  readonly tabindex = computed(() => this.tree().listBehavior.getItemTabindex(this));\n\n  /** Whether the item is selected. */\n  readonly selected: SignalLike<boolean | undefined> = computed(() => {\n    if (this.tree().nav()) {\n      return undefined;\n    }\n    if (!this.selectable()) {\n      return undefined;\n    }\n    return this.tree().value().includes(this.value());\n  });\n\n  /** The current type of this item. */\n  readonly current: SignalLike<string | undefined> = computed(() => {\n    if (!this.tree().nav()) {\n      return undefined;\n    }\n    if (!this.selectable()) {\n      return undefined;\n    }\n    return this.tree().value().includes(this.value()) ? this.tree().currentType() : undefined;\n  });\n\n  constructor(readonly inputs: TreeItemInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.searchTerm = inputs.searchTerm;\n    this.expansionId = inputs.id;\n    this.tree = inputs.tree;\n    this.parent = inputs.parent;\n    this.children = inputs.children;\n    this.expandable = inputs.hasChildren;\n    this.selectable = inputs.selectable;\n    this.expansion = new ExpansionControl({\n      ...inputs,\n      expandable: this.expandable,\n      expansionId: this.expansionId,\n      expansionManager: this.parent().expansionManager,\n    });\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n      multiExpandable: () => true,\n      // TODO(ok7sai): allow pre-expanded tree items.\n      expandedIds: signal([]),\n      items: this.children,\n      disabled: computed(() => this.tree()?.disabled() ?? false),\n    });\n  }\n}\n\n/** The selection operations that the tree can perform. */\ninterface SelectOptions {\n  toggle?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n}\n\n/** Represents the required inputs for a tree. */\nexport interface TreeInputs<V> extends Omit<ListInputs<TreeItemPattern<V>, V>, 'items'> {\n  /** A unique identifier for the tree. */\n  id: SignalLike<string>;\n\n  /** All items in the tree, in document order (DFS-like, a flattened list). */\n  allItems: SignalLike<TreeItemPattern<V>[]>;\n\n  /** Whether the tree is in navigation mode. */\n  nav: SignalLike<boolean>;\n\n  /** The aria-current type. */\n  currentType: SignalLike<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>;\n}\n\nexport interface TreePattern<V> extends TreeInputs<V> {}\n/** Controls the state and interactions of a tree view. */\nexport class TreePattern<V> {\n  /** The list behavior for the tree. */\n  readonly listBehavior: List<TreeItemPattern<V>, V>;\n\n  /** Controls expansion for direct children of the tree root (top-level items). */\n  readonly expansionManager: ListExpansion;\n\n  /** The root level is 0. */\n  readonly level = () => 0;\n\n  /** The root is always expanded. */\n  readonly expanded = () => true;\n\n  /** The roow is always visible. */\n  readonly visible = () => true;\n\n  /** The tabindex of the tree. */\n  readonly tabindex: SignalLike<-1 | 0> = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active item. */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The direct children of the root (top-level tree items). */\n  readonly children = computed(() =>\n    this.inputs.allItems().filter(item => item.level() === this.level() + 1),\n  );\n\n  /** All currently visible tree items. An item is visible if their parent is expanded. */\n  readonly visibleItems = computed(() => this.inputs.allItems().filter(item => item.visible()));\n\n  /** Whether the tree selection follows focus. */\n  readonly followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** The key for navigating to the previous item. */\n  readonly prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key for navigating to the next item. */\n  readonly nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key for collapsing an item or moving to its parent. */\n  readonly collapseKey = computed(() => {\n    if (this.inputs.orientation() === 'horizontal') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key for expanding an item or moving to its first child. */\n  readonly expandKey = computed(() => {\n    if (this.inputs.orientation() === 'horizontal') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  readonly dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** Regular expression to match characters for typeahead. */\n  readonly typeaheadRegexp = /^.$/;\n\n  /** The keydown event manager for the tree. */\n  readonly keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n    const list = this.listBehavior;\n\n    manager\n      .on(this.prevKey, () => list.prev({selectOne: this.followFocus()}))\n      .on(this.nextKey, () => list.next({selectOne: this.followFocus()}))\n      .on('Home', () => list.first({selectOne: this.followFocus()}))\n      .on('End', () => list.last({selectOne: this.followFocus()}))\n      .on(this.typeaheadRegexp, e => list.search(e.key, {selectOne: this.followFocus()}))\n      .on(this.expandKey, () => this.expand({selectOne: this.followFocus()}))\n      .on(this.collapseKey, () => this.collapse({selectOne: this.followFocus()}))\n      .on(Modifier.Shift, '*', () => this.expandSiblings());\n\n    if (this.inputs.multi()) {\n      manager\n        // TODO: Tracking the anchor by index can break if the\n        // tree is expanded or collapsed causing the index to change.\n        .on(Modifier.Any, 'Shift', () => list.anchor(this.listBehavior.activeIndex()))\n        .on(Modifier.Shift, this.prevKey, () => list.prev({selectRange: true}))\n        .on(Modifier.Shift, this.nextKey, () => list.next({selectRange: true}))\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'Home', () =>\n          list.first({selectRange: true, anchor: false}),\n        )\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'End', () =>\n          list.last({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, 'Enter', () => list.updateSelection({selectRange: true, anchor: false}))\n        .on(Modifier.Shift, this.dynamicSpaceKey, () =>\n          list.updateSelection({selectRange: true, anchor: false}),\n        );\n    }\n\n    if (!this.followFocus() && this.inputs.multi()) {\n      manager\n        .on(this.dynamicSpaceKey, () => list.toggle())\n        .on('Enter', () => list.toggle(), {preventDefault: !this.nav()})\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => list.toggleAll());\n    }\n\n    if (!this.followFocus() && !this.inputs.multi()) {\n      manager.on(this.dynamicSpaceKey, () => list.selectOne());\n      manager.on('Enter', () => list.selectOne(), {preventDefault: !this.nav()});\n    }\n\n    if (this.inputs.multi() && this.followFocus()) {\n      manager\n        .on([Modifier.Ctrl, Modifier.Meta], this.prevKey, () => list.prev())\n        .on([Modifier.Ctrl, Modifier.Meta], this.nextKey, () => list.next())\n        .on([Modifier.Ctrl, Modifier.Meta], this.expandKey, () => this.expand())\n        .on([Modifier.Ctrl, Modifier.Meta], this.collapseKey, () => this.collapse())\n        .on([Modifier.Ctrl, Modifier.Meta], ' ', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Enter', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Home', () => list.first())\n        .on([Modifier.Ctrl, Modifier.Meta], 'End', () => list.last())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => {\n          list.toggleAll();\n          list.select(); // Ensure the currect item remains selected.\n        });\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the tree. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.multi()) {\n      manager.on(Modifier.Shift, e => this.goto(e, {selectRange: true}));\n    }\n\n    if (!this.multi()) {\n      return manager.on(e => this.goto(e, {selectOne: true}));\n    }\n\n    if (this.multi() && this.followFocus()) {\n      return manager\n        .on(e => this.goto(e, {selectOne: true}))\n        .on(Modifier.Ctrl, e => this.goto(e, {toggle: true}));\n    }\n\n    if (this.multi() && !this.followFocus()) {\n      return manager.on(e => this.goto(e, {toggle: true}));\n    }\n\n    return manager;\n  });\n\n  /** A unique identifier for the tree. */\n  id: SignalLike<string>;\n\n  /** Whether the tree is in navigation mode. */\n  nav: SignalLike<boolean>;\n\n  /** The aria-current type. */\n  currentType: SignalLike<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>;\n\n  /** All items in the tree, in document order (DFS-like, a flattened list). */\n  allItems: SignalLike<TreeItemPattern<V>[]>;\n\n  /** Whether the tree is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The currently active item in the tree. */\n  activeItem: WritableSignalLike<TreeItemPattern<V> | undefined> = signal(undefined);\n\n  /** Whether disabled items should be skipped when navigating. */\n  skipDisabled: SignalLike<boolean>;\n\n  /** Whether the focus should wrap when navigating past the first or last item. */\n  wrap: SignalLike<boolean>;\n\n  /** The orientation of the tree. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** The text direction of the tree. */\n  textDirection: SignalLike<'ltr' | 'rtl'>;\n\n  /** Whether multiple items can be selected at the same time. */\n  multi: SignalLike<boolean>;\n\n  /** The selection mode of the tree. */\n  selectionMode: SignalLike<'follow' | 'explicit'>;\n\n  /** The delay in milliseconds to wait before clearing the typeahead buffer. */\n  typeaheadDelay: SignalLike<number>;\n\n  /** The current value of the tree (the selected items). */\n  value: WritableSignalLike<V[]>;\n\n  constructor(readonly inputs: TreeInputs<V>) {\n    this.id = inputs.id;\n    this.nav = inputs.nav;\n    this.currentType = inputs.currentType;\n    this.allItems = inputs.allItems;\n    this.focusMode = inputs.focusMode;\n    this.disabled = inputs.disabled;\n    this.activeItem = inputs.activeItem;\n    this.skipDisabled = inputs.skipDisabled;\n    this.wrap = inputs.wrap;\n    this.orientation = inputs.orientation;\n    this.textDirection = inputs.textDirection;\n    this.multi = computed(() => (this.nav() ? false : this.inputs.multi()));\n    this.selectionMode = inputs.selectionMode;\n    this.typeaheadDelay = inputs.typeaheadDelay;\n    this.value = inputs.value;\n\n    this.listBehavior = new List({\n      ...inputs,\n      items: this.visibleItems,\n      multi: this.multi,\n    });\n\n    this.expansionManager = new ListExpansion({\n      multiExpandable: () => true,\n      // TODO(ok7sai): allow pre-expanded tree items.\n      expandedIds: signal([]),\n      items: this.children,\n      disabled: this.disabled,\n    });\n  }\n\n  /**\n   * Sets the tree to it's default initial state.\n   *\n   * Sets the active index of the tree to the first focusable selected tree item if one exists.\n   * Otherwise, sets focus to the first focusable tree item.\n   */\n  setDefaultState() {\n    let firstItem: TreeItemPattern<V> | undefined;\n\n    for (const item of this.allItems()) {\n      if (!item.visible()) continue;\n      if (!this.listBehavior.isFocusable(item)) continue;\n\n      if (firstItem === undefined) {\n        firstItem = item;\n      }\n\n      if (item.selected()) {\n        this.activeItem.set(item);\n        return;\n      }\n    }\n\n    if (firstItem !== undefined) {\n      this.activeItem.set(firstItem);\n    }\n  }\n\n  /** Handles keydown events on the tree. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerdown events on the tree. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Navigates to the given tree item in the tree. */\n  goto(e: PointerEvent, opts?: SelectOptions) {\n    const item = this._getItem(e);\n    if (!item) return;\n\n    this.listBehavior.goto(item, opts);\n    this.toggleExpansion(item);\n  }\n\n  /** Toggles to expand or collapse a tree item. */\n  toggleExpansion(item?: TreeItemPattern<V>) {\n    item ??= this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (!item.expandable()) return;\n    if (item.expanded()) {\n      this.collapse();\n    } else {\n      item.expansion.open();\n    }\n  }\n\n  /** Expands a tree item. */\n  expand(opts?: SelectOptions) {\n    const item = this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (item.expandable() && !item.expanded()) {\n      item.expansion.open();\n    } else if (\n      item.expanded() &&\n      item.children().some(item => this.listBehavior.isFocusable(item))\n    ) {\n      this.listBehavior.next(opts);\n    }\n  }\n\n  /** Expands all sibling tree items including itself. */\n  expandSiblings(item?: TreeItemPattern<V>) {\n    item ??= this.activeItem();\n    const siblings = item?.parent()?.children();\n    siblings?.forEach(item => item.expansion.open());\n  }\n\n  /** Collapses a tree item. */\n  collapse(opts?: SelectOptions) {\n    const item = this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (item.expandable() && item.expanded()) {\n      item.expansion.close();\n    } else if (item.parent() && item.parent() !== this) {\n      const parentItem = item.parent();\n      if (parentItem instanceof TreeItemPattern && this.listBehavior.isFocusable(parentItem)) {\n        this.listBehavior.goto(parentItem, opts);\n      }\n    }\n  }\n\n  /** Retrieves the TreeItemPattern associated with a DOM event, if any. */\n  protected _getItem(event: Event): TreeItemPattern<V> | undefined {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const element = event.target.closest('[role=\"treeitem\"]');\n    return this.inputs.allItems().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {TreeInputs, TreePattern, TreeItemPattern} from './tree';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ComboboxPattern, ComboboxTreeControls} from '../combobox/combobox';\n\nexport type ComboboxTreeInputs<V> = TreeInputs<V> & {\n  /** The combobox controlling the tree. */\n  combobox: SignalLike<ComboboxPattern<TreeItemPattern<V>, V> | undefined>;\n};\n\nexport class ComboboxTreePattern<V>\n  extends TreePattern<V>\n  implements ComboboxTreeControls<TreeItemPattern<V>, V>\n{\n  /** Whether the currently focused item is collapsible. */\n  isItemCollapsible = () => this.inputs.activeItem()?.parent() instanceof TreeItemPattern;\n\n  /** The ARIA role for the tree. */\n  role = () => 'tree' as const;\n\n  /* The id of the active (focused) item in the tree. */\n  activeId = computed(() => this.listBehavior.activedescendant());\n\n  /** The list of items in the tree. */\n  items = computed(() => this.inputs.allItems());\n\n  /** The tabindex for the tree. Always -1 because the combobox handles focus. */\n  override tabindex: SignalLike<-1 | 0> = () => -1;\n\n  constructor(override readonly inputs: ComboboxTreeInputs<V>) {\n    if (inputs.combobox()) {\n      inputs.multi = () => false;\n      inputs.focusMode = () => 'activedescendant';\n      inputs.element = inputs.combobox()!.inputs.inputEl;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The combobox handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The combobox handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Noop. The combobox controls the open state. */\n  override setDefaultState(): void {}\n\n  /** Navigates to the specified item in the tree. */\n  focus = (item: TreeItemPattern<V>) => this.listBehavior.goto(item);\n\n  /** Navigates to the next focusable item in the tree. */\n  next = () => this.listBehavior.next();\n\n  /** Navigates to the previous focusable item in the tree. */\n  prev = () => this.listBehavior.prev();\n\n  /** Navigates to the last focusable item in the tree. */\n  last = () => this.listBehavior.last();\n\n  /** Navigates to the first focusable item in the tree. */\n  first = () => this.listBehavior.first();\n\n  /** Unfocuses the currently focused item in the tree. */\n  unfocus = () => this.listBehavior.unfocus();\n\n  // TODO: handle non-selectable parent nodes.\n  /** Selects the specified item in the tree or the current active item if not provided. */\n  select = (item?: TreeItemPattern<V>) => this.listBehavior.select(item);\n\n  /** Clears the selection in the tree. */\n  clearSelection = () => this.listBehavior.deselectAll();\n\n  /** Retrieves the TreeItemPattern associated with a pointer event. */\n  getItem = (e: PointerEvent) => this._getItem(e);\n\n  /** Retrieves the currently selected item in the tree */\n  getSelectedItem = () => this.inputs.allItems().find(i => i.selected());\n\n  /** Sets the value of the combobox tree. */\n  setValue = (value: V | undefined) => this.inputs.value.set(value ? [value] : []);\n\n  /** Expands the currently focused item if it is expandable. */\n  expandItem = () => this.expand();\n\n  /** Collapses the currently focused item if it is expandable. */\n  collapseItem = () => this.collapse();\n\n  /** Whether the specified item or the currently active item is expandable. */\n  isItemExpandable(item: TreeItemPattern<V> | undefined = this.inputs.activeItem()) {\n    return item ? item.expandable() : false;\n  }\n\n  /** Expands all of the tree items. */\n  expandAll = () => this.items().forEach(item => item.expansion.open());\n\n  /** Collapses all of the tree items. */\n  collapseAll = () => this.items().forEach(item => item.expansion.close());\n}\n"],"names":["expanded","signal","computed","inputs","popupControls","activeId","undefined","id","autocomplete","filterMode","readonly","keydown","on","open","first","last","close","reset","manager","selected","KeyboardEventManager","next","select","commit","treeControls","isItemExpandable","isItemCollapsible","collapseKey","collapseItem","PointerEventManager","e","getItem","inputEl","focus","target","handle","event","disabled","pointerup","onInput","inputValue","set","value","isDeleting","InputEvent","inputType","match","searchTerm","clearSelection","highlight","onFocusOut","relatedTarget","HTMLElement","isFocused","item","items","find","i","role","firstMatch","onFilter","isInitialRender","length","unfocus","prevActiveItem","indexOf","activeItem","isListDisabled","every","getActiveDescendant","focusMode","focusManager","opts","_advance","peekNext","peekPrev","isFocusable","goto","selectedItems","filter","includes","constructor","anchor","selectable","multi","deselectAll","index","findIndex","update","values","concat","deselect","toggleOne","selectAll","beginRangeSelection","v","selectOne","isTyping","_query","_startIndex","search","char","activeIndex","q","toLowerCase","_getItem","List","activedescendant","tabindex","focusBehavior","getListTabindex","selectionBehavior","ListSelection","typeaheadBehavior","ListTypeahead","navigationBehavior","ListNavigation","wrap","_wrap","getItemTabindex","_navigate","prev","_anchorIndex","listBehavior","orientation","selectionMode","prevKey","textDirection","nextKey","typeaheadRegexp","key","followFocus","Modifier","Any","Shift","selectRange","Ctrl","Meta","updateSelection","dynamicSpaceKey","toggle","toggleAll","validate","listbox","active","element","combobox","onKeydown","_","onPointerdown","setDefaultState","isVisible","parent","shouldFocus","root","MenuTriggerPattern","MenuBarPattern","MenuPattern","grandparent","trigger","closeAll","_expandKey","expand","collapse","contains","submenu","focusElement","onMouseOut","onFocusIn","hasBeenFocused","parentEl","MenuItemPattern","siblings","hasPopup","submit","isMenu","isMenuBar","isMenuTrigger","refocus","onSelect","_nextKey","keydownManager","_previousKey","onClick","onMouseOver","prevItem","selectedItem","_prevKey","typeaheadDelay","group","skipDisabled","toolbar","isOnFirstItem","expansionId","expansionManager","ListExpansion","expandedIds","isExpandable","ids","labelledBy","TabPattern","tablist","expandable","expansion","isExpanded","controls","tabpanel","ExpansionControl","TabPanelPattern","hidden","tab","labelManager","join","LabelControl","defaultLabelledBy","TabListPattern","ToolbarPattern","_altPrevKey","_altNextKey","_keydown","_prev","_groupPrev","_trigger","_first","_goto","ToolbarWidgetGroupPattern","isOnLastItem","ToolbarWidgetPattern","newItem","_last","AccordionGroupPattern","multiExpandable","ListFocus","navigation","AccordionTriggerPattern","accordionPanel","accordionGroup","expansionControl","TreeItemPattern","tree","visibleItems","level","visible","setsize","children","posinset","nav","currentType","hasChildren","TreePattern","allItems","expandKey","list","expandSiblings","preventDefault"],"mappings":"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"}