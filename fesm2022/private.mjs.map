{"version":3,"file":"private.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/combobox/combobox.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-focus/list-focus.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-navigation/list-navigation.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-selection/list-selection.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list-typeahead/list-typeahead.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/list/list.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/listbox/listbox.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/listbox/option.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/listbox/combobox-listbox.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/menu/menu.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/radio-group/radio-group.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/radio-group/radio-button.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/radio-group/toolbar-radio-group.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/signal-like/signal-like.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/expansion/expansion.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/behaviors/label/label.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/tabs/tabs.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/toolbar/toolbar-widget.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/toolbar/toolbar-widget-group.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/toolbar/toolbar.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/accordion/accordion.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/tree/tree.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/private/tree/combobox-tree.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\n\n/** Represents the required inputs for a combobox. */\nexport interface ComboboxInputs<T extends ListItem<V>, V> {\n  /** The controls for the popup associated with the combobox. */\n  popupControls: SignalLike<ComboboxListboxControls<T, V> | ComboboxTreeControls<T, V> | undefined>;\n\n  /** The HTML input element that serves as the combobox input. */\n  inputEl: SignalLike<HTMLInputElement | undefined>;\n\n  /** The HTML element that serves as the combobox container. */\n  containerEl: SignalLike<HTMLElement | undefined>;\n\n  /** The filtering mode for the combobox. */\n  filterMode: SignalLike<'manual' | 'auto-select' | 'highlight'>;\n\n  /** The current value of the combobox. */\n  inputValue?: WritableSignalLike<string>;\n\n  /** The value of the first matching item in the popup. */\n  firstMatch: SignalLike<V | undefined>;\n\n  /** Whether the combobox is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** Whether the combobox is read-only. */\n  readonly: SignalLike<boolean>;\n\n  /** Whether the combobox is in a right-to-left context. */\n  textDirection: SignalLike<'rtl' | 'ltr'>;\n}\n\n/** An interface that allows combobox popups to expose the necessary controls for the combobox. */\nexport interface ComboboxListboxControls<T extends ListItem<V>, V> {\n  /** A unique identifier for the popup. */\n  id: () => string;\n\n  /** The ARIA role for the popup. */\n  role: SignalLike<'listbox' | 'tree' | 'grid'>;\n\n  /** The ID of the active item in the popup. */\n  activeId: SignalLike<string | undefined>;\n\n  /** The list of items in the popup. */\n  items: SignalLike<T[]>;\n\n  /** Navigates to the given item in the popup. */\n  focus: (item: T) => void;\n\n  /** Navigates to the next item in the popup. */\n  next: () => void;\n\n  /** Navigates to the previous item in the popup. */\n  prev: () => void;\n\n  /** Navigates to the first item in the popup. */\n  first: () => void;\n\n  /** Navigates to the last item in the popup. */\n  last: () => void;\n\n  /** Selects the current item in the popup. */\n  select: (item?: T) => void;\n\n  /** Clears the selection state of the popup. */\n  clearSelection: () => void;\n\n  /** Removes focus from any item in the popup. */\n  unfocus: () => void;\n\n  /** Returns the item corresponding to the given event. */\n  getItem: (e: PointerEvent) => T | undefined;\n\n  /** Returns the currently selected item in the popup. */\n  getSelectedItem: () => T | undefined;\n\n  /** Sets the value of the combobox based on the selected item. */\n  setValue: (value: V | undefined) => void; // For re-setting the value if the popup was destroyed.\n}\n\nexport interface ComboboxTreeControls<T extends ListItem<V>, V>\n  extends ComboboxListboxControls<T, V> {\n  /** Whether the currently active item in the popup is collapsible. */\n  isItemCollapsible: () => boolean;\n\n  /** Expands the currently active item in the popup. */\n  expandItem: () => void;\n\n  /** Collapses the currently active item in the popup. */\n  collapseItem: () => void;\n\n  /** Checks if the currently active item in the popup is expandable. */\n  isItemExpandable: () => boolean;\n\n  /** Expands all nodes in the tree. */\n  expandAll: () => void;\n\n  /** Collapses all nodes in the tree. */\n  collapseAll: () => void;\n}\n\n/** Controls the state of a combobox. */\nexport class ComboboxPattern<T extends ListItem<V>, V> {\n  /** Whether the combobox is expanded. */\n  expanded = signal(false);\n\n  /** The ID of the active item in the combobox. */\n  activedescendant = computed(() => this.inputs.popupControls()?.activeId() ?? null);\n\n  /** The currently highlighted item in the combobox. */\n  highlightedItem = signal<T | undefined>(undefined);\n\n  /** Whether the most recent input event was a deletion. */\n  isDeleting = false;\n\n  /** Whether the combobox is focused. */\n  isFocused = signal(false);\n\n  /** The key used to navigate to the previous item in the list. */\n  expandKey = computed(() => (this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight'));\n\n  /** The key used to navigate to the next item in the list. */\n  collapseKey = computed(() =>\n    this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft',\n  );\n\n  /** The ID of the popup associated with the combobox. */\n  popupId = computed(() => this.inputs.popupControls()?.id() || null);\n\n  /** The autocomplete behavior of the combobox. */\n  autocomplete = computed(() => (this.inputs.filterMode() === 'highlight' ? 'both' : 'list'));\n\n  /** The ARIA role of the popup associated with the combobox. */\n  hasPopup = computed(() => this.inputs.popupControls()?.role() || null);\n\n  /** Whether the combobox is read-only. */\n  readonly = computed(() => this.inputs.readonly() || null);\n\n  /** The keydown event manager for the combobox. */\n  keydown = computed(() => {\n    if (!this.expanded()) {\n      const manager = new KeyboardEventManager()\n        .on('ArrowDown', () => this.open({first: true}))\n        .on('ArrowUp', () => this.open({last: true}))\n        .on('Escape', () => this.close({reset: true}));\n\n      if (this.readonly()) {\n        manager\n          .on('Enter', () => this.open({selected: true}))\n          .on(' ', () => this.open({selected: true}));\n      }\n\n      return manager;\n    }\n\n    const popupControls = this.inputs.popupControls();\n\n    if (!popupControls) {\n      return new KeyboardEventManager();\n    }\n\n    const manager = new KeyboardEventManager()\n      .on('ArrowDown', () => this.next())\n      .on('ArrowUp', () => this.prev())\n      .on('Home', () => this.first())\n      .on('End', () => this.last())\n      .on('Escape', () => this.close({reset: true}))\n      .on('Enter', () => this.select({commit: true, close: true}));\n\n    if (this.readonly()) {\n      manager.on(' ', () => this.select({commit: true, close: true}));\n    }\n\n    if (popupControls.role() === 'tree') {\n      const treeControls = popupControls as ComboboxTreeControls<T, V>;\n\n      if (treeControls.isItemExpandable() || treeControls.isItemCollapsible()) {\n        manager.on(this.collapseKey(), () => this.collapseItem());\n      }\n\n      if (treeControls.isItemExpandable()) {\n        manager.on(this.expandKey(), () => this.expandItem());\n      }\n    }\n\n    return manager;\n  });\n\n  /** The pointerup event manager for the combobox. */\n  pointerup = computed(() =>\n    new PointerEventManager().on(e => {\n      const item = this.inputs.popupControls()?.getItem(e);\n\n      if (item) {\n        this.select({item, commit: true, close: true});\n        this.inputs.inputEl()?.focus(); // Return focus to the input after selecting.\n      }\n\n      if (e.target === this.inputs.inputEl()) {\n        if (this.readonly()) {\n          this.expanded() ? this.close() : this.open({selected: true});\n        } else {\n          this.open();\n        }\n      }\n    }),\n  );\n\n  constructor(readonly inputs: ComboboxInputs<T, V>) {}\n\n  /** Handles keydown events for the combobox. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.inputs.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerup events for the combobox. */\n  onPointerup(event: PointerEvent) {\n    if (!this.inputs.disabled()) {\n      this.pointerup().handle(event);\n    }\n  }\n\n  /** Handles input events for the combobox. */\n  onInput(event: Event) {\n    if (this.inputs.disabled() || this.inputs.readonly()) {\n      return;\n    }\n\n    const inputEl = this.inputs.inputEl();\n\n    if (!inputEl) {\n      return;\n    }\n\n    this.open();\n    this.inputs.inputValue?.set(inputEl.value);\n    this.isDeleting = event instanceof InputEvent && !!event.inputType.match(/^delete/);\n\n    if (this.inputs.filterMode() === 'manual') {\n      const searchTerm = this.inputs.popupControls()?.getSelectedItem()?.searchTerm();\n\n      if (searchTerm && this.inputs.inputValue!() !== searchTerm) {\n        this.inputs.popupControls()?.clearSelection();\n      }\n    }\n\n    if (this.inputs.filterMode() === 'highlight' && !this.isDeleting) {\n      this.highlight();\n    }\n  }\n\n  /** Handles focus in events for the combobox. */\n  onFocusIn() {\n    this.isFocused.set(true);\n  }\n\n  /** Handles focus out events for the combobox. */\n  onFocusOut(event: FocusEvent) {\n    if (this.inputs.disabled()) {\n      return;\n    }\n\n    if (\n      !(event.relatedTarget instanceof HTMLElement) ||\n      !this.inputs.containerEl()?.contains(event.relatedTarget)\n    ) {\n      this.isFocused.set(false);\n      if (this.inputs.filterMode() !== 'manual') {\n        this.commit();\n      } else {\n        const item = this.inputs\n          .popupControls()\n          ?.items()\n          .find(i => i.searchTerm() === this.inputs.inputEl()?.value);\n\n        if (item) {\n          this.select({item});\n        }\n      }\n\n      this.close();\n    }\n  }\n\n  /** The first matching item in the combobox. */\n  firstMatch = computed(() => {\n    // TODO(wagnermaciel): Consider whether we should not provide this default behavior for the\n    // listbox. Instead, we may want to allow users to have no match so that typing does not focus\n    // any option.\n    if (this.inputs.popupControls()?.role() === 'listbox') {\n      return this.inputs.popupControls()?.items()[0];\n    }\n\n    return this.inputs\n      .popupControls()\n      ?.items()\n      .find(i => i.value() === this.inputs.firstMatch());\n  });\n\n  /** Handles filtering logic for the combobox. */\n  onFilter() {\n    // TODO(wagnermaciel)\n    // When the user first interacts with the combobox, the popup will lazily render for the first\n    // time. This is a simple way to detect this and avoid auto-focus & selection logic, but this\n    // should probably be moved to the component layer instead.\n    const isInitialRender = !this.inputs.inputValue?.().length && !this.isDeleting;\n\n    if (isInitialRender) {\n      return;\n    }\n\n    // Avoid refocusing the input if a filter event occurs after focus has left the combobox.\n    if (!this.isFocused()) {\n      return;\n    }\n\n    if (this.inputs.popupControls()?.role() === 'tree') {\n      const treeControls = this.inputs.popupControls() as ComboboxTreeControls<T, V>;\n      this.inputs.inputValue?.().length ? treeControls.expandAll() : treeControls.collapseAll();\n    }\n\n    const item = this.firstMatch();\n\n    if (!item) {\n      this.inputs.popupControls()?.clearSelection();\n      this.inputs.popupControls()?.unfocus();\n      return;\n    }\n\n    this.inputs.popupControls()?.focus(item);\n\n    if (this.inputs.filterMode() !== 'manual') {\n      this.select({item});\n    }\n\n    if (this.inputs.filterMode() === 'highlight' && !this.isDeleting) {\n      this.highlight();\n    }\n  }\n\n  /** Highlights the currently selected item in the combobox. */\n  highlight() {\n    const inputEl = this.inputs.inputEl();\n    const item = this.inputs.popupControls()?.getSelectedItem();\n\n    if (!inputEl || !item) {\n      return;\n    }\n\n    const isHighlightable = item\n      .searchTerm()\n      .toLowerCase()\n      .startsWith(this.inputs.inputValue!().toLowerCase());\n\n    if (isHighlightable) {\n      inputEl.value =\n        this.inputs.inputValue!() + item.searchTerm().slice(this.inputs.inputValue!().length);\n      inputEl.setSelectionRange(this.inputs.inputValue!().length, item.searchTerm().length);\n      this.highlightedItem.set(item);\n    }\n  }\n\n  /** Closes the combobox. */\n  close(opts?: {reset: boolean}) {\n    if (!opts?.reset) {\n      this.expanded.set(false);\n      this.inputs.popupControls()?.unfocus();\n      return;\n    }\n\n    const popupControls = this.inputs.popupControls();\n\n    if (!this.expanded()) {\n      this.inputs.inputValue?.set('');\n      popupControls?.clearSelection();\n\n      const inputEl = this.inputs.inputEl();\n\n      if (inputEl) {\n        inputEl.value = '';\n      }\n    } else if (this.expanded()) {\n      this.close();\n\n      const selectedItem = popupControls?.getSelectedItem();\n\n      if (selectedItem?.searchTerm() !== this.inputs.inputValue!()) {\n        popupControls?.clearSelection();\n      }\n    }\n\n    this.close();\n\n    if (!this.readonly()) {\n      this.inputs.popupControls()?.clearSelection();\n    }\n  }\n\n  /** Opens the combobox. */\n  open(nav?: {first?: boolean; last?: boolean; selected?: boolean}) {\n    this.expanded.set(true);\n\n    const inputEl = this.inputs.inputEl();\n\n    if (inputEl && this.inputs.filterMode() === 'highlight') {\n      const isHighlighting = inputEl.selectionStart !== inputEl.value.length;\n      this.inputs.inputValue?.set(inputEl.value.slice(0, inputEl.selectionStart || 0));\n      if (!isHighlighting) {\n        this.highlightedItem.set(undefined);\n      }\n    }\n\n    if (nav?.first) {\n      this.first();\n    }\n    if (nav?.last) {\n      this.last();\n    }\n    if (nav?.selected) {\n      const selectedItem = this.inputs.popupControls()?.getSelectedItem();\n      selectedItem ? this.inputs.popupControls()?.focus(selectedItem) : this.first();\n    }\n  }\n\n  /** Navigates to the next focusable item in the combobox popup. */\n  next() {\n    this._navigate(() => this.inputs.popupControls()?.next());\n  }\n\n  /** Navigates to the previous focusable item in the combobox popup. */\n  prev() {\n    this._navigate(() => this.inputs.popupControls()?.prev());\n  }\n\n  /** Navigates to the first focusable item in the combobox popup. */\n  first() {\n    this._navigate(() => this.inputs.popupControls()?.first());\n  }\n\n  /** Navigates to the last focusable item in the combobox popup. */\n  last() {\n    this._navigate(() => this.inputs.popupControls()?.last());\n  }\n\n  /** Collapses the currently focused item in the combobox. */\n  collapseItem() {\n    const controls = this.inputs.popupControls() as ComboboxTreeControls<T, V>;\n    this._navigate(() => controls?.collapseItem());\n  }\n\n  /** Expands the currently focused item in the combobox. */\n  expandItem() {\n    const controls = this.inputs.popupControls() as ComboboxTreeControls<T, V>;\n    this._navigate(() => controls?.expandItem());\n  }\n\n  /** Selects an item in the combobox popup. */\n  select(opts: {item?: T; commit?: boolean; close?: boolean} = {}) {\n    this.inputs.popupControls()?.select(opts.item);\n\n    if (opts.commit) {\n      this.commit();\n    }\n    if (opts.close) {\n      this.close();\n    }\n  }\n\n  /** Updates the value of the input based on the currently selected item. */\n  commit() {\n    const inputEl = this.inputs.inputEl();\n    const item = this.inputs.popupControls()?.getSelectedItem();\n\n    if (inputEl && item) {\n      inputEl.value = item.searchTerm();\n      this.inputs.inputValue?.set(item.searchTerm());\n\n      if (this.inputs.filterMode() === 'highlight') {\n        const length = inputEl.value.length;\n        inputEl.setSelectionRange(length, length);\n      }\n    }\n  }\n\n  /** Navigates and handles additional actions based on filter mode. */\n  private _navigate(operation: () => void) {\n    operation();\n\n    if (this.inputs.filterMode() !== 'manual') {\n      this.select();\n    }\n\n    if (this.inputs.filterMode() === 'highlight') {\n      // This is to handle when the user navigates back to the originally highlighted item.\n      // E.g. User types \"Al\", highlights \"Alice\", then navigates down and back up to \"Alice\".\n      const selectedItem = this.inputs.popupControls()?.getSelectedItem();\n\n      if (!selectedItem) {\n        return;\n      }\n\n      if (selectedItem === this.highlightedItem()) {\n        this.highlight();\n      } else {\n        const inputEl = this.inputs.inputEl()!;\n        inputEl.value = selectedItem?.searchTerm()!;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\n\n/** Represents an item in a collection, such as a listbox option, than may receive focus. */\nexport interface ListFocusItem {\n  /** A unique identifier for the item. */\n  id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  element: SignalLike<HTMLElement>;\n\n  /** Whether an item is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The index of the item in the list. */\n  index: SignalLike<number>;\n}\n\n/** Represents the required inputs for a collection that contains focusable items. */\nexport interface ListFocusInputs<T extends ListFocusItem> {\n  /** The focus strategy used by the list. */\n  focusMode: SignalLike<'roving' | 'activedescendant'>;\n\n  /** Whether the list is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The items in the list. */\n  items: SignalLike<T[]>;\n\n  /** The active item. */\n  activeItem: WritableSignalLike<T | undefined>;\n\n  /** Whether disabled items in the list should be skipped when navigating. */\n  skipDisabled: SignalLike<boolean>;\n\n  element: SignalLike<HTMLElement | undefined>;\n}\n\n/** Controls focus for a list of items. */\nexport class ListFocus<T extends ListFocusItem> {\n  /** The last item that was active. */\n  prevActiveItem = signal<T | undefined>(undefined);\n\n  /** The index of the last item that was active. */\n  prevActiveIndex = computed(() => {\n    return this.prevActiveItem() ? this.inputs.items().indexOf(this.prevActiveItem()!) : -1;\n  });\n\n  /** The current active index in the list. */\n  activeIndex = computed(() => {\n    return this.inputs.activeItem() ? this.inputs.items().indexOf(this.inputs.activeItem()!) : -1;\n  });\n\n  constructor(readonly inputs: ListFocusInputs<T>) {}\n\n  /** Whether the list is in a disabled state. */\n  isListDisabled(): boolean {\n    return this.inputs.disabled() || this.inputs.items().every(i => i.disabled());\n  }\n\n  /** The id of the current active item. */\n  getActiveDescendant(): string | undefined {\n    if (this.isListDisabled()) {\n      return undefined;\n    }\n    if (this.inputs.focusMode() === 'roving') {\n      return undefined;\n    }\n    return this.inputs.activeItem()?.id() ?? undefined;\n  }\n\n  /** The tabindex for the list. */\n  getListTabindex(): -1 | 0 {\n    if (this.isListDisabled()) {\n      return 0;\n    }\n    return this.inputs.focusMode() === 'activedescendant' ? 0 : -1;\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T): -1 | 0 {\n    if (this.isListDisabled()) {\n      return -1;\n    }\n    if (this.inputs.focusMode() === 'activedescendant') {\n      return -1;\n    }\n    return this.inputs.activeItem() === item ? 0 : -1;\n  }\n\n  /** Moves focus to the given item if it is focusable. */\n  focus(item: T, opts?: {focusElement?: boolean}): boolean {\n    if (this.isListDisabled() || !this.isFocusable(item)) {\n      return false;\n    }\n\n    this.prevActiveItem.set(this.inputs.activeItem());\n    this.inputs.activeItem.set(item);\n\n    if (opts?.focusElement || opts?.focusElement === undefined) {\n      this.inputs.focusMode() === 'roving'\n        ? item.element().focus()\n        : this.inputs.element()?.focus();\n    }\n\n    return true;\n  }\n\n  /** Returns true if the given item can be navigated to. */\n  isFocusable(item: T): boolean {\n    return !item.disabled() || !this.inputs.skipDisabled();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/** Represents an item in a collection, such as a listbox option, than can be navigated to. */\nexport interface ListNavigationItem extends ListFocusItem {}\n\n/** Represents the required inputs for a collection that has navigable items. */\nexport interface ListNavigationInputs<T extends ListNavigationItem> extends ListFocusInputs<T> {\n  /** Whether focus should wrap when navigating. */\n  wrap: SignalLike<boolean>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** The direction that text is read based on the users locale. */\n  textDirection: SignalLike<'rtl' | 'ltr'>;\n}\n\n/** Controls navigation for a list of items. */\nexport class ListNavigation<T extends ListNavigationItem> {\n  constructor(readonly inputs: ListNavigationInputs<T> & {focusManager: ListFocus<T>}) {}\n\n  /** Navigates to the given item. */\n  goto(item?: T, opts?: {focusElement?: boolean}): boolean {\n    return item ? this.inputs.focusManager.focus(item, opts) : false;\n  }\n\n  /** Navigates to the next item in the list. */\n  next(opts?: {focusElement?: boolean}): boolean {\n    return this._advance(1, opts);\n  }\n\n  /** Peeks the next item in the list. */\n  peekNext(): T | undefined {\n    return this._peek(1);\n  }\n\n  /** Navigates to the previous item in the list. */\n  prev(opts?: {focusElement?: boolean}): boolean {\n    return this._advance(-1, opts);\n  }\n\n  /** Peeks the previous item in the list. */\n  peekPrev(): T | undefined {\n    return this._peek(-1);\n  }\n\n  /** Navigates to the first item in the list. */\n  first(opts?: {focusElement?: boolean}): boolean {\n    const item = this.inputs.items().find(i => this.inputs.focusManager.isFocusable(i));\n    return item ? this.goto(item, opts) : false;\n  }\n\n  /** Navigates to the last item in the list. */\n  last(opts?: {focusElement?: boolean}): boolean {\n    const items = this.inputs.items();\n    for (let i = items.length - 1; i >= 0; i--) {\n      if (this.inputs.focusManager.isFocusable(items[i])) {\n        return this.goto(items[i], opts);\n      }\n    }\n    return false;\n  }\n\n  /** Advances to the next or previous focusable item in the list based on the given delta. */\n  private _advance(delta: 1 | -1, opts?: {focusElement?: boolean}): boolean {\n    const item = this._peek(delta);\n    return item ? this.goto(item, opts) : false;\n  }\n\n  /** Peeks the next or previous focusable item in the list based on the given delta. */\n  private _peek(delta: 1 | -1): T | undefined {\n    const items = this.inputs.items();\n    const itemCount = items.length;\n    const startIndex = this.inputs.focusManager.activeIndex();\n    const step = (i: number) =>\n      this.inputs.wrap() ? (i + delta + itemCount) % itemCount : i + delta;\n\n    // If wrapping is enabled, this loop ultimately terminates when `i` gets back to `startIndex`\n    // in the case that all options are disabled. If wrapping is disabled, the loop terminates\n    // when the index goes out of bounds.\n    for (let i = step(startIndex); i !== startIndex && i < itemCount && i >= 0; i = step(i)) {\n      if (this.inputs.focusManager.isFocusable(items[i])) {\n        return items[i];\n      }\n    }\n\n    return;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/** Represents an item in a collection, such as a listbox option, than can be selected. */\nexport interface ListSelectionItem<V> extends ListFocusItem {\n  /** The value of the item. */\n  value: SignalLike<V>;\n\n  /** Whether the item is selectable. */\n  selectable: SignalLike<boolean>;\n}\n\n/** Represents the required inputs for a collection that contains selectable items. */\nexport interface ListSelectionInputs<T extends ListSelectionItem<V>, V> extends ListFocusInputs<T> {\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The current value of the list selection. */\n  value: WritableSignalLike<V[]>;\n\n  /** The selection strategy used by the list. */\n  selectionMode: SignalLike<'follow' | 'explicit'>;\n}\n\n/** Controls selection for a list of items. */\nexport class ListSelection<T extends ListSelectionItem<V>, V> {\n  /** The start index to use for range selection. */\n  rangeStartIndex = signal<number>(0);\n\n  /** The end index to use for range selection. */\n  rangeEndIndex = signal<number>(0);\n\n  /** The currently selected items. */\n  selectedItems = computed(() =>\n    this.inputs.items().filter(item => this.inputs.value().includes(item.value())),\n  );\n\n  constructor(readonly inputs: ListSelectionInputs<T, V> & {focusManager: ListFocus<T>}) {}\n\n  /** Selects the item at the current active index. */\n  select(item?: ListSelectionItem<V>, opts = {anchor: true}) {\n    item = item ?? (this.inputs.focusManager.inputs.activeItem() as ListSelectionItem<V>);\n\n    if (\n      !item ||\n      item.disabled() ||\n      !item.selectable() ||\n      this.inputs.value().includes(item.value())\n    ) {\n      return;\n    }\n\n    if (!this.inputs.multi()) {\n      this.deselectAll();\n    }\n\n    const index = this.inputs.items().findIndex(i => i === item);\n    if (opts.anchor) {\n      this.beginRangeSelection(index);\n    }\n    this.inputs.value.update(values => values.concat(item.value()));\n  }\n\n  /** Deselects the item at the current active index. */\n  deselect(item?: T | null) {\n    item = item ?? this.inputs.focusManager.inputs.activeItem();\n\n    if (item && !item.disabled() && item.selectable()) {\n      this.inputs.value.update(values => values.filter(value => value !== item.value()));\n    }\n  }\n\n  /** Toggles the item at the current active index. */\n  toggle() {\n    const item = this.inputs.focusManager.inputs.activeItem();\n    if (item) {\n      this.inputs.value().includes(item.value()) ? this.deselect() : this.select();\n    }\n  }\n\n  /** Toggles only the item at the current active index. */\n  toggleOne() {\n    const item = this.inputs.focusManager.inputs.activeItem();\n    if (item) {\n      this.inputs.value().includes(item.value()) ? this.deselect() : this.selectOne();\n    }\n  }\n\n  /** Selects all items in the list. */\n  selectAll() {\n    if (!this.inputs.multi()) {\n      return; // Should we log a warning?\n    }\n\n    for (const item of this.inputs.items()) {\n      this.select(item, {anchor: false});\n    }\n\n    this.beginRangeSelection();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    // If an item is not in the list, it forcefully gets deselected.\n    // This actually creates a bug for the following edge case:\n    //\n    // Setup: An item is not in the list (maybe it's lazily loaded), and it is disabled & selected.\n    // Expected: If deselectAll() is called, it should NOT get deselected (because it is disabled).\n    // Actual: Calling deselectAll() will still deselect the item.\n    //\n    // Why? Because we can't check if the item is disabled if it's not in the list.\n    //\n    // Alternatively, we could NOT deselect items that are not in the list, but this has the\n    // inverse (and more common) effect of keeping enabled items selected when they aren't in the\n    // list.\n\n    for (const value of this.inputs.value()) {\n      const item = this.inputs.items().find(i => i.value() === value);\n\n      item\n        ? this.deselect(item)\n        : this.inputs.value.update(values => values.filter(v => v !== value));\n    }\n  }\n\n  /**\n   * Selects all items in the list or deselects all\n   * items in the list if all items are already selected.\n   */\n  toggleAll() {\n    const selectableValues = this.inputs\n      .items()\n      .filter(i => !i.disabled() && i.selectable())\n      .map(i => i.value());\n\n    selectableValues.every(i => this.inputs.value().includes(i))\n      ? this.deselectAll()\n      : this.selectAll();\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    const item = this.inputs.focusManager.inputs.activeItem();\n    if (item && (item.disabled() || !item.selectable())) {\n      return;\n    }\n\n    this.deselectAll();\n\n    if (this.inputs.value().length > 0 && !this.inputs.multi()) {\n      return;\n    }\n\n    this.select();\n  }\n\n  /**\n   * Selects all items in the list up to the anchor item.\n   *\n   * Deselects all items that were previously within the\n   * selected range that are now outside of the selected range\n   */\n  selectRange(opts = {anchor: true}) {\n    const isStartOfRange = this.inputs.focusManager.prevActiveIndex() === this.rangeStartIndex();\n\n    if (isStartOfRange && opts.anchor) {\n      this.beginRangeSelection(this.inputs.focusManager.prevActiveIndex());\n    }\n\n    const itemsInRange = this._getItemsFromIndex(this.rangeStartIndex());\n    const itemsOutOfRange = this._getItemsFromIndex(this.rangeEndIndex()).filter(\n      i => !itemsInRange.includes(i),\n    );\n\n    for (const item of itemsOutOfRange) {\n      this.deselect(item);\n    }\n\n    for (const item of itemsInRange) {\n      this.select(item, {anchor: false});\n    }\n\n    if (itemsInRange.length) {\n      const item = itemsInRange.pop();\n      const index = this.inputs.items().findIndex(i => i === item);\n      this.rangeEndIndex.set(index);\n    }\n  }\n\n  /** Marks the given index as the start of a range selection. */\n  beginRangeSelection(index: number = this.inputs.focusManager.activeIndex()) {\n    this.rangeStartIndex.set(index);\n    this.rangeEndIndex.set(index);\n  }\n\n  /** Returns the items in the list starting from the given index.  */\n  private _getItemsFromIndex(index: number) {\n    if (index === -1) {\n      return [];\n    }\n\n    const upper = Math.max(this.inputs.focusManager.activeIndex(), index);\n    const lower = Math.min(this.inputs.focusManager.activeIndex(), index);\n\n    const items = [];\n    for (let i = lower; i <= upper; i++) {\n      items.push(this.inputs.items()[i]);\n    }\n\n    if (this.inputs.focusManager.activeIndex() < index) {\n      return items.reverse();\n    }\n\n    return items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../signal-like/signal-like';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\n\n/**\n * Represents an item in a collection, such as a listbox option, than can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadItem extends ListFocusItem {\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n}\n\n/**\n * Represents the required inputs for a collection that contains items that can be navigated to by\n * typeahead.\n */\nexport interface ListTypeaheadInputs<T extends ListTypeaheadItem> extends ListFocusInputs<T> {\n  /** The amount of time before the typeahead search is reset. */\n  typeaheadDelay: SignalLike<number>;\n}\n\n/** Controls typeahead for a list of items. */\nexport class ListTypeahead<T extends ListTypeaheadItem> {\n  /** A reference to the timeout for resetting the typeahead search. */\n  timeout?: ReturnType<typeof setTimeout> | undefined;\n\n  /** The focus controller of the parent list. */\n  focusManager: ListFocus<T>;\n\n  /** Whether the user is actively typing a typeahead search query. */\n  isTyping = computed(() => this._query().length > 0);\n\n  /** Keeps track of the characters that typeahead search is being called with. */\n  private _query = signal('');\n\n  /** The index where that the typeahead search was initiated from. */\n  private _startIndex = signal<number | undefined>(undefined);\n\n  constructor(readonly inputs: ListTypeaheadInputs<T> & {focusManager: ListFocus<T>}) {\n    this.focusManager = inputs.focusManager;\n  }\n\n  /** Performs a typeahead search, appending the given character to the search string. */\n  search(char: string): boolean {\n    if (char.length !== 1) {\n      return false;\n    }\n\n    if (!this.isTyping() && char === ' ') {\n      return false;\n    }\n\n    if (this._startIndex() === undefined) {\n      this._startIndex.set(this.focusManager.activeIndex());\n    }\n\n    clearTimeout(this.timeout);\n    this._query.update(q => q + char.toLowerCase());\n    const item = this._getItem();\n\n    if (item) {\n      this.focusManager.focus(item);\n    }\n\n    this.timeout = setTimeout(() => {\n      this._query.set('');\n      this._startIndex.set(undefined);\n    }, this.inputs.typeaheadDelay() * 1000);\n\n    return true;\n  }\n\n  /**\n   * Returns the first item whose search term matches the\n   * current query starting from the the current anchor index.\n   */\n  private _getItem() {\n    let items = this.focusManager.inputs.items();\n    const after = items.slice(this._startIndex()! + 1);\n    const before = items.slice(0, this._startIndex()!);\n    items = after.concat(before);\n    items.push(this.inputs.items()[this._startIndex()!]);\n\n    const focusableItems = [];\n    for (const item of items) {\n      if (this.focusManager.isFocusable(item)) {\n        focusableItems.push(item);\n      }\n    }\n\n    return focusableItems.find(i => i.searchTerm().toLowerCase().startsWith(this._query()));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../list-focus/list-focus';\nimport {\n  ListNavigation,\n  ListNavigationInputs,\n  ListNavigationItem,\n} from '../list-navigation/list-navigation';\nimport {\n  ListSelection,\n  ListSelectionInputs,\n  ListSelectionItem,\n} from '../list-selection/list-selection';\nimport {\n  ListTypeahead,\n  ListTypeaheadInputs,\n  ListTypeaheadItem,\n} from '../list-typeahead/list-typeahead';\n\n/** The operations that the list can perform after navigation. */\ninterface NavOptions {\n  toggle?: boolean;\n  select?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n  focusElement?: boolean;\n}\n\n/** Represents an item in the list. */\nexport type ListItem<V> = ListTypeaheadItem &\n  ListNavigationItem &\n  ListSelectionItem<V> &\n  ListFocusItem;\n\n/** The necessary inputs for the list behavior. */\nexport type ListInputs<T extends ListItem<V>, V> = ListFocusInputs<T> &\n  ListNavigationInputs<T> &\n  ListSelectionInputs<T, V> &\n  ListTypeaheadInputs<T>;\n\n/** Controls the state of a list. */\nexport class List<T extends ListItem<V>, V> {\n  /** Controls navigation for the list. */\n  navigationBehavior: ListNavigation<T>;\n\n  /** Controls selection for the list. */\n  selectionBehavior: ListSelection<T, V>;\n\n  /** Controls typeahead for the list. */\n  typeaheadBehavior: ListTypeahead<T>;\n\n  /** Controls focus for the list. */\n  focusBehavior: ListFocus<T>;\n\n  /** Whether the list is disabled. */\n  disabled = computed(() => this.focusBehavior.isListDisabled());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.focusBehavior.getActiveDescendant());\n\n  /** The tabindex of the list. */\n  tabindex = computed(() => this.focusBehavior.getListTabindex());\n\n  /** The index of the currently active item in the list. */\n  activeIndex = computed(() => this.focusBehavior.activeIndex());\n\n  /**\n   * The uncommitted index for selecting a range of options.\n   *\n   * NOTE: This is subtly distinct from the \"rangeStartIndex\" in the ListSelection behavior.\n   * The anchorIndex does not necessarily represent the start of a range, but represents the most\n   * recent index where the user showed intent to begin a range selection. Usually, this is wherever\n   * the user most recently pressed the \"Shift\" key, but if the user presses shift + space to select\n   * from the anchor, the user is not intending to start a new range from this index.\n   *\n   * In other words, \"rangeStartIndex\" is only set when a user commits to starting a range selection\n   * while \"anchorIndex\" is set whenever a user indicates they may be starting a range selection.\n   */\n  private _anchorIndex = signal(0);\n\n  /** Whether the list should wrap. Used to disable wrapping while range selecting. */\n  private _wrap = signal(true);\n\n  constructor(readonly inputs: ListInputs<T, V>) {\n    this.focusBehavior = new ListFocus(inputs);\n    this.selectionBehavior = new ListSelection({...inputs, focusManager: this.focusBehavior});\n    this.typeaheadBehavior = new ListTypeahead({...inputs, focusManager: this.focusBehavior});\n    this.navigationBehavior = new ListNavigation({\n      ...inputs,\n      focusManager: this.focusBehavior,\n      wrap: computed(() => this._wrap() && this.inputs.wrap()),\n    });\n  }\n\n  /** Returns the tabindex for the given item. */\n  getItemTabindex(item: T) {\n    return this.focusBehavior.getItemTabindex(item);\n  }\n\n  /** Navigates to the first option in the list. */\n  first(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.first(opts));\n  }\n\n  /** Navigates to the last option in the list. */\n  last(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.last(opts));\n  }\n\n  /** Navigates to the next option in the list. */\n  next(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.next(opts));\n  }\n\n  /** Navigates to the previous option in the list. */\n  prev(opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.prev(opts));\n  }\n\n  /** Navigates to the given item in the list. */\n  goto(item: T, opts?: NavOptions) {\n    this._navigate(opts, () => this.navigationBehavior.goto(item, opts));\n  }\n\n  /** Removes focus from the list. */\n  unfocus() {\n    this.inputs.activeItem.set(undefined);\n  }\n\n  /** Marks the given index as the potential start of a range selection. */\n  anchor(index: number) {\n    this._anchorIndex.set(index);\n  }\n\n  /** Handles typeahead search navigation for the list. */\n  search(char: string, opts?: NavOptions) {\n    this._navigate(opts, () => this.typeaheadBehavior.search(char));\n  }\n\n  /** Checks if the list is currently typing for typeahead search. */\n  isTyping() {\n    return this.typeaheadBehavior.isTyping();\n  }\n\n  /** Selects the currently active item in the list. */\n  select(item?: T) {\n    this.selectionBehavior.select(item);\n  }\n\n  /** Sets the selection to only the current active item. */\n  selectOne() {\n    this.selectionBehavior.selectOne();\n  }\n\n  /** Deselects the currently active item in the list. */\n  deselect() {\n    this.selectionBehavior.deselect();\n  }\n\n  /** Deselects all items in the list. */\n  deselectAll() {\n    this.selectionBehavior.deselectAll();\n  }\n\n  /** Toggles the currently active item in the list. */\n  toggle() {\n    this.selectionBehavior.toggle();\n  }\n\n  /** Toggles the currently active item in the list, deselecting all other items. */\n  toggleOne() {\n    this.selectionBehavior.toggleOne();\n  }\n\n  /** Toggles the selection of all items in the list. */\n  toggleAll() {\n    this.selectionBehavior.toggleAll();\n  }\n\n  /** Checks if the given item is able to receive focus. */\n  isFocusable(item: T) {\n    return this.focusBehavior.isFocusable(item);\n  }\n\n  /** Handles updating selection for the list. */\n  updateSelection(opts: NavOptions = {anchor: true}) {\n    if (opts.toggle) {\n      this.selectionBehavior.toggle();\n    }\n    if (opts.select) {\n      this.selectionBehavior.select();\n    }\n    if (opts.selectOne) {\n      this.selectionBehavior.selectOne();\n    }\n    if (opts.selectRange) {\n      this.selectionBehavior.selectRange();\n    }\n    if (!opts.anchor) {\n      this.anchor(this.selectionBehavior.rangeStartIndex());\n    }\n  }\n\n  /**\n   * Safely performs a navigation operation.\n   *\n   * Handles conditionally disabling wrapping for when a navigation\n   * operation is occurring while the user is selecting a range of options.\n   *\n   * Handles boilerplate calling of focus & selection operations. Also ensures these\n   * additional operations are only called if the navigation operation moved focus to a new option.\n   */\n  private _navigate(opts: NavOptions = {}, operation: () => boolean) {\n    if (opts?.selectRange) {\n      this._wrap.set(false);\n      this.selectionBehavior.rangeStartIndex.set(this._anchorIndex());\n    }\n\n    const moved = operation();\n\n    if (moved) {\n      this.updateSelection(opts);\n    }\n\n    this._wrap.set(true);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OptionPattern} from './option';\nimport {KeyboardEventManager, PointerEventManager, Modifier} from '../behaviors/event-manager';\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs} from '../behaviors/list/list';\n\n/** Represents the required inputs for a listbox. */\nexport type ListboxInputs<V> = ListInputs<OptionPattern<V>, V> & {\n  /** A unique identifier for the listbox. */\n  id: SignalLike<string>;\n\n  /** Whether the listbox is readonly. */\n  readonly: SignalLike<boolean>;\n};\n\n/** Controls the state of a listbox. */\nexport class ListboxPattern<V> {\n  listBehavior: List<OptionPattern<V>, V>;\n\n  /** Whether the list is vertically or horizontally oriented. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether the listbox is disabled. */\n  disabled = computed(() => this.listBehavior.disabled());\n\n  /** Whether the listbox is readonly. */\n  readonly: SignalLike<boolean>;\n\n  /** The tabindex of the listbox. */\n  tabindex: SignalLike<-1 | 0> = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active item. */\n  activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** Whether multiple items in the list can be selected at once. */\n  multi: SignalLike<boolean>;\n\n  /** The number of items in the listbox. */\n  setsize = computed(() => this.inputs.items().length);\n\n  /** Whether the listbox selection follows focus. */\n  followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** Whether the listbox should wrap. Used to disable wrapping while range selecting. */\n  wrap = signal(true);\n\n  /** The key used to navigate to the previous item in the list. */\n  prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next item in the list. */\n  nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/;\n\n  /** The keydown event manager for the listbox. */\n  keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    if (this.readonly()) {\n      return manager\n        .on(this.prevKey, () => this.listBehavior.prev())\n        .on(this.nextKey, () => this.listBehavior.next())\n        .on('Home', () => this.listBehavior.first())\n        .on('End', () => this.listBehavior.last())\n        .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n    }\n\n    if (!this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.listBehavior.prev())\n        .on(this.nextKey, () => this.listBehavior.next())\n        .on('Home', () => this.listBehavior.first())\n        .on('End', () => this.listBehavior.last())\n        .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n    }\n\n    if (this.followFocus()) {\n      manager\n        .on(this.prevKey, () => this.listBehavior.prev({selectOne: true}))\n        .on(this.nextKey, () => this.listBehavior.next({selectOne: true}))\n        .on('Home', () => this.listBehavior.first({selectOne: true}))\n        .on('End', () => this.listBehavior.last({selectOne: true}))\n        .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key, {selectOne: true}));\n    }\n\n    if (this.inputs.multi()) {\n      manager\n        .on(Modifier.Any, 'Shift', () => this.listBehavior.anchor(this.listBehavior.activeIndex()))\n        .on(Modifier.Shift, this.prevKey, () => this.listBehavior.prev({selectRange: true}))\n        .on(Modifier.Shift, this.nextKey, () => this.listBehavior.next({selectRange: true}))\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'Home', () =>\n          this.listBehavior.first({selectRange: true, anchor: false}),\n        )\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'End', () =>\n          this.listBehavior.last({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, 'Enter', () =>\n          this.listBehavior.updateSelection({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, this.dynamicSpaceKey, () =>\n          this.listBehavior.updateSelection({selectRange: true, anchor: false}),\n        );\n    }\n\n    if (!this.followFocus() && this.inputs.multi()) {\n      manager\n        .on(this.dynamicSpaceKey, () => this.listBehavior.toggle())\n        .on('Enter', () => this.listBehavior.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => this.listBehavior.toggleAll());\n    }\n\n    if (!this.followFocus() && !this.inputs.multi()) {\n      manager.on(this.dynamicSpaceKey, () => this.listBehavior.toggleOne());\n      manager.on('Enter', () => this.listBehavior.toggleOne());\n    }\n\n    if (this.inputs.multi() && this.followFocus()) {\n      manager\n        .on([Modifier.Ctrl, Modifier.Meta], this.prevKey, () => this.listBehavior.prev())\n        .on([Modifier.Ctrl, Modifier.Meta], this.nextKey, () => this.listBehavior.next())\n        .on([Modifier.Ctrl, Modifier.Meta], ' ', () => this.listBehavior.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Enter', () => this.listBehavior.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Home', () => this.listBehavior.first())\n        .on([Modifier.Ctrl, Modifier.Meta], 'End', () => this.listBehavior.last())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => {\n          this.listBehavior.toggleAll();\n          this.listBehavior.select(); // Ensure the currect option remains selected.\n        });\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the listbox. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.readonly()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!));\n    }\n\n    if (this.multi()) {\n      manager.on(Modifier.Shift, e =>\n        this.listBehavior.goto(this._getItem(e)!, {selectRange: true}),\n      );\n    }\n\n    if (!this.multi() && this.followFocus()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!, {selectOne: true}));\n    }\n\n    if (!this.multi() && !this.followFocus()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!, {toggle: true}));\n    }\n\n    if (this.multi() && this.followFocus()) {\n      return manager\n        .on(e => this.listBehavior.goto(this._getItem(e)!, {selectOne: true}))\n        .on(Modifier.Ctrl, e => this.listBehavior.goto(this._getItem(e)!, {toggle: true}));\n    }\n\n    if (this.multi() && !this.followFocus()) {\n      return manager.on(e => this.listBehavior.goto(this._getItem(e)!, {toggle: true}));\n    }\n\n    return manager;\n  });\n\n  constructor(readonly inputs: ListboxInputs<V>) {\n    this.readonly = inputs.readonly;\n    this.orientation = inputs.orientation;\n    this.multi = inputs.multi;\n    this.listBehavior = new List(inputs);\n  }\n\n  /** Returns a set of violations */\n  validate(): string[] {\n    const violations: string[] = [];\n\n    if (!this.inputs.multi() && this.inputs.value().length > 1) {\n      violations.push(\n        `A single-select listbox should not have multiple selected options. Selected options: ${this.inputs.value().join(', ')}`,\n      );\n    }\n\n    return violations;\n  }\n\n  /** Handles keydown events for the listbox. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /**\n   * Sets the listbox to it's default initial state.\n   *\n   * Sets the active index of the listbox to the first focusable selected\n   * item if one exists. Otherwise, sets focus to the first focusable item.\n   *\n   * This method should be called once the listbox and it's options are properly initialized,\n   * meaning the ListboxPattern and OptionPatterns should have references to each other before this\n   * is called.\n   */\n  setDefaultState() {\n    let firstItem: OptionPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.listBehavior.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n        if (item.selected()) {\n          this.inputs.activeItem.set(item);\n          return;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeItem.set(firstItem);\n    }\n  }\n\n  protected _getItem(e: PointerEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"option\"]');\n    return this.inputs.items().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\n\n/**\n * Represents the properties exposed by a listbox that need to be accessed by an option.\n * This exists to avoid circular dependency errors between the listbox and option.\n */\ninterface ListboxPattern<V> {\n  inputs: ListInputs<OptionPattern<V>, V>;\n  listBehavior: List<OptionPattern<V>, V>;\n}\n\n/** Represents the required inputs for an option in a listbox. */\nexport interface OptionInputs<V> extends Omit<ListItem<V>, 'index' | 'selectable'> {\n  listbox: SignalLike<ListboxPattern<V> | undefined>;\n}\n\n/** Represents an option in a listbox. */\nexport class OptionPattern<V> {\n  /** A unique identifier for the option. */\n  id: SignalLike<string>;\n\n  /** The value of the option. */\n  value: SignalLike<V>;\n\n  /** The position of the option in the list. */\n  index = computed(() => this.listbox()?.inputs.items().indexOf(this) ?? -1);\n\n  /** Whether the option is active. */\n  active = computed(() => this.listbox()?.inputs.activeItem() === this);\n\n  /** Whether the option is selected. */\n  selected = computed(() => this.listbox()?.inputs.value().includes(this.value()));\n\n  /** Whether the option is selectable. */\n  selectable = () => true;\n\n  /** Whether the option is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The text used by the typeahead search. */\n  searchTerm: SignalLike<string>;\n\n  /** A reference to the parent listbox. */\n  listbox: SignalLike<ListboxPattern<V> | undefined>;\n\n  /** The tabindex of the option. */\n  tabindex = computed(() => this.listbox()?.listBehavior.getItemTabindex(this));\n\n  /** The html element that should receive focus. */\n  element: SignalLike<HTMLElement>;\n\n  constructor(args: OptionInputs<V>) {\n    this.id = args.id;\n    this.value = args.value;\n    this.listbox = args.listbox;\n    this.element = args.element;\n    this.disabled = args.disabled;\n    this.searchTerm = args.searchTerm;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {ListboxInputs, ListboxPattern} from './listbox';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {OptionPattern} from './option';\nimport {ComboboxPattern, ComboboxListboxControls} from '../combobox/combobox';\n\nexport type ComboboxListboxInputs<V> = ListboxInputs<V> & {\n  /** The combobox controlling the listbox. */\n  combobox: SignalLike<ComboboxPattern<OptionPattern<V>, V> | undefined>;\n};\n\nexport class ComboboxListboxPattern<V>\n  extends ListboxPattern<V>\n  implements ComboboxListboxControls<OptionPattern<V>, V>\n{\n  /** A unique identifier for the popup. */\n  id = computed(() => this.inputs.id());\n\n  /** The ARIA role for the listbox. */\n  role = computed(() => 'listbox' as const);\n\n  /** The id of the active (focused) item in the listbox. */\n  activeId = computed(() => this.listBehavior.activedescendant());\n\n  /** The list of options in the listbox. */\n  items: SignalLike<OptionPattern<V>[]> = computed(() => this.inputs.items());\n\n  /** The tabindex for the listbox. Always -1 because the combobox handles focus. */\n  override tabindex: SignalLike<-1 | 0> = () => -1;\n\n  constructor(override readonly inputs: ComboboxListboxInputs<V>) {\n    if (inputs.combobox()) {\n      inputs.multi = () => false;\n      inputs.focusMode = () => 'activedescendant';\n      inputs.element = inputs.combobox()!.inputs.inputEl;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The combobox handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The combobox handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Noop. The combobox controls the open state. */\n  override setDefaultState(): void {}\n\n  /** Navigates to the specified item in the listbox. */\n  focus = (item: OptionPattern<V>) => this.listBehavior.goto(item);\n\n  /** Navigates to the next focusable item in the listbox. */\n  next = () => this.listBehavior.next();\n\n  /** Navigates to the previous focusable item in the listbox. */\n  prev = () => this.listBehavior.prev();\n\n  /** Navigates to the last focusable item in the listbox. */\n  last = () => this.listBehavior.last();\n\n  /** Navigates to the first focusable item in the listbox. */\n  first = () => this.listBehavior.first();\n\n  /** Unfocuses the currently focused item in the listbox. */\n  unfocus = () => this.listBehavior.unfocus();\n\n  /** Selects the specified item in the listbox. */\n  select = (item?: OptionPattern<V>) => this.listBehavior.select(item);\n\n  /** Clears the selection in the listbox. */\n  clearSelection = () => this.listBehavior.deselectAll();\n\n  /** Retrieves the OptionPattern associated with a pointer event. */\n  getItem = (e: PointerEvent) => this._getItem(e);\n\n  /** Retrieves the currently selected item in the listbox. */\n  getSelectedItem = () => this.inputs.items().find(i => i.selected());\n\n  /** Sets the value of the combobox listbox. */\n  setValue = (value: V | undefined) => this.inputs.value.set(value ? [value] : []);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, Signal, signal} from '@angular/core';\nimport {KeyboardEventManager} from '../behaviors/event-manager';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\n\n/** The inputs for the MenuBarPattern class. */\nexport interface MenuBarInputs<V> extends Omit<ListInputs<MenuItemPattern<V>, V>, 'disabled'> {\n  /** The menu items contained in the menu. */\n  items: SignalLike<MenuItemPattern<V>[]>;\n\n  /** Callback function triggered when a menu item is selected. */\n  onSubmit?: (value: V) => void;\n}\n\n/** The inputs for the MenuPattern class. */\nexport interface MenuInputs<V>\n  extends Omit<ListInputs<MenuItemPattern<V>, V>, 'value' | 'disabled'> {\n  /** The unique ID of the menu. */\n  id: SignalLike<string>;\n\n  /** The menu items contained in the menu. */\n  items: SignalLike<MenuItemPattern<V>[]>;\n\n  /** A reference to the parent menu or menu trigger. */\n  parent: SignalLike<MenuTriggerPattern<V> | MenuItemPattern<V> | undefined>;\n\n  /** Callback function triggered when a menu item is selected. */\n  onSubmit?: (value: V) => void;\n}\n\n/** The inputs for the MenuTriggerPattern class. */\nexport interface MenuTriggerInputs<V> {\n  /** A reference to the menu trigger element. */\n  element: SignalLike<HTMLElement | undefined>;\n\n  /** A reference to the submenu associated with the menu trigger. */\n  submenu: SignalLike<MenuPattern<V> | undefined>;\n\n  /** Callback function triggered when a menu item is selected. */\n  onSubmit?: (value: V) => void;\n}\n\n/** The inputs for the MenuItemPattern class. */\nexport interface MenuItemInputs<V> extends Omit<ListItem<V>, 'index' | 'selectable'> {\n  /** A reference to the parent menu or menu trigger. */\n  parent: SignalLike<MenuPattern<V> | MenuBarPattern<V> | undefined>;\n\n  /** A reference to the submenu associated with the menu item. */\n  submenu: SignalLike<MenuPattern<V> | undefined>;\n}\n\n/** The menu ui pattern class. */\nexport class MenuPattern<V> {\n  /** The unique ID of the menu. */\n  id: SignalLike<string>;\n\n  /** The role of the menu. */\n  role = () => 'menu';\n\n  /** Whether the menu is visible. */\n  isVisible = computed(() => (this.inputs.parent() ? !!this.inputs.parent()?.expanded() : true));\n\n  /** Controls list behavior for the menu items. */\n  listBehavior: List<MenuItemPattern<V>, V>;\n\n  /** Whether the menu or any of its child elements are currently focused. */\n  isFocused = signal(false);\n\n  /** Whether the menu has received focus. */\n  hasBeenFocused = signal(false);\n\n  /** Whether the menu should be focused on mouse over. */\n  shouldFocus = computed(() => {\n    const root = this.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      return true;\n    }\n\n    if (root instanceof MenuBarPattern || root instanceof MenuPattern) {\n      return root.isFocused();\n    }\n\n    return false;\n  });\n\n  /** The key used to expand sub-menus. */\n  private _expandKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key used to collapse sub-menus. */\n  private _collapseKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/;\n\n  /** The root of the menu. */\n  root: Signal<MenuTriggerPattern<V> | MenuBarPattern<V> | MenuPattern<V> | undefined> = computed(\n    () => {\n      const parent = this.inputs.parent();\n\n      if (!parent) {\n        return this;\n      }\n\n      if (parent instanceof MenuTriggerPattern) {\n        return parent;\n      }\n\n      const grandparent = parent.inputs.parent();\n\n      if (grandparent instanceof MenuBarPattern) {\n        return grandparent;\n      }\n\n      return grandparent?.root();\n    },\n  );\n\n  /** Handles keyboard events for the menu. */\n  keydownManager = computed(() => {\n    return new KeyboardEventManager()\n      .on('ArrowDown', () => this.next())\n      .on('ArrowUp', () => this.prev())\n      .on('Home', () => this.first())\n      .on('End', () => this.last())\n      .on('Enter', () => this.trigger())\n      .on('Escape', () => this.closeAll())\n      .on(this._expandKey, () => this.expand())\n      .on(this._collapseKey, () => this.collapse())\n      .on(this.dynamicSpaceKey, () => this.trigger())\n      .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n  });\n\n  constructor(readonly inputs: MenuInputs<V>) {\n    this.id = inputs.id;\n    this.listBehavior = new List<MenuItemPattern<V>, V>({\n      ...inputs,\n      value: signal([]),\n      disabled: () => false,\n    });\n  }\n\n  /** Sets the default state for the menu. */\n  setDefaultState() {\n    if (!this.inputs.parent()) {\n      this.inputs.activeItem.set(this.inputs.items()[0]);\n    }\n  }\n\n  /** Handles keyboard events for the menu. */\n  onKeydown(event: KeyboardEvent) {\n    this.keydownManager().handle(event);\n  }\n\n  /** Handles mouseover events for the menu. */\n  onMouseOver(event: MouseEvent) {\n    if (!this.isVisible()) {\n      return;\n    }\n\n    const item = this.inputs.items().find(i => i.element()?.contains(event.target as Node));\n\n    if (!item) {\n      return;\n    }\n\n    const activeItem = this?.inputs.activeItem();\n\n    if (activeItem && activeItem !== item) {\n      activeItem.close();\n    }\n\n    if (item.expanded() && item.submenu()?.inputs.activeItem()) {\n      item.submenu()?.inputs.activeItem()?.close();\n      item.submenu()?.listBehavior.unfocus();\n    }\n\n    item.open();\n    this.listBehavior.goto(item, {focusElement: this.shouldFocus()});\n  }\n\n  /** Handles mouseout events for the menu. */\n  onMouseOut(event: MouseEvent) {\n    if (this.isFocused()) {\n      return;\n    }\n\n    const root = this.root();\n    const parent = this.inputs.parent();\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (!root || !parent || parent instanceof MenuTriggerPattern) {\n      return;\n    }\n\n    const grandparent = parent.inputs.parent();\n\n    if (!grandparent || grandparent instanceof MenuBarPattern) {\n      return;\n    }\n\n    if (!grandparent.inputs.element()?.contains(relatedTarget)) {\n      parent.close();\n    }\n  }\n\n  /** Handles click events for the menu. */\n  onClick(event: MouseEvent) {\n    const relatedTarget = event.target as Node | null;\n    const item = this.inputs.items().find(i => i.element()?.contains(relatedTarget));\n\n    if (item) {\n      item.open();\n      this.listBehavior.goto(item);\n      this.submit(item);\n    }\n  }\n\n  /** Handles focusin events for the menu. */\n  onFocusIn() {\n    this.isFocused.set(true);\n    this.hasBeenFocused.set(true);\n  }\n\n  /** Handles the focusout event for the menu. */\n  onFocusOut(event: FocusEvent) {\n    const parent = this.inputs.parent();\n    const parentEl = parent?.inputs.element();\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (!relatedTarget) {\n      this.isFocused.set(false);\n      this.inputs.parent()?.close({refocus: true});\n    }\n\n    if (parent instanceof MenuItemPattern) {\n      const grandparent = parent.inputs.parent();\n      const siblings = grandparent?.inputs.items().filter(i => i !== parent);\n      const item = siblings?.find(i => i.element().contains(relatedTarget));\n\n      if (item) {\n        return;\n      }\n    }\n\n    if (\n      this.isVisible() &&\n      !parentEl?.contains(relatedTarget) &&\n      !this.inputs.element()?.contains(relatedTarget)\n    ) {\n      this.isFocused.set(false);\n      this.inputs.parent()?.close();\n    }\n  }\n\n  /** Focuses the previous menu item. */\n  prev() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.prev();\n  }\n\n  /** Focuses the next menu item. */\n  next() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.next();\n  }\n\n  /** Focuses the first menu item. */\n  first() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.first();\n  }\n\n  /** Focuses the last menu item. */\n  last() {\n    this.inputs.activeItem()?.close();\n    this.listBehavior.last();\n  }\n\n  /** Triggers the active menu item. */\n  trigger() {\n    this.inputs.activeItem()?.hasPopup()\n      ? this.inputs.activeItem()?.open({first: true})\n      : this.submit();\n  }\n\n  /** Submits the menu. */\n  submit(item = this.inputs.activeItem()) {\n    const root = this.root();\n\n    if (item && !item.disabled()) {\n      const isMenu = root instanceof MenuPattern;\n      const isMenuBar = root instanceof MenuBarPattern;\n      const isMenuTrigger = root instanceof MenuTriggerPattern;\n\n      if (!item.submenu() && (isMenuTrigger || isMenuBar)) {\n        root.close({refocus: true});\n        root?.inputs.onSubmit?.(item.value());\n      }\n\n      if (!item.submenu() && isMenu) {\n        root.inputs.activeItem()?.close({refocus: true});\n        root?.inputs.onSubmit?.(item.value());\n      }\n    }\n  }\n\n  /** Collapses the current menu or focuses the previous item in the menubar. */\n  collapse() {\n    const root = this.root();\n    const parent = this.inputs.parent();\n\n    if (parent instanceof MenuItemPattern && !(parent.inputs.parent() instanceof MenuBarPattern)) {\n      parent.close({refocus: true});\n    } else if (root instanceof MenuBarPattern) {\n      root.prev();\n    }\n  }\n\n  /** Expands the current menu or focuses the next item in the menubar. */\n  expand() {\n    const root = this.root();\n    const activeItem = this.inputs.activeItem();\n\n    if (activeItem?.submenu()) {\n      activeItem.open({first: true});\n    } else if (root instanceof MenuBarPattern) {\n      root.next();\n    }\n  }\n\n  /** Closes the menu and all parent menus. */\n  closeAll() {\n    const root = this.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      root.close({refocus: true});\n    }\n\n    if (root instanceof MenuBarPattern) {\n      root.close();\n    }\n\n    if (root instanceof MenuPattern) {\n      root.inputs.activeItem()?.close({refocus: true});\n    }\n  }\n}\n\n/** The menubar ui pattern class. */\nexport class MenuBarPattern<V> {\n  /** Controls list behavior for the menu items. */\n  listBehavior: List<MenuItemPattern<V>, V>;\n\n  /** The key used to navigate to the next item. */\n  private _nextKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key used to navigate to the previous item. */\n  private _previousKey = computed(() => {\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** The regexp used to decide if a key should trigger typeahead. */\n  typeaheadRegexp = /^.$/;\n\n  /** Whether the menubar or any of its children are currently focused. */\n  isFocused = signal(false);\n\n  /** Whether the menubar has been focused. */\n  hasBeenFocused = signal(false);\n\n  /** Handles keyboard events for the menu. */\n  keydownManager = computed(() => {\n    return new KeyboardEventManager()\n      .on(this._nextKey, () => this.next())\n      .on(this._previousKey, () => this.prev())\n      .on('End', () => this.listBehavior.last())\n      .on('Home', () => this.listBehavior.first())\n      .on('Enter', () => this.inputs.activeItem()?.open({first: true}))\n      .on('ArrowUp', () => this.inputs.activeItem()?.open({last: true}))\n      .on('ArrowDown', () => this.inputs.activeItem()?.open({first: true}))\n      .on(this.dynamicSpaceKey, () => this.inputs.activeItem()?.open({first: true}))\n      .on(this.typeaheadRegexp, e => this.listBehavior.search(e.key));\n  });\n\n  constructor(readonly inputs: MenuBarInputs<V>) {\n    this.listBehavior = new List<MenuItemPattern<V>, V>({...inputs, disabled: () => false});\n  }\n\n  /** Sets the default state for the menubar. */\n  setDefaultState() {\n    this.inputs.activeItem.set(this.inputs.items()[0]);\n  }\n\n  /** Handles keyboard events for the menu. */\n  onKeydown(event: KeyboardEvent) {\n    this.keydownManager().handle(event);\n  }\n\n  /** Handles click events for the menu bar. */\n  onClick(event: MouseEvent) {\n    const item = this.inputs.items().find(i => i.element()?.contains(event.target as Node));\n\n    if (!item) {\n      return;\n    }\n\n    this.goto(item);\n    item.expanded() ? item.close() : item.open();\n  }\n\n  /** Handles mouseover events for the menu bar. */\n  onMouseOver(event: MouseEvent) {\n    const item = this.inputs.items().find(i => i.element()?.contains(event.target as Node));\n\n    if (item) {\n      this.goto(item, {focusElement: this.isFocused()});\n    }\n  }\n\n  /** Handles focusin events for the menu bar. */\n  onFocusIn() {\n    this.isFocused.set(true);\n    this.hasBeenFocused.set(true);\n  }\n\n  /** Handles focusout events for the menu bar. */\n  onFocusOut(event: FocusEvent) {\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (!this.inputs.element()?.contains(relatedTarget)) {\n      this.isFocused.set(false);\n      this.close();\n    }\n  }\n\n  /** Goes to and optionally focuses the specified menu item. */\n  goto(item: MenuItemPattern<V>, opts?: {focusElement?: boolean}) {\n    const prevItem = this.inputs.activeItem();\n    this.listBehavior.goto(item, opts);\n\n    if (prevItem?.expanded()) {\n      prevItem?.close();\n      this.inputs.activeItem()?.open();\n    }\n\n    if (item === prevItem) {\n      if (item.expanded() && item.submenu()?.inputs.activeItem()) {\n        item.submenu()?.inputs.activeItem()?.close();\n        item.submenu()?.listBehavior.unfocus();\n      }\n    }\n  }\n\n  /** Focuses the next menu item. */\n  next() {\n    const prevItem = this.inputs.activeItem();\n    this.listBehavior.next();\n\n    if (prevItem?.expanded()) {\n      prevItem?.close();\n      this.inputs.activeItem()?.open({first: true});\n    }\n  }\n\n  /** Focuses the previous menu item. */\n  prev() {\n    const prevItem = this.inputs.activeItem();\n    this.listBehavior.prev();\n\n    if (prevItem?.expanded()) {\n      prevItem?.close();\n      this.inputs.activeItem()?.open({first: true});\n    }\n  }\n\n  /** Closes the menubar and refocuses the root menu bar item. */\n  close() {\n    this.inputs.activeItem()?.close({refocus: this.isFocused()});\n  }\n}\n\n/** The menu trigger ui pattern class. */\nexport class MenuTriggerPattern<V> {\n  /** Whether the menu is expanded. */\n  expanded = signal(false);\n\n  /** The role of the menu trigger. */\n  role = () => 'button';\n\n  /** Whether the menu trigger has a popup. */\n  hasPopup = () => true;\n\n  /** The submenu associated with the trigger. */\n  submenu: SignalLike<MenuPattern<V> | undefined>;\n\n  /** The tabindex of the menu trigger. */\n  tabindex = computed(() => (this.expanded() && this.submenu()?.inputs.activeItem() ? -1 : 0));\n\n  /** Handles keyboard events for the menu trigger. */\n  keydownManager = computed(() => {\n    return new KeyboardEventManager()\n      .on(' ', () => this.open({first: true}))\n      .on('Enter', () => this.open({first: true}))\n      .on('ArrowDown', () => this.open({first: true}))\n      .on('ArrowUp', () => this.open({last: true}))\n      .on('Escape', () => this.close({refocus: true}));\n  });\n\n  constructor(readonly inputs: MenuTriggerInputs<V>) {\n    this.submenu = this.inputs.submenu;\n  }\n\n  /** Handles keyboard events for the menu trigger. */\n  onKeydown(event: KeyboardEvent) {\n    this.keydownManager().handle(event);\n  }\n\n  /** Handles click events for the menu trigger. */\n  onClick() {\n    this.expanded() ? this.close() : this.open({first: true});\n  }\n\n  /** Handles focusout events for the menu trigger. */\n  onFocusOut(event: FocusEvent) {\n    const element = this.inputs.element();\n    const relatedTarget = event.relatedTarget as Node | null;\n\n    if (\n      this.expanded() &&\n      !element?.contains(relatedTarget) &&\n      !this.inputs.submenu()?.inputs.element()?.contains(relatedTarget)\n    ) {\n      this.close();\n    }\n  }\n\n  /** Opens the menu. */\n  open(opts?: {first?: boolean; last?: boolean}) {\n    this.expanded.set(true);\n\n    if (opts?.first) {\n      this.inputs.submenu()?.first();\n    } else if (opts?.last) {\n      this.inputs.submenu()?.last();\n    }\n  }\n\n  /** Closes the menu. */\n  close(opts: {refocus?: boolean} = {}) {\n    this.expanded.set(false);\n    this.submenu()?.listBehavior.unfocus();\n\n    if (opts.refocus) {\n      this.inputs.element()?.focus();\n    }\n\n    let menuitems = this.inputs.submenu()?.inputs.items() ?? [];\n\n    while (menuitems.length) {\n      const menuitem = menuitems.pop();\n      menuitem?._expanded.set(false);\n      menuitem?.inputs.parent()?.listBehavior.unfocus();\n      menuitems = menuitems.concat(menuitem?.submenu()?.inputs.items() ?? []);\n    }\n  }\n}\n\n/** The menu item ui pattern class. */\nexport class MenuItemPattern<V> implements ListItem<V> {\n  /** The value of the menu item. */\n  value: SignalLike<V>;\n\n  /** The unique ID of the menu item. */\n  id: SignalLike<string>;\n\n  /** Whether the menu item is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The search term for the menu item. */\n  searchTerm: SignalLike<string>;\n\n  /** The element of the menu item. */\n  element: SignalLike<HTMLElement>;\n\n  /** Whether the menu item is active. */\n  isActive = computed(() => this.inputs.parent()?.inputs.activeItem() === this);\n\n  /** The tabindex of the menu item. */\n  tabindex = computed(() => {\n    if (this.submenu() && this.submenu()?.inputs.activeItem()) {\n      return -1;\n    }\n    return this.inputs.parent()?.listBehavior.getItemTabindex(this) ?? -1;\n  });\n\n  /** The position of the menu item in the menu. */\n  index = computed(() => this.inputs.parent()?.inputs.items().indexOf(this) ?? -1);\n\n  /** Whether the menu item is expanded. */\n  expanded = computed(() => (this.submenu() ? this._expanded() : null));\n\n  /** Whether the menu item is expanded. */\n  _expanded = signal(false);\n\n  /** The ID of the menu that the menu item controls. */\n  controls = signal<string | undefined>(undefined);\n\n  /** The role of the menu item. */\n  role = () => 'menuitem';\n\n  /** Whether the menu item has a popup. */\n  hasPopup = computed(() => !!this.submenu());\n\n  /** The submenu associated with the menu item. */\n  submenu: SignalLike<MenuPattern<V> | undefined>;\n\n  /** Whether the menu item is selectable. */\n  selectable: SignalLike<boolean>;\n\n  constructor(readonly inputs: MenuItemInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.submenu = this.inputs.submenu;\n    this.searchTerm = inputs.searchTerm;\n    this.selectable = computed(() => !this.submenu());\n  }\n\n  /** Opens the submenu. */\n  open(opts?: {first?: boolean; last?: boolean}) {\n    this._expanded.set(true);\n\n    if (opts?.first) {\n      this.submenu()?.first();\n    }\n    if (opts?.last) {\n      this.submenu()?.last();\n    }\n  }\n\n  /** Closes the submenu. */\n  close(opts: {refocus?: boolean} = {}) {\n    this._expanded.set(false);\n\n    if (opts.refocus) {\n      this.inputs.parent()?.listBehavior.goto(this);\n    }\n\n    let menuitems = this.inputs.submenu()?.inputs.items() ?? [];\n\n    while (menuitems.length) {\n      const menuitem = menuitems.pop();\n      menuitem?._expanded.set(false);\n      menuitem?.inputs.parent()?.listBehavior.unfocus();\n      menuitems = menuitems.concat(menuitem?.submenu()?.inputs.items() ?? []);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {List, ListInputs} from '../behaviors/list/list';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {RadioButtonPattern} from './radio-button';\n\n/** Represents the required inputs for a radio group. */\nexport type RadioGroupInputs<V> = Omit<\n  ListInputs<RadioButtonPattern<V>, V>,\n  'multi' | 'selectionMode' | 'wrap' | 'typeaheadDelay'\n> & {\n  /** Whether the radio group is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** Whether the radio group is readonly. */\n  readonly: SignalLike<boolean>;\n\n  /** A function that returns the radio button associated with a given element. */\n  getItem: (e: PointerEvent) => RadioButtonPattern<V> | undefined;\n};\n\n/** Controls the state of a radio group. */\nexport class RadioGroupPattern<V> {\n  /** The list behavior for the radio group. */\n  readonly listBehavior: List<RadioButtonPattern<V>, V>;\n\n  /** Whether the radio group is vertically or horizontally oriented. */\n  readonly orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether focus should wrap when navigating. */\n  readonly wrap = signal(false);\n\n  /** The selection strategy used by the radio group. */\n  readonly selectionMode = signal<'follow' | 'explicit'>('follow');\n\n  /** Whether the radio group is disabled. */\n  readonly disabled = computed(() => this.inputs.disabled() || this.listBehavior.disabled());\n\n  /** The currently selected radio button. */\n  readonly selectedItem = computed(() => this.listBehavior.selectionBehavior.selectedItems()[0]);\n\n  /** Whether the radio group is readonly. */\n  readonly readonly = computed(() => this.selectedItem()?.disabled() || this.inputs.readonly());\n\n  /** The tabindex of the radio group. */\n  readonly tabindex = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active radio button (if using activedescendant). */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The key used to navigate to the previous radio button. */\n  private readonly _prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next radio button. */\n  private readonly _nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the radio group. */\n  readonly keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    // Readonly mode allows navigation but not selection changes.\n    if (this.readonly()) {\n      return manager\n        .on(this._prevKey, () => this.listBehavior.prev())\n        .on(this._nextKey, () => this.listBehavior.next())\n        .on('Home', () => this.listBehavior.first())\n        .on('End', () => this.listBehavior.last());\n    }\n\n    // Default behavior: navigate and select on arrow keys, home, end.\n    // Space/Enter also select the focused item.\n    return manager\n      .on(this._prevKey, () => this.listBehavior.prev({selectOne: true}))\n      .on(this._nextKey, () => this.listBehavior.next({selectOne: true}))\n      .on('Home', () => this.listBehavior.first({selectOne: true}))\n      .on('End', () => this.listBehavior.last({selectOne: true}))\n      .on(' ', () => this.listBehavior.selectOne())\n      .on('Enter', () => this.listBehavior.selectOne());\n  });\n\n  /** The pointerdown event manager for the radio group. */\n  readonly pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.readonly()) {\n      // Navigate focus only in readonly mode.\n      return manager.on(e => this.listBehavior.goto(this.inputs.getItem(e)!));\n    }\n\n    // Default behavior: navigate and select on click.\n    return manager.on(e => this.listBehavior.goto(this.inputs.getItem(e)!, {selectOne: true}));\n  });\n\n  constructor(readonly inputs: RadioGroupInputs<V>) {\n    this.orientation = inputs.orientation;\n    this.listBehavior = new List({\n      ...inputs,\n      wrap: this.wrap,\n      selectionMode: this.selectionMode,\n      multi: () => false,\n      typeaheadDelay: () => 0, // Radio groups do not support typeahead.\n    });\n  }\n\n  /** Handles keydown events for the radio group. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerdown events for the radio group. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /**\n   * Sets the radio group to its default initial state.\n   *\n   * Sets the active index to the selected radio button if one exists and is focusable.\n   * Otherwise, sets the active index to the first focusable radio button.\n   */\n  setDefaultState() {\n    let firstItem: RadioButtonPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.listBehavior.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n        if (item.selected()) {\n          this.inputs.activeItem.set(item);\n          return;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeItem.set(firstItem);\n    }\n  }\n\n  /** Validates the state of the radio group and returns a list of accessibility violations. */\n  validate(): string[] {\n    const violations: string[] = [];\n\n    if (this.selectedItem()?.disabled() && this.inputs.skipDisabled()) {\n      violations.push(\n        \"Accessibility Violation: The selected radio button is disabled while 'skipDisabled' is true, making the selection unreachable via keyboard.\",\n      );\n    }\n\n    return violations;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\nimport type {RadioGroupPattern} from './radio-group';\n\n/** Represents the required inputs for a radio button in a radio group. */\nexport interface RadioButtonInputs<V>\n  extends Omit<ListItem<V>, 'searchTerm' | 'index' | 'selectable'> {\n  /** A reference to the parent radio group. */\n  group: SignalLike<RadioGroupPattern<V> | undefined>;\n}\n\n/** Represents a radio button within a radio group. */\nexport class RadioButtonPattern<V> {\n  /** A unique identifier for the radio button. */\n  readonly id: SignalLike<string>;\n\n  /** The value associated with the radio button. */\n  readonly value: SignalLike<V>;\n\n  /** The position of the radio button within the group. */\n  readonly index: SignalLike<number> = computed(\n    () => this.group()?.listBehavior.inputs.items().indexOf(this) ?? -1,\n  );\n\n  /** Whether the radio button is currently the active one (focused). */\n  readonly active = computed(() => this.group()?.listBehavior.inputs.activeItem() === this);\n\n  /** Whether the radio button is selected. */\n  readonly selected: SignalLike<boolean> = computed(\n    () => !!this.group()?.listBehavior.inputs.value().includes(this.value()),\n  );\n\n  /** Whether the radio button is selectable. */\n  readonly selectable = () => true;\n\n  /** Whether the radio button is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** A reference to the parent radio group. */\n  readonly group: SignalLike<RadioGroupPattern<V> | undefined>;\n\n  /** The tabindex of the radio button. */\n  readonly tabindex = computed(() => this.group()?.listBehavior.getItemTabindex(this));\n\n  /** The HTML element associated with the radio button. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** The search term for typeahead. */\n  readonly searchTerm = () => ''; // Radio groups do not support typeahead.\n\n  constructor(readonly inputs: RadioButtonInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.group = inputs.group;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {RadioGroupInputs, RadioGroupPattern} from './radio-group';\nimport type {ToolbarPattern} from '../toolbar/toolbar';\nimport type {ToolbarWidgetGroupControls} from '../toolbar/toolbar-widget-group';\n\n/** Represents the required inputs for a toolbar controlled radio group. */\nexport type ToolbarRadioGroupInputs<V> = RadioGroupInputs<V> & {\n  /** The toolbar controlling the radio group. */\n  toolbar: SignalLike<ToolbarPattern<V> | undefined>;\n};\n\n/** Controls the state of a radio group in a toolbar. */\nexport class ToolbarRadioGroupPattern<V>\n  extends RadioGroupPattern<V>\n  implements ToolbarWidgetGroupControls\n{\n  constructor(override readonly inputs: ToolbarRadioGroupInputs<V>) {\n    if (!!inputs.toolbar()) {\n      inputs.orientation = inputs.toolbar()!.orientation;\n      inputs.skipDisabled = inputs.toolbar()!.skipDisabled;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The toolbar handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The toolbar handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Whether the radio group is currently on the first item. */\n  isOnFirstItem() {\n    return this.listBehavior.navigationBehavior.peekPrev() === undefined;\n  }\n\n  /** Whether the radio group is currently on the last item. */\n  isOnLastItem() {\n    return this.listBehavior.navigationBehavior.peekNext() === undefined;\n  }\n\n  /** Navigates to the next radio button in the group. */\n  next(wrap: boolean) {\n    this.wrap.set(wrap);\n    this.listBehavior.next();\n    this.wrap.set(false);\n  }\n\n  /** Navigates to the previous radio button in the group. */\n  prev(wrap: boolean) {\n    this.wrap.set(wrap);\n    this.listBehavior.prev();\n    this.wrap.set(false);\n  }\n\n  /** Navigates to the first radio button in the group. */\n  first() {\n    this.listBehavior.first();\n  }\n\n  /** Navigates to the last radio button in the group. */\n  last() {\n    this.listBehavior.last();\n  }\n\n  /** Removes focus from the radio group. */\n  unfocus() {\n    this.inputs.activeItem.set(undefined);\n  }\n\n  /** Triggers the action of the currently active radio button in the group. */\n  trigger() {\n    if (this.readonly()) return;\n    this.listBehavior.selectOne();\n  }\n\n  /** Navigates to the radio button targeted by a pointer event. */\n  goto(e: PointerEvent) {\n    this.listBehavior.goto(this.inputs.getItem(e)!, {\n      selectOne: !this.readonly(),\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport type SignalLike<T> = () => T;\n\nexport interface WritableSignalLike<T> extends SignalLike<T> {\n  set(value: T): void;\n  update(updateFn: (value: T) => T): void;\n}\n\n/** Converts a getter setter style signal to a WritableSignalLike. */\nexport function convertGetterSetterToWritableSignalLike<T>(\n  getter: () => T,\n  setter: (v: T) => void,\n): WritableSignalLike<T> {\n  // tslint:disable-next-line:ban Have to use `Object.assign` to preserve the getter function.\n  return Object.assign(getter, {\n    set: setter,\n    update: (updateCallback: (v: T) => T) => setter(updateCallback(getter())),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {computed} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../signal-like/signal-like';\n\n/** Represents an item that can be expanded or collapsed. */\nexport interface ExpansionItem {\n  /** Whether the item is expandable. */\n  expandable: SignalLike<boolean>;\n\n  /** Used to uniquely identify an expansion item. */\n  expansionId: SignalLike<string>;\n\n  /** Whether the expansion is disabled. */\n  disabled: SignalLike<boolean>;\n}\n\nexport interface ExpansionControl extends ExpansionItem {}\n/**\n * Controls a single item's expansion state and interactions,\n * delegating actual state changes to an Expansion manager.\n */\nexport class ExpansionControl {\n  /** Whether this specific item is currently expanded. Derived from the Expansion manager. */\n  readonly isExpanded = computed(() => this.inputs.expansionManager.isExpanded(this));\n\n  /** Whether this item can be expanded. */\n  readonly isExpandable = computed(() => this.inputs.expansionManager.isExpandable(this));\n\n  constructor(readonly inputs: ExpansionItem & {expansionManager: ListExpansion}) {\n    this.expansionId = inputs.expansionId;\n    this.expandable = inputs.expandable;\n    this.disabled = inputs.disabled;\n  }\n\n  /** Requests the Expansion manager to open this item. */\n  open() {\n    this.inputs.expansionManager.open(this);\n  }\n\n  /** Requests the Expansion manager to close this item. */\n  close() {\n    this.inputs.expansionManager.close(this);\n  }\n\n  /** Requests the Expansion manager to toggle this item. */\n  toggle() {\n    this.inputs.expansionManager.toggle(this);\n  }\n}\n\n/** Represents the required inputs for an expansion behavior. */\nexport interface ListExpansionInputs {\n  /** Whether multiple items can be expanded at once. */\n  multiExpandable: SignalLike<boolean>;\n\n  /** An array of ids of the currently expanded items. */\n  expandedIds: WritableSignalLike<string[]>;\n\n  /** An array of expansion items. */\n  items: SignalLike<ExpansionItem[]>;\n\n  /** Whether all expansions are disabled. */\n  disabled: SignalLike<boolean>;\n}\n\n/** Manages the expansion state of a list of items. */\nexport class ListExpansion {\n  /** A signal holding an array of ids of the currently expanded items. */\n  expandedIds: WritableSignalLike<string[]>;\n\n  constructor(readonly inputs: ListExpansionInputs) {\n    this.expandedIds = inputs.expandedIds;\n  }\n\n  /** Opens the specified item. */\n  open(item: ExpansionItem) {\n    if (!this.isExpandable(item)) return;\n    if (this.isExpanded(item)) return;\n    if (!this.inputs.multiExpandable()) {\n      this.closeAll();\n    }\n    this.expandedIds.update(ids => ids.concat(item.expansionId()));\n  }\n\n  /** Closes the specified item. */\n  close(item: ExpansionItem) {\n    if (this.isExpandable(item)) {\n      this.expandedIds.update(ids => ids.filter(id => id !== item.expansionId()));\n    }\n  }\n\n  /** Toggles the expansion state of the specified item. */\n  toggle(item: ExpansionItem) {\n    this.expandedIds().includes(item.expansionId()) ? this.close(item) : this.open(item);\n  }\n\n  /** Opens all focusable items in the list. */\n  openAll() {\n    if (this.inputs.multiExpandable()) {\n      for (const item of this.inputs.items()) {\n        this.open(item);\n      }\n    }\n  }\n\n  /** Closes all focusable items in the list. */\n  closeAll() {\n    for (const item of this.inputs.items()) {\n      this.close(item);\n    }\n  }\n\n  /** Checks whether the specified item is expandable / collapsible. */\n  isExpandable(item: ExpansionItem) {\n    return !this.inputs.disabled() && !item.disabled() && item.expandable();\n  }\n\n  /** Checks whether the specified item is currently expanded. */\n  isExpanded(item: ExpansionItem): boolean {\n    return this.expandedIds().includes(item.expansionId());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../signal-like/signal-like';\n\n/** Represents the required inputs for the label control. */\nexport interface LabelControlInputs {\n  /** The default `aria-labelledby` ids. */\n  defaultLabelledBy: SignalLike<string[]>;\n}\n\n/** Represents the optional inputs for the label control. */\nexport interface LabelControlOptionalInputs {\n  /** The `aria-label`. */\n  label?: SignalLike<string | undefined>;\n\n  /** The user-provided `aria-labelledby` ids. */\n  labelledBy?: SignalLike<string[]>;\n}\n\n/** Controls label and description of an element. */\nexport class LabelControl {\n  /** The `aria-label`. */\n  readonly label = computed(() => this.inputs.label?.());\n\n  /** The `aria-labelledby` ids. */\n  readonly labelledBy = computed(() => {\n    const label = this.label();\n    const labelledBy = this.inputs.labelledBy?.();\n    const defaultLabelledBy = this.inputs.defaultLabelledBy();\n\n    if (labelledBy && labelledBy.length > 0) {\n      return labelledBy;\n    }\n\n    // If an aria-label is provided by developers, do not set aria-labelledby with the\n    // defaultLabelledBy value because if both attributes are set, aria-labelledby will be used.\n    if (label) {\n      return [];\n    }\n\n    return defaultLabelledBy;\n  });\n\n  constructor(readonly inputs: LabelControlInputs & LabelControlOptionalInputs) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {\n  ExpansionItem,\n  ExpansionControl,\n  ListExpansionInputs,\n  ListExpansion,\n} from '../behaviors/expansion/expansion';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {LabelControl, LabelControlOptionalInputs} from '../behaviors/label/label';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\n\n/** The required inputs to tabs. */\nexport interface TabInputs\n  extends Omit<ListItem<string>, 'searchTerm' | 'index' | 'selectable'>,\n    Omit<ExpansionItem, 'expansionId' | 'expandable'> {\n  /** The parent tablist that controls the tab. */\n  tablist: SignalLike<TabListPattern>;\n\n  /** The remote tabpanel controlled by the tab. */\n  tabpanel: SignalLike<TabPanelPattern | undefined>;\n}\n\n/** A tab in a tablist. */\nexport class TabPattern {\n  /** Controls expansion for this tab. */\n  readonly expansion: ExpansionControl;\n\n  /** A global unique identifier for the tab. */\n  readonly id: SignalLike<string>;\n\n  /** The index of the tab. */\n  readonly index = computed(() => this.inputs.tablist().inputs.items().indexOf(this));\n\n  /** A local unique identifier for the tab. */\n  readonly value: SignalLike<string>;\n\n  /** Whether the tab is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** The html element that should receive focus. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the tab is selectable. */\n  readonly selectable = () => true;\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm = () => ''; // Unused because tabs do not support typeahead.\n\n  /** Whether this tab has expandable content. */\n  readonly expandable = computed(() => this.expansion.expandable());\n\n  /** The unique identifier used by the expansion behavior. */\n  readonly expansionId = computed(() => this.expansion.expansionId());\n\n  /** Whether the tab is expanded. */\n  readonly expanded = computed(() => this.expansion.isExpanded());\n\n  /** Whether the tab is active. */\n  readonly active = computed(() => this.inputs.tablist().inputs.activeItem() === this);\n\n  /** Whether the tab is selected. */\n  readonly selected = computed(() => !!this.inputs.tablist().inputs.value().includes(this.value()));\n\n  /** The tabindex of the tab. */\n  readonly tabindex = computed(() => this.inputs.tablist().listBehavior.getItemTabindex(this));\n\n  /** The id of the tabpanel associated with the tab. */\n  readonly controls = computed(() => this.inputs.tabpanel()?.id());\n\n  constructor(readonly inputs: TabInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.disabled = inputs.disabled;\n    this.element = inputs.element;\n    this.expansion = new ExpansionControl({\n      ...inputs,\n      expansionId: inputs.value,\n      expandable: () => true,\n      expansionManager: inputs.tablist().expansionManager,\n    });\n  }\n}\n\n/** The required inputs for the tabpanel. */\nexport interface TabPanelInputs extends LabelControlOptionalInputs {\n  id: SignalLike<string>;\n  tab: SignalLike<TabPattern | undefined>;\n  value: SignalLike<string>;\n}\n\n/** A tabpanel associated with a tab. */\nexport class TabPanelPattern {\n  /** A global unique identifier for the tabpanel. */\n  readonly id: SignalLike<string>;\n\n  /** A local unique identifier for the tabpanel. */\n  readonly value: SignalLike<string>;\n\n  /** Controls label for this tabpanel. */\n  readonly labelManager: LabelControl;\n\n  /** Whether the tabpanel is hidden. */\n  readonly hidden = computed(() => this.inputs.tab()?.expanded() === false);\n\n  /** The tabindex of this tabpanel. */\n  readonly tabindex = computed(() => (this.hidden() ? -1 : 0));\n\n  /** The aria-labelledby value for this tabpanel. */\n  readonly labelledBy = computed(() =>\n    this.labelManager.labelledBy().length > 0\n      ? this.labelManager.labelledBy().join(' ')\n      : undefined,\n  );\n\n  constructor(readonly inputs: TabPanelInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.labelManager = new LabelControl({\n      ...inputs,\n      defaultLabelledBy: computed(() => (this.inputs.tab() ? [this.inputs.tab()!.id()] : [])),\n    });\n  }\n}\n\n/** The required inputs for the tablist. */\nexport type TabListInputs = Omit<ListInputs<TabPattern, string>, 'multi' | 'typeaheadDelay'> &\n  Omit<ListExpansionInputs, 'multiExpandable' | 'expandedIds' | 'items'>;\n\n/** Controls the state of a tablist. */\nexport class TabListPattern {\n  /** The list behavior for the tablist. */\n  readonly listBehavior: List<TabPattern, string>;\n\n  /** Controls expansion for the tablist. */\n  readonly expansionManager: ListExpansion;\n\n  /** Whether the tablist is vertically or horizontally oriented. */\n  readonly orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether the tablist is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** The tabindex of the tablist. */\n  readonly tabindex = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active tab. */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** Whether selection should follow focus. */\n  readonly followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** The key used to navigate to the previous tab in the tablist. */\n  readonly prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next item in the list. */\n  readonly nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the tablist. */\n  readonly keydown = computed(() => {\n    return new KeyboardEventManager()\n      .on(this.prevKey, () => this.listBehavior.prev({select: this.followFocus()}))\n      .on(this.nextKey, () => this.listBehavior.next({select: this.followFocus()}))\n      .on('Home', () => this.listBehavior.first({select: this.followFocus()}))\n      .on('End', () => this.listBehavior.last({select: this.followFocus()}))\n      .on(' ', () => this.listBehavior.select())\n      .on('Enter', () => this.listBehavior.select());\n  });\n\n  /** The pointerdown event manager for the tablist. */\n  readonly pointerdown = computed(() => {\n    return new PointerEventManager().on(e =>\n      this.listBehavior.goto(this._getItem(e)!, {select: true}),\n    );\n  });\n\n  constructor(readonly inputs: TabListInputs) {\n    this.disabled = inputs.disabled;\n    this.orientation = inputs.orientation;\n\n    this.listBehavior = new List({\n      ...inputs,\n      multi: () => false,\n      typeaheadDelay: () => 0, // Tabs do not support typeahead.\n    });\n\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n      multiExpandable: () => false,\n      expandedIds: this.inputs.value,\n    });\n  }\n\n  /**\n   * Sets the tablist to its default initial state.\n   *\n   * Sets the active index of the tablist to the first focusable selected\n   * tab if one exists. Otherwise, sets focus to the first focusable tab.\n   *\n   * This method should be called once the tablist and its tabs are properly initialized.\n   */\n  setDefaultState() {\n    let firstItem: TabPattern | undefined;\n\n    for (const item of this.inputs.items()) {\n      if (!this.listBehavior.isFocusable(item)) continue;\n\n      if (firstItem === undefined) {\n        firstItem = item;\n      }\n\n      if (item.selected()) {\n        this.inputs.activeItem.set(item);\n        return;\n      }\n    }\n    if (firstItem !== undefined) {\n      this.inputs.activeItem.set(firstItem);\n    }\n  }\n\n  /** Handles keydown events for the tablist. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** The pointerdown event manager for the tablist. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Returns the tab item associated with the given pointer event. */\n  private _getItem(e: PointerEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"tab\"]');\n    return this.inputs.items().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\nimport type {ToolbarPattern} from './toolbar';\n\n/** Represents the required inputs for a toolbar widget in a toolbar. */\nexport interface ToolbarWidgetInputs<V>\n  extends Omit<ListItem<V>, 'searchTerm' | 'value' | 'index' | 'selectable'> {\n  /** A reference to the parent toolbar. */\n  toolbar: SignalLike<ToolbarPattern<V>>;\n}\n\nexport class ToolbarWidgetPattern<V> implements ListItem<V> {\n  /** A unique identifier for the widget. */\n  readonly id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the widget is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** A reference to the parent toolbar. */\n  readonly toolbar: SignalLike<ToolbarPattern<V>>;\n\n  /** The tabindex of the widgdet. */\n  readonly tabindex = computed(() => this.toolbar().listBehavior.getItemTabindex(this));\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm = () => ''; // Unused because toolbar does not support typeahead.\n\n  /** The value associated with the widget. */\n  readonly value = () => '' as V; // Unused because toolbar does not support selection.\n\n  /** Whether the widget is selectable. */\n  readonly selectable = () => true; // Unused because toolbar does not support selection.\n\n  /** The position of the widget within the toolbar. */\n  readonly index = computed(() => this.toolbar().inputs.items().indexOf(this) ?? -1);\n\n  /** Whether the widget is currently the active one (focused). */\n  readonly active = computed(() => this.toolbar().inputs.activeItem() === this);\n\n  constructor(readonly inputs: ToolbarWidgetInputs<V>) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.toolbar = inputs.toolbar;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ListItem} from '../behaviors/list/list';\nimport type {ToolbarPattern} from './toolbar';\n\n/** An interface that allows sub patterns to expose the necessary controls for the toolbar. */\nexport interface ToolbarWidgetGroupControls {\n  /** Whether the widget group is currently on the first item. */\n  isOnFirstItem(): boolean;\n\n  /** Whether the widget group is currently on the last item. */\n  isOnLastItem(): boolean;\n\n  /** Navigates to the next widget in the group. */\n  next(wrap: boolean): void;\n\n  /** Navigates to the previous widget in the group. */\n  prev(wrap: boolean): void;\n\n  /** Navigates to the first widget in the group. */\n  first(): void;\n\n  /** Navigates to the last widget in the group. */\n  last(): void;\n\n  /** Removes focus from the widget group. */\n  unfocus(): void;\n\n  /** Triggers the action of the currently active widget in the group. */\n  trigger(): void;\n\n  /** Navigates to the widget targeted by a pointer event. */\n  goto(event: PointerEvent): void;\n\n  /** Sets the widget group to its default initial state. */\n  setDefaultState(): void;\n}\n\n/** Represents the required inputs for a toolbar widget group. */\nexport interface ToolbarWidgetGroupInputs<V>\n  extends Omit<ListItem<V>, 'searchTerm' | 'value' | 'index' | 'selectable'> {\n  /** A reference to the parent toolbar. */\n  toolbar: SignalLike<ToolbarPattern<V> | undefined>;\n\n  /** The controls for the sub patterns associated with the toolbar. */\n  controls: SignalLike<ToolbarWidgetGroupControls | undefined>;\n}\n\n/** A group of widgets within a toolbar that provides nested navigation. */\nexport class ToolbarWidgetGroupPattern<V> implements ListItem<V> {\n  /** A unique identifier for the widget. */\n  readonly id: SignalLike<string>;\n\n  /** The html element that should receive focus. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the widget is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** A reference to the parent toolbar. */\n  readonly toolbar: SignalLike<ToolbarPattern<V> | undefined>;\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm = () => ''; // Unused because toolbar does not support typeahead.\n\n  /** The value associated with the widget. */\n  readonly value = () => '' as V; // Unused because toolbar does not support selection.\n\n  /** Whether the widget is selectable. */\n  readonly selectable = () => true; // Unused because toolbar does not support selection.\n\n  /** The position of the widget within the toolbar. */\n  readonly index = computed(() => this.toolbar()?.inputs.items().indexOf(this) ?? -1);\n\n  /** The actions that can be performed on the widget group. */\n  readonly controls: SignalLike<ToolbarWidgetGroupControls> = computed(\n    () => this.inputs.controls() ?? this._defaultControls,\n  );\n\n  /** Default toolbar widget group controls when no controls provided. */\n  private readonly _defaultControls: ToolbarWidgetGroupControls = {\n    isOnFirstItem: () => true,\n    isOnLastItem: () => true,\n    next: () => {},\n    prev: () => {},\n    first: () => {},\n    last: () => {},\n    unfocus: () => {},\n    trigger: () => {},\n    goto: () => {},\n    setDefaultState: () => {},\n  };\n\n  constructor(readonly inputs: ToolbarWidgetGroupInputs<V>) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.toolbar = inputs.toolbar;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {List, ListInputs} from '../behaviors/list/list';\nimport {ToolbarWidgetPattern} from './toolbar-widget';\nimport {ToolbarWidgetGroupPattern} from './toolbar-widget-group';\n\n/** Represents the required inputs for a toolbar. */\nexport type ToolbarInputs<V> = Omit<\n  ListInputs<ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V>, V>,\n  'multi' | 'typeaheadDelay' | 'value' | 'selectionMode' | 'focusMode'\n> & {\n  /** A function that returns the toolbar item associated with a given element. */\n  getItem: (e: Element) => ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V> | undefined;\n};\n\n/** Controls the state of a toolbar. */\nexport class ToolbarPattern<V> {\n  /** The list behavior for the toolbar. */\n  readonly listBehavior: List<ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V>, V>;\n\n  /** Whether the tablist is vertically or horizontally oriented. */\n  readonly orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** Whether disabled items in the group should be skipped when navigating. */\n  readonly skipDisabled: SignalLike<boolean>;\n\n  /** Whether the toolbar is disabled. */\n  readonly disabled = computed(() => this.listBehavior.disabled());\n\n  /** The tabindex of the toolbar (if using activedescendant). */\n  readonly tabindex = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active widget (if using activedescendant). */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The key used to navigate to the previous widget. */\n  private readonly _prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next widget. */\n  private readonly _nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The alternate key used to navigate to the previous widget. */\n  private readonly _altPrevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n    }\n    return 'ArrowUp';\n  });\n\n  /** The alternate key used to navigate to the next widget. */\n  private readonly _altNextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n    }\n    return 'ArrowDown';\n  });\n\n  /** The keydown event manager for the toolbar. */\n  private readonly _keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n\n    return manager\n      .on(this._nextKey, () => this._next())\n      .on(this._prevKey, () => this._prev())\n      .on(this._altNextKey, () => this._groupNext())\n      .on(this._altPrevKey, () => this._groupPrev())\n      .on(' ', () => this._trigger())\n      .on('Enter', () => this._trigger())\n      .on('Home', () => this._first())\n      .on('End', () => this._last());\n  });\n\n  /** The pointerdown event manager for the toolbar. */\n  private readonly _pointerdown = computed(() => new PointerEventManager().on(e => this._goto(e)));\n\n  /** Navigates to the next widget in the toolbar. */\n  private _next() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      if (!item.disabled() && !item.controls().isOnLastItem()) {\n        item.controls().next(false);\n        return;\n      }\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.next();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().first();\n    }\n  }\n\n  /** Navigates to the previous widget in the toolbar. */\n  private _prev() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      if (!item.disabled() && !item.controls().isOnFirstItem()) {\n        item.controls().prev(false);\n        return;\n      }\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.prev();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().last();\n    }\n  }\n\n  private _groupNext() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetPattern) return;\n    item?.controls().next(true);\n  }\n\n  private _groupPrev() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetPattern) return;\n    item?.controls().prev(true);\n  }\n\n  /** Triggers the action of the currently active widget. */\n  private _trigger() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().trigger();\n    }\n  }\n\n  /** Navigates to the first widget in the toolbar. */\n  private _first() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.first();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().first();\n    }\n  }\n\n  /** Navigates to the last widget in the toolbar. */\n  private _last() {\n    const item = this.inputs.activeItem();\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().unfocus();\n    }\n\n    this.listBehavior.last();\n    const newItem = this.inputs.activeItem();\n    if (newItem instanceof ToolbarWidgetGroupPattern) {\n      newItem.controls().last();\n    }\n  }\n\n  /** Navigates to the widget targeted by a pointer event. */\n  private _goto(e: PointerEvent) {\n    const item = this.inputs.getItem(e.target as Element);\n    if (!item) return;\n\n    this.listBehavior.goto(item);\n    if (item instanceof ToolbarWidgetGroupPattern) {\n      item.controls().goto(e);\n    }\n  }\n\n  constructor(readonly inputs: ToolbarInputs<V>) {\n    this.orientation = inputs.orientation;\n    this.skipDisabled = inputs.skipDisabled;\n\n    this.listBehavior = new List({\n      ...inputs,\n      multi: () => false,\n      focusMode: () => 'roving',\n      selectionMode: () => 'explicit',\n      value: signal([] as V[]),\n      typeaheadDelay: () => 0, // Toolbar widgets do not support typeahead.\n    });\n  }\n\n  /** Handles keydown events for the toolbar. */\n  onKeydown(event: KeyboardEvent) {\n    if (this.disabled()) return;\n    this._keydown().handle(event);\n  }\n\n  /** Handles pointerdown events for the toolbar. */\n  onPointerdown(event: PointerEvent) {\n    if (this.disabled()) return;\n    this._pointerdown().handle(event);\n  }\n\n  /**\n   * Sets the toolbar to its default initial state.\n   *\n   * Sets the active index to the selected widget if one exists and is focusable.\n   * Otherwise, sets the active index to the first focusable widget.\n   */\n  setDefaultState() {\n    let firstItem: ToolbarWidgetPattern<V> | ToolbarWidgetGroupPattern<V> | null = null;\n\n    for (const item of this.inputs.items()) {\n      if (this.listBehavior.isFocusable(item)) {\n        if (!firstItem) {\n          firstItem = item;\n        }\n      }\n    }\n\n    if (firstItem) {\n      this.inputs.activeItem.set(firstItem);\n    }\n    if (firstItem instanceof ToolbarWidgetGroupPattern) {\n      firstItem.controls().setDefaultState();\n    }\n  }\n\n  /** Validates the state of the toolbar and returns a list of accessibility violations. */\n  validate(): string[] {\n    const violations: string[] = [];\n\n    return violations;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {KeyboardEventManager, PointerEventManager} from '../behaviors/event-manager';\nimport {\n  ExpansionItem,\n  ExpansionControl,\n  ListExpansion,\n  ListExpansionInputs,\n} from '../behaviors/expansion/expansion';\nimport {ListFocus, ListFocusInputs, ListFocusItem} from '../behaviors/list-focus/list-focus';\nimport {\n  ListNavigation,\n  ListNavigationInputs,\n  ListNavigationItem,\n} from '../behaviors/list-navigation/list-navigation';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\n\n/** Inputs of the AccordionGroupPattern. */\nexport type AccordionGroupInputs = Omit<\n  ListNavigationInputs<AccordionTriggerPattern> &\n    ListFocusInputs<AccordionTriggerPattern> &\n    Omit<ListExpansionInputs, 'items'>,\n  'focusMode'\n>;\n\nconst focusMode = () => 'roving' as const;\n\nexport interface AccordionGroupPattern extends AccordionGroupInputs {}\n/** A pattern controls the nested Accordions. */\nexport class AccordionGroupPattern {\n  /** Controls navigation for the group. */\n  navigation: ListNavigation<AccordionTriggerPattern>;\n\n  /** Controls focus for the group. */\n  focusManager: ListFocus<AccordionTriggerPattern>;\n\n  /** Controls expansion for the group. */\n  expansionManager: ListExpansion;\n\n  constructor(readonly inputs: AccordionGroupInputs) {\n    this.wrap = inputs.wrap;\n    this.orientation = inputs.orientation;\n    this.textDirection = inputs.textDirection;\n    this.activeItem = inputs.activeItem;\n    this.disabled = inputs.disabled;\n    this.multiExpandable = inputs.multiExpandable;\n    this.items = inputs.items;\n    this.expandedIds = inputs.expandedIds;\n    this.skipDisabled = inputs.skipDisabled;\n    this.focusManager = new ListFocus({\n      ...inputs,\n      focusMode,\n    });\n    this.navigation = new ListNavigation({\n      ...inputs,\n      focusMode,\n      focusManager: this.focusManager,\n    });\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n    });\n  }\n}\n\n/** Inputs for the AccordionTriggerPattern. */\nexport type AccordionTriggerInputs = Omit<ListNavigationItem & ListFocusItem, 'index'> &\n  Omit<ExpansionItem, 'expansionId' | 'expandable'> & {\n    /** A local unique identifier for the trigger. */\n    value: SignalLike<string>;\n\n    /** The parent accordion group that controls this trigger. */\n    accordionGroup: SignalLike<AccordionGroupPattern>;\n\n    /** The accordion panel controlled by this trigger. */\n    accordionPanel: SignalLike<AccordionPanelPattern | undefined>;\n  };\n\nexport interface AccordionTriggerPattern extends AccordionTriggerInputs {}\n/** A pattern controls the expansion state of an accordion. */\nexport class AccordionTriggerPattern {\n  /** Whether this tab has expandable content. */\n  expandable: SignalLike<boolean>;\n\n  /** The unique identifier used by the expansion behavior. */\n  expansionId: SignalLike<string>;\n\n  /** Whether an accordion is expanded. */\n  expanded: SignalLike<boolean>;\n\n  /** Controls the expansion state for the trigger. */\n  expansionControl: ExpansionControl;\n\n  /** Whether the trigger is active. */\n  active = computed(() => this.inputs.accordionGroup().activeItem() === this);\n\n  /** Id of the accordion panel controlled by the trigger. */\n  controls = computed(() => this.inputs.accordionPanel()?.id());\n\n  /** The tabindex of the trigger. */\n  tabindex = computed(() => (this.inputs.accordionGroup().focusManager.isFocusable(this) ? 0 : -1));\n\n  /** Whether the trigger is disabled. Disabling an accordion group disables all the triggers. */\n  disabled = computed(() => this.inputs.disabled() || this.inputs.accordionGroup().disabled());\n\n  /** The index of the trigger within its accordion group. */\n  index = computed(() => this.inputs.accordionGroup().items().indexOf(this));\n\n  constructor(readonly inputs: AccordionTriggerInputs) {\n    this.id = inputs.id;\n    this.element = inputs.element;\n    this.value = inputs.value;\n    this.expansionControl = new ExpansionControl({\n      ...inputs,\n      expansionId: inputs.value,\n      expandable: () => true,\n      expansionManager: inputs.accordionGroup().expansionManager,\n    });\n    this.expandable = this.expansionControl.isExpandable;\n    this.expansionId = this.expansionControl.expansionId;\n    this.expanded = this.expansionControl.isExpanded;\n  }\n\n  /** The key used to navigate to the previous accordion trigger. */\n  prevKey = computed(() => {\n    if (this.inputs.accordionGroup().orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.accordionGroup().textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key used to navigate to the next accordion trigger. */\n  nextKey = computed(() => {\n    if (this.inputs.accordionGroup().orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.accordionGroup().textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The keydown event manager for the accordion trigger. */\n  keydown = computed(() => {\n    return new KeyboardEventManager()\n      .on(this.prevKey, () => this.inputs.accordionGroup().navigation.prev())\n      .on(this.nextKey, () => this.inputs.accordionGroup().navigation.next())\n      .on('Home', () => this.inputs.accordionGroup().navigation.first())\n      .on('End', () => this.inputs.accordionGroup().navigation.last())\n      .on(' ', () => this.expansionControl.toggle())\n      .on('Enter', () => this.expansionControl.toggle());\n  });\n\n  /** The pointerdown event manager for the accordion trigger. */\n  pointerdown = computed(() => {\n    return new PointerEventManager().on(e => {\n      const item = this._getItem(e);\n\n      if (item) {\n        this.inputs.accordionGroup().navigation.goto(item);\n        this.expansionControl.toggle();\n      }\n    });\n  });\n\n  /** Handles keydown events on the trigger, delegating to the group if not disabled. */\n  onKeydown(event: KeyboardEvent): void {\n    this.keydown().handle(event);\n  }\n\n  /** Handles pointerdown events on the trigger, delegating to the group if not disabled. */\n  onPointerdown(event: PointerEvent): void {\n    this.pointerdown().handle(event);\n  }\n\n  /** Handles focus events on the trigger. This ensures the tabbing changes the active index. */\n  onFocus(event: FocusEvent): void {\n    const item = this._getItem(event);\n\n    if (item && this.inputs.accordionGroup().focusManager.isFocusable(item)) {\n      this.inputs.accordionGroup().focusManager.focus(item);\n    }\n  }\n\n  private _getItem(e: Event) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const element = e.target.closest('[role=\"button\"]');\n    return this.inputs\n      .accordionGroup()\n      .items()\n      .find(i => i.element() === element);\n  }\n}\n\n/** Represents the required inputs for the AccordionPanelPattern. */\nexport interface AccordionPanelInputs {\n  /** A global unique identifier for the panel. */\n  id: SignalLike<string>;\n\n  /** A local unique identifier for the panel, matching its trigger's value. */\n  value: SignalLike<string>;\n\n  /** The parent accordion trigger that controls this panel. */\n  accordionTrigger: SignalLike<AccordionTriggerPattern | undefined>;\n}\n\nexport interface AccordionPanelPattern extends AccordionPanelInputs {}\n/** Represents an accordion panel. */\nexport class AccordionPanelPattern {\n  /** Whether the accordion panel is hidden. True if the associated trigger is not expanded. */\n  hidden: SignalLike<boolean>;\n\n  constructor(readonly inputs: AccordionPanelInputs) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.accordionTrigger = inputs.accordionTrigger;\n    this.hidden = computed(() => inputs.accordionTrigger()?.expanded() === false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed, signal} from '@angular/core';\nimport {SignalLike, WritableSignalLike} from '../behaviors/signal-like/signal-like';\nimport {List, ListInputs, ListItem} from '../behaviors/list/list';\nimport {ExpansionItem, ExpansionControl, ListExpansion} from '../behaviors/expansion/expansion';\nimport {KeyboardEventManager, PointerEventManager, Modifier} from '../behaviors/event-manager';\n\n/** Represents the required inputs for a tree item. */\nexport interface TreeItemInputs<V> extends Omit<ListItem<V>, 'index'> {\n  /** The parent item. */\n  parent: SignalLike<TreeItemPattern<V> | TreePattern<V>>;\n\n  /** Whether this item has children. Children can be lazily loaded. */\n  hasChildren: SignalLike<boolean>;\n\n  /** The children items. */\n  children: SignalLike<TreeItemPattern<V>[]>;\n\n  /** The tree pattern this item belongs to. */\n  tree: SignalLike<TreePattern<V>>;\n}\n\n/**\n * Represents an item in a Tree.\n */\nexport class TreeItemPattern<V> implements ListItem<V>, ExpansionItem {\n  /** A unique identifier for this item. */\n  readonly id: SignalLike<string>;\n\n  /** The value of this item. */\n  readonly value: SignalLike<V>;\n\n  /** A reference to the item element. */\n  readonly element: SignalLike<HTMLElement>;\n\n  /** Whether the item is disabled. */\n  readonly disabled: SignalLike<boolean>;\n\n  /** The text used by the typeahead search. */\n  readonly searchTerm: SignalLike<string>;\n\n  /** The tree pattern this item belongs to. */\n  readonly tree: SignalLike<TreePattern<V>>;\n\n  /** The parent item. */\n  readonly parent: SignalLike<TreeItemPattern<V> | TreePattern<V>>;\n\n  /** The children items. */\n  readonly children: SignalLike<TreeItemPattern<V>[]>;\n\n  /** The position of this item among its siblings. */\n  readonly index = computed(() => this.tree().visibleItems().indexOf(this));\n\n  /** The unique identifier used by the expansion behavior. */\n  readonly expansionId: SignalLike<string>;\n\n  /** Controls expansion for child items. */\n  readonly expansionManager: ListExpansion;\n\n  /** Controls expansion for this item. */\n  readonly expansion: ExpansionControl;\n\n  /** Whether the item is expandable. It's expandable if children item exist. */\n  readonly expandable: SignalLike<boolean>;\n\n  /** Whether the item is selectable. */\n  readonly selectable: SignalLike<boolean>;\n\n  /** The level of the current item in a tree. */\n  readonly level: SignalLike<number> = computed(() => this.parent().level() + 1);\n\n  /** Whether this item is currently expanded. */\n  readonly expanded = computed(() => this.expansion.isExpanded());\n\n  /** Whether this item is visible. */\n  readonly visible: SignalLike<boolean> = computed(\n    () => this.parent().expanded() && this.parent().visible(),\n  );\n\n  /** The number of items under the same parent at the same level. */\n  readonly setsize = computed(() => this.parent().children().length);\n\n  /** The position of this item among its siblings (1-based). */\n  readonly posinset = computed(() => this.parent().children().indexOf(this) + 1);\n\n  /** Whether the item is active. */\n  readonly active = computed(() => this.tree().activeItem() === this);\n\n  /** The tabindex of the item. */\n  readonly tabindex = computed(() => this.tree().listBehavior.getItemTabindex(this));\n\n  /** Whether the item is selected. */\n  readonly selected: SignalLike<boolean | undefined> = computed(() => {\n    if (this.tree().nav()) {\n      return undefined;\n    }\n    if (!this.selectable()) {\n      return undefined;\n    }\n    return this.tree().value().includes(this.value());\n  });\n\n  /** The current type of this item. */\n  readonly current: SignalLike<string | undefined> = computed(() => {\n    if (!this.tree().nav()) {\n      return undefined;\n    }\n    if (!this.selectable()) {\n      return undefined;\n    }\n    return this.tree().value().includes(this.value()) ? this.tree().currentType() : undefined;\n  });\n\n  constructor(readonly inputs: TreeItemInputs<V>) {\n    this.id = inputs.id;\n    this.value = inputs.value;\n    this.element = inputs.element;\n    this.disabled = inputs.disabled;\n    this.searchTerm = inputs.searchTerm;\n    this.expansionId = inputs.id;\n    this.tree = inputs.tree;\n    this.parent = inputs.parent;\n    this.children = inputs.children;\n    this.expandable = inputs.hasChildren;\n    this.selectable = inputs.selectable;\n    this.expansion = new ExpansionControl({\n      ...inputs,\n      expandable: this.expandable,\n      expansionId: this.expansionId,\n      expansionManager: this.parent().expansionManager,\n    });\n    this.expansionManager = new ListExpansion({\n      ...inputs,\n      multiExpandable: () => true,\n      // TODO(ok7sai): allow pre-expanded tree items.\n      expandedIds: signal([]),\n      items: this.children,\n      disabled: computed(() => this.tree()?.disabled() ?? false),\n    });\n  }\n}\n\n/** The selection operations that the tree can perform. */\ninterface SelectOptions {\n  toggle?: boolean;\n  selectOne?: boolean;\n  selectRange?: boolean;\n  anchor?: boolean;\n}\n\n/** Represents the required inputs for a tree. */\nexport interface TreeInputs<V> extends Omit<ListInputs<TreeItemPattern<V>, V>, 'items'> {\n  /** A unique identifier for the tree. */\n  id: SignalLike<string>;\n\n  /** All items in the tree, in document order (DFS-like, a flattened list). */\n  allItems: SignalLike<TreeItemPattern<V>[]>;\n\n  /** Whether the tree is in navigation mode. */\n  nav: SignalLike<boolean>;\n\n  /** The aria-current type. */\n  currentType: SignalLike<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>;\n}\n\nexport interface TreePattern<V> extends TreeInputs<V> {}\n/** Controls the state and interactions of a tree view. */\nexport class TreePattern<V> {\n  /** The list behavior for the tree. */\n  readonly listBehavior: List<TreeItemPattern<V>, V>;\n\n  /** Controls expansion for direct children of the tree root (top-level items). */\n  readonly expansionManager: ListExpansion;\n\n  /** The root level is 0. */\n  readonly level = () => 0;\n\n  /** The root is always expanded. */\n  readonly expanded = () => true;\n\n  /** The roow is always visible. */\n  readonly visible = () => true;\n\n  /** The tabindex of the tree. */\n  readonly tabindex: SignalLike<-1 | 0> = computed(() => this.listBehavior.tabindex());\n\n  /** The id of the current active item. */\n  readonly activedescendant = computed(() => this.listBehavior.activedescendant());\n\n  /** The direct children of the root (top-level tree items). */\n  readonly children = computed(() =>\n    this.inputs.allItems().filter(item => item.level() === this.level() + 1),\n  );\n\n  /** All currently visible tree items. An item is visible if their parent is expanded. */\n  readonly visibleItems = computed(() => this.inputs.allItems().filter(item => item.visible()));\n\n  /** Whether the tree selection follows focus. */\n  readonly followFocus = computed(() => this.inputs.selectionMode() === 'follow');\n\n  /** The key for navigating to the previous item. */\n  readonly prevKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key for navigating to the next item. */\n  readonly nextKey = computed(() => {\n    if (this.inputs.orientation() === 'vertical') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** The key for collapsing an item or moving to its parent. */\n  readonly collapseKey = computed(() => {\n    if (this.inputs.orientation() === 'horizontal') {\n      return 'ArrowUp';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n  });\n\n  /** The key for expanding an item or moving to its first child. */\n  readonly expandKey = computed(() => {\n    if (this.inputs.orientation() === 'horizontal') {\n      return 'ArrowDown';\n    }\n    return this.inputs.textDirection() === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n  });\n\n  /** Represents the space key. Does nothing when the user is actively using typeahead. */\n  readonly dynamicSpaceKey = computed(() => (this.listBehavior.isTyping() ? '' : ' '));\n\n  /** Regular expression to match characters for typeahead. */\n  readonly typeaheadRegexp = /^.$/;\n\n  /** The keydown event manager for the tree. */\n  readonly keydown = computed(() => {\n    const manager = new KeyboardEventManager();\n    const list = this.listBehavior;\n\n    manager\n      .on(this.prevKey, () => list.prev({selectOne: this.followFocus()}))\n      .on(this.nextKey, () => list.next({selectOne: this.followFocus()}))\n      .on('Home', () => list.first({selectOne: this.followFocus()}))\n      .on('End', () => list.last({selectOne: this.followFocus()}))\n      .on(this.typeaheadRegexp, e => list.search(e.key, {selectOne: this.followFocus()}))\n      .on(this.expandKey, () => this.expand({selectOne: this.followFocus()}))\n      .on(this.collapseKey, () => this.collapse({selectOne: this.followFocus()}))\n      .on(Modifier.Shift, '*', () => this.expandSiblings());\n\n    if (this.inputs.multi()) {\n      manager\n        // TODO: Tracking the anchor by index can break if the\n        // tree is expanded or collapsed causing the index to change.\n        .on(Modifier.Any, 'Shift', () => list.anchor(this.listBehavior.activeIndex()))\n        .on(Modifier.Shift, this.prevKey, () => list.prev({selectRange: true}))\n        .on(Modifier.Shift, this.nextKey, () => list.next({selectRange: true}))\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'Home', () =>\n          list.first({selectRange: true, anchor: false}),\n        )\n        .on([Modifier.Ctrl | Modifier.Shift, Modifier.Meta | Modifier.Shift], 'End', () =>\n          list.last({selectRange: true, anchor: false}),\n        )\n        .on(Modifier.Shift, 'Enter', () => list.updateSelection({selectRange: true, anchor: false}))\n        .on(Modifier.Shift, this.dynamicSpaceKey, () =>\n          list.updateSelection({selectRange: true, anchor: false}),\n        );\n    }\n\n    if (!this.followFocus() && this.inputs.multi()) {\n      manager\n        .on(this.dynamicSpaceKey, () => list.toggle())\n        .on('Enter', () => list.toggle(), {preventDefault: !this.nav()})\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => list.toggleAll());\n    }\n\n    if (!this.followFocus() && !this.inputs.multi()) {\n      manager.on(this.dynamicSpaceKey, () => list.selectOne());\n      manager.on('Enter', () => list.selectOne(), {preventDefault: !this.nav()});\n    }\n\n    if (this.inputs.multi() && this.followFocus()) {\n      manager\n        .on([Modifier.Ctrl, Modifier.Meta], this.prevKey, () => list.prev())\n        .on([Modifier.Ctrl, Modifier.Meta], this.nextKey, () => list.next())\n        .on([Modifier.Ctrl, Modifier.Meta], this.expandKey, () => this.expand())\n        .on([Modifier.Ctrl, Modifier.Meta], this.collapseKey, () => this.collapse())\n        .on([Modifier.Ctrl, Modifier.Meta], ' ', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Enter', () => list.toggle())\n        .on([Modifier.Ctrl, Modifier.Meta], 'Home', () => list.first())\n        .on([Modifier.Ctrl, Modifier.Meta], 'End', () => list.last())\n        .on([Modifier.Ctrl, Modifier.Meta], 'A', () => {\n          list.toggleAll();\n          list.select(); // Ensure the currect item remains selected.\n        });\n    }\n\n    return manager;\n  });\n\n  /** The pointerdown event manager for the tree. */\n  pointerdown = computed(() => {\n    const manager = new PointerEventManager();\n\n    if (this.multi()) {\n      manager.on(Modifier.Shift, e => this.goto(e, {selectRange: true}));\n    }\n\n    if (!this.multi()) {\n      return manager.on(e => this.goto(e, {selectOne: true}));\n    }\n\n    if (this.multi() && this.followFocus()) {\n      return manager\n        .on(e => this.goto(e, {selectOne: true}))\n        .on(Modifier.Ctrl, e => this.goto(e, {toggle: true}));\n    }\n\n    if (this.multi() && !this.followFocus()) {\n      return manager.on(e => this.goto(e, {toggle: true}));\n    }\n\n    return manager;\n  });\n\n  /** A unique identifier for the tree. */\n  id: SignalLike<string>;\n\n  /** Whether the tree is in navigation mode. */\n  nav: SignalLike<boolean>;\n\n  /** The aria-current type. */\n  currentType: SignalLike<'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'>;\n\n  /** All items in the tree, in document order (DFS-like, a flattened list). */\n  allItems: SignalLike<TreeItemPattern<V>[]>;\n\n  /** Whether the tree is disabled. */\n  disabled: SignalLike<boolean>;\n\n  /** The currently active item in the tree. */\n  activeItem: WritableSignalLike<TreeItemPattern<V> | undefined> = signal(undefined);\n\n  /** Whether disabled items should be skipped when navigating. */\n  skipDisabled: SignalLike<boolean>;\n\n  /** Whether the focus should wrap when navigating past the first or last item. */\n  wrap: SignalLike<boolean>;\n\n  /** The orientation of the tree. */\n  orientation: SignalLike<'vertical' | 'horizontal'>;\n\n  /** The text direction of the tree. */\n  textDirection: SignalLike<'ltr' | 'rtl'>;\n\n  /** Whether multiple items can be selected at the same time. */\n  multi: SignalLike<boolean>;\n\n  /** The selection mode of the tree. */\n  selectionMode: SignalLike<'follow' | 'explicit'>;\n\n  /** The delay in milliseconds to wait before clearing the typeahead buffer. */\n  typeaheadDelay: SignalLike<number>;\n\n  /** The current value of the tree (the selected items). */\n  value: WritableSignalLike<V[]>;\n\n  constructor(readonly inputs: TreeInputs<V>) {\n    this.id = inputs.id;\n    this.nav = inputs.nav;\n    this.currentType = inputs.currentType;\n    this.allItems = inputs.allItems;\n    this.focusMode = inputs.focusMode;\n    this.disabled = inputs.disabled;\n    this.activeItem = inputs.activeItem;\n    this.skipDisabled = inputs.skipDisabled;\n    this.wrap = inputs.wrap;\n    this.orientation = inputs.orientation;\n    this.textDirection = inputs.textDirection;\n    this.multi = computed(() => (this.nav() ? false : this.inputs.multi()));\n    this.selectionMode = inputs.selectionMode;\n    this.typeaheadDelay = inputs.typeaheadDelay;\n    this.value = inputs.value;\n\n    this.listBehavior = new List({\n      ...inputs,\n      items: this.visibleItems,\n      multi: this.multi,\n    });\n\n    this.expansionManager = new ListExpansion({\n      multiExpandable: () => true,\n      // TODO(ok7sai): allow pre-expanded tree items.\n      expandedIds: signal([]),\n      items: this.children,\n      disabled: this.disabled,\n    });\n  }\n\n  /**\n   * Sets the tree to it's default initial state.\n   *\n   * Sets the active index of the tree to the first focusable selected tree item if one exists.\n   * Otherwise, sets focus to the first focusable tree item.\n   */\n  setDefaultState() {\n    let firstItem: TreeItemPattern<V> | undefined;\n\n    for (const item of this.allItems()) {\n      if (!item.visible()) continue;\n      if (!this.listBehavior.isFocusable(item)) continue;\n\n      if (firstItem === undefined) {\n        firstItem = item;\n      }\n\n      if (item.selected()) {\n        this.activeItem.set(item);\n        return;\n      }\n    }\n\n    if (firstItem !== undefined) {\n      this.activeItem.set(firstItem);\n    }\n  }\n\n  /** Handles keydown events on the tree. */\n  onKeydown(event: KeyboardEvent) {\n    if (!this.disabled()) {\n      this.keydown().handle(event);\n    }\n  }\n\n  /** Handles pointerdown events on the tree. */\n  onPointerdown(event: PointerEvent) {\n    if (!this.disabled()) {\n      this.pointerdown().handle(event);\n    }\n  }\n\n  /** Navigates to the given tree item in the tree. */\n  goto(e: PointerEvent, opts?: SelectOptions) {\n    const item = this._getItem(e);\n    if (!item) return;\n\n    this.listBehavior.goto(item, opts);\n    this.toggleExpansion(item);\n  }\n\n  /** Toggles to expand or collapse a tree item. */\n  toggleExpansion(item?: TreeItemPattern<V>) {\n    item ??= this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (!item.expandable()) return;\n    if (item.expanded()) {\n      this.collapse();\n    } else {\n      item.expansion.open();\n    }\n  }\n\n  /** Expands a tree item. */\n  expand(opts?: SelectOptions) {\n    const item = this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (item.expandable() && !item.expanded()) {\n      item.expansion.open();\n    } else if (\n      item.expanded() &&\n      item.children().some(item => this.listBehavior.isFocusable(item))\n    ) {\n      this.listBehavior.next(opts);\n    }\n  }\n\n  /** Expands all sibling tree items including itself. */\n  expandSiblings(item?: TreeItemPattern<V>) {\n    item ??= this.activeItem();\n    const siblings = item?.parent()?.children();\n    siblings?.forEach(item => item.expansion.open());\n  }\n\n  /** Collapses a tree item. */\n  collapse(opts?: SelectOptions) {\n    const item = this.activeItem();\n    if (!item || !this.listBehavior.isFocusable(item)) return;\n\n    if (item.expandable() && item.expanded()) {\n      item.expansion.close();\n    } else if (item.parent() && item.parent() !== this) {\n      const parentItem = item.parent();\n      if (parentItem instanceof TreeItemPattern && this.listBehavior.isFocusable(parentItem)) {\n        this.listBehavior.goto(parentItem, opts);\n      }\n    }\n  }\n\n  /** Retrieves the TreeItemPattern associated with a DOM event, if any. */\n  protected _getItem(event: Event): TreeItemPattern<V> | undefined {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const element = event.target.closest('[role=\"treeitem\"]');\n    return this.inputs.allItems().find(i => i.element() === element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {computed} from '@angular/core';\nimport {TreeInputs, TreePattern, TreeItemPattern} from './tree';\nimport {SignalLike} from '../behaviors/signal-like/signal-like';\nimport {ComboboxPattern, ComboboxTreeControls} from '../combobox/combobox';\n\nexport type ComboboxTreeInputs<V> = TreeInputs<V> & {\n  /** The combobox controlling the tree. */\n  combobox: SignalLike<ComboboxPattern<TreeItemPattern<V>, V> | undefined>;\n};\n\nexport class ComboboxTreePattern<V>\n  extends TreePattern<V>\n  implements ComboboxTreeControls<TreeItemPattern<V>, V>\n{\n  /** Whether the currently focused item is collapsible. */\n  isItemCollapsible = () => this.inputs.activeItem()?.parent() instanceof TreeItemPattern;\n\n  /** The ARIA role for the tree. */\n  role = () => 'tree' as const;\n\n  /* The id of the active (focused) item in the tree. */\n  activeId = computed(() => this.listBehavior.activedescendant());\n\n  /** The list of items in the tree. */\n  items = computed(() => this.inputs.allItems());\n\n  /** The tabindex for the tree. Always -1 because the combobox handles focus. */\n  override tabindex: SignalLike<-1 | 0> = () => -1;\n\n  constructor(override readonly inputs: ComboboxTreeInputs<V>) {\n    if (inputs.combobox()) {\n      inputs.multi = () => false;\n      inputs.focusMode = () => 'activedescendant';\n      inputs.element = inputs.combobox()!.inputs.inputEl;\n    }\n\n    super(inputs);\n  }\n\n  /** Noop. The combobox handles keydown events. */\n  override onKeydown(_: KeyboardEvent): void {}\n\n  /** Noop. The combobox handles pointerdown events. */\n  override onPointerdown(_: PointerEvent): void {}\n\n  /** Noop. The combobox controls the open state. */\n  override setDefaultState(): void {}\n\n  /** Navigates to the specified item in the tree. */\n  focus = (item: TreeItemPattern<V>) => this.listBehavior.goto(item);\n\n  /** Navigates to the next focusable item in the tree. */\n  next = () => this.listBehavior.next();\n\n  /** Navigates to the previous focusable item in the tree. */\n  prev = () => this.listBehavior.prev();\n\n  /** Navigates to the last focusable item in the tree. */\n  last = () => this.listBehavior.last();\n\n  /** Navigates to the first focusable item in the tree. */\n  first = () => this.listBehavior.first();\n\n  /** Unfocuses the currently focused item in the tree. */\n  unfocus = () => this.listBehavior.unfocus();\n\n  // TODO: handle non-selectable parent nodes.\n  /** Selects the specified item in the tree or the current active item if not provided. */\n  select = (item?: TreeItemPattern<V>) => this.listBehavior.select(item);\n\n  /** Clears the selection in the tree. */\n  clearSelection = () => this.listBehavior.deselectAll();\n\n  /** Retrieves the TreeItemPattern associated with a pointer event. */\n  getItem = (e: PointerEvent) => this._getItem(e);\n\n  /** Retrieves the currently selected item in the tree */\n  getSelectedItem = () => this.inputs.allItems().find(i => i.selected());\n\n  /** Sets the value of the combobox tree. */\n  setValue = (value: V | undefined) => this.inputs.value.set(value ? [value] : []);\n\n  /** Expands the currently focused item if it is expandable. */\n  expandItem = () => this.expand();\n\n  /** Collapses the currently focused item if it is expandable. */\n  collapseItem = () => this.collapse();\n\n  /** Whether the specified item or the currently active item is expandable. */\n  isItemExpandable(item: TreeItemPattern<V> | undefined = this.inputs.activeItem()) {\n    return item ? item.expandable() : false;\n  }\n\n  /** Expands all of the tree items. */\n  expandAll = () => this.items().forEach(item => item.expansion.open());\n\n  /** Collapses all of the tree items. */\n  collapseAll = () => this.items().forEach(item => item.expansion.close());\n}\n"],"names":[],"mappings":"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"}