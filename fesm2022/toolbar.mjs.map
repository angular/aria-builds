{"version":3,"file":"toolbar.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/toolbar/toolbar.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  Directive,\n  ElementRef,\n  inject,\n  computed,\n  input,\n  booleanAttribute,\n  signal,\n  Signal,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  ToolbarPattern,\n  ToolbarWidgetPattern,\n  ToolbarWidgetGroupPattern,\n  ToolbarWidgetGroupControls,\n} from '@angular/aria/private';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {_IdGenerator} from '@angular/cdk/a11y';\n\ninterface HasElement {\n  element: Signal<HTMLElement>;\n}\n\n/**\n * Sort directives by their document order.\n */\nfunction sortDirectives(a: HasElement, b: HasElement) {\n  return (a.element().compareDocumentPosition(b.element()) & Node.DOCUMENT_POSITION_PRECEDING) > 0\n    ? 1\n    : -1;\n}\n\n/**\n * A toolbar widget container.\n *\n * Widgets such as radio groups or buttons are nested within a toolbar to allow for a single\n * place of reference for focus and navigation. The Toolbar is meant to be used in conjunction\n * with ToolbarWidget and RadioGroup as follows:\n *\n * ```html\n * <div ngToolbar>\n *  <button ngToolbarWidget>Button</button>\n *  <div ngRadioGroup>\n *    <label ngRadioButton value=\"1\">Option 1</label>\n *    <label ngRadioButton value=\"2\">Option 2</label>\n *    <label ngRadioButton value=\"3\">Option 3</label>\n *  </div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[ngToolbar]',\n  exportAs: 'ngToolbar',\n  host: {\n    'role': 'toolbar',\n    'class': 'ng-toolbar',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-orientation]': '_pattern.orientation()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(pointerdown)': '_pattern.onPointerdown($event)',\n    '(focusin)': 'onFocus()',\n  },\n})\nexport class Toolbar<V> {\n  /** A reference to the toolbar element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The TabList nested inside of the container. */\n  private readonly _widgets = signal(new Set<ToolbarWidget<V> | ToolbarWidgetGroup<V>>());\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = inject(Directionality).valueSignal;\n\n  /** Sorted UIPatterns of the child widgets */\n  readonly items = computed(() =>\n    [...this._widgets()].sort(sortDirectives).map(widget => widget._pattern),\n  );\n\n  /** Whether the toolbar is vertically or horizontally oriented. */\n  readonly orientation = input<'vertical' | 'horizontal'>('horizontal');\n\n  /** Whether disabled items in the group should be skipped when navigating. */\n  readonly skipDisabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the toolbar is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether focus should wrap when navigating. */\n  readonly wrap = input(true, {transform: booleanAttribute});\n\n  /** The toolbar UIPattern. */\n  readonly _pattern: ToolbarPattern<V> = new ToolbarPattern<V>({\n    ...this,\n    activeItem: signal(undefined),\n    textDirection: this.textDirection,\n    element: () => this._elementRef.nativeElement,\n    getItem: e => this._getItem(e),\n  });\n\n  /** Whether the toolbar has received focus yet. */\n  private _hasFocused = signal(false);\n\n  constructor() {\n    afterRenderEffect(() => {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const violations = this._pattern.validate();\n        for (const violation of violations) {\n          console.error(violation);\n        }\n      }\n    });\n\n    afterRenderEffect(() => {\n      if (!this._hasFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n\n  onFocus() {\n    this._hasFocused.set(true);\n  }\n\n  register(widget: ToolbarWidget<V> | ToolbarWidgetGroup<V>) {\n    const widgets = this._widgets();\n    if (!widgets.has(widget)) {\n      widgets.add(widget);\n      this._widgets.set(new Set(widgets));\n    }\n  }\n\n  unregister(widget: ToolbarWidget<V> | ToolbarWidgetGroup<V>) {\n    const widgets = this._widgets();\n    if (widgets.delete(widget)) {\n      this._widgets.set(new Set(widgets));\n    }\n  }\n\n  /** Finds the toolbar item associated with a given element. */\n  private _getItem(element: Element) {\n    const widgetTarget = element.closest('.ng-toolbar-widget');\n    const groupTarget = element.closest('.ng-toolbar-widget-group');\n    return this.items().find(\n      widget => widget.element() === widgetTarget || widget.element() === groupTarget,\n    );\n  }\n}\n\n/**\n * A widget within a toolbar.\n *\n * A widget is anything that is within a toolbar. It should be applied to any native HTML element\n * that has the purpose of acting as a widget navigatable within a toolbar.\n */\n@Directive({\n  selector: '[ngToolbarWidget]',\n  exportAs: 'ngToolbarWidget',\n  host: {\n    'class': 'ng-toolbar-widget',\n    '[attr.data-active]': '_pattern.active()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.inert]': 'hardDisabled() ? true : null',\n    '[attr.disabled]': 'hardDisabled() ? true : null',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[id]': '_pattern.id()',\n  },\n})\nexport class ToolbarWidget<V> implements OnInit, OnDestroy {\n  /** A reference to the widget element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent Toolbar. */\n  private readonly _toolbar = inject(Toolbar);\n\n  /** A unique identifier for the widget. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-toolbar-widget-');\n\n  /** A unique identifier for the widget. */\n  readonly id = computed(() => this._generatedId);\n\n  /** The parent Toolbar UIPattern. */\n  readonly toolbar = computed(() => this._toolbar._pattern);\n\n  /** A reference to the widget element to be focused on navigation. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether the widget is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** Whether the widget is 'hard' disabled, which is different from `aria-disabled`. A hard disabled widget cannot receive focus. */\n  readonly hardDisabled = computed(() => this._pattern.disabled() && this._toolbar.skipDisabled());\n\n  /** The ToolbarWidget UIPattern. */\n  readonly _pattern = new ToolbarWidgetPattern<V>({\n    ...this,\n    id: this.id,\n    element: this.element,\n    disabled: computed(() => this._toolbar.disabled() || this.disabled()),\n  });\n\n  ngOnInit() {\n    this._toolbar.register(this);\n  }\n\n  ngOnDestroy() {\n    this._toolbar.unregister(this);\n  }\n}\n\n/**\n * A directive that groups toolbar widgets, used for more complex widgets like radio groups that\n * have their own internal navigation.\n */\n@Directive({\n  host: {\n    '[class.ng-toolbar-widget-group]': '!!toolbar()',\n  },\n})\nexport class ToolbarWidgetGroup<V> implements OnInit, OnDestroy {\n  /** A reference to the widget element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** The parent Toolbar. */\n  private readonly _toolbar = inject(Toolbar, {optional: true});\n\n  /** A unique identifier for the widget. */\n  private readonly _generatedId = inject(_IdGenerator).getId('ng-toolbar-widget-group-');\n\n  /** A unique identifier for the widget. */\n  readonly id = computed(() => this._generatedId);\n\n  /** The parent Toolbar UIPattern. */\n  readonly toolbar = computed(() => this._toolbar?._pattern);\n\n  /** A reference to the widget element to be focused on navigation. */\n  readonly element = computed(() => this._elementRef.nativeElement);\n\n  /** Whether the widget group is disabled. */\n  readonly disabled = input(false, {transform: booleanAttribute});\n\n  /** The controls that can be performed on the widget group. */\n  readonly controls = signal<ToolbarWidgetGroupControls | undefined>(undefined);\n\n  /** The ToolbarWidgetGroup UIPattern. */\n  readonly _pattern = new ToolbarWidgetGroupPattern<V>({\n    ...this,\n    id: this.id,\n    element: this.element,\n  });\n\n  ngOnInit() {\n    this._toolbar?.register(this);\n  }\n\n  ngOnDestroy() {\n    this._toolbar?.unregister(this);\n  }\n}\n"],"names":["textDirection","inject","Directionality","valueSignal","items","computed","_widgets","sort","sortDirectives","map","widget","_pattern","ngDevMode","debugName","orientation","input","transform","booleanAttribute","disabled","wrap","getItem","e","_getItem","signal","constructor","afterRenderEffect","violations","validate","violation","console","error","onFocus","_hasFocused","set","widgets","has","Set","unregister","delete","element","widgetTarget","closest","groupTarget","find","version","type","Toolbar","isStandalone","selector","inputs","classPropertyName","publicName","isSignal","isRequired","transformFunction","skipDisabled","host","attributes","listeners","properties","classAttribute","exportAs","ngImport","i0","ctorParameters","_generatedId","_IdGenerator","getId","_toolbar","_elementRef","nativeElement","id","ɵfac","ɵɵngDeclareFactory","minVersion","ToolbarWidget","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective"],"mappings":"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"}