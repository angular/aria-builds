{"version":3,"file":"menu.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/menu/menu.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  computed,\n  contentChildren,\n  Directive,\n  effect,\n  ElementRef,\n  inject,\n  input,\n  model,\n  output,\n  Signal,\n  signal,\n  untracked,\n} from '@angular/core';\nimport {\n  SignalLike,\n  MenuBarPattern,\n  MenuItemPattern,\n  MenuPattern,\n  MenuTriggerPattern,\n} from '@angular/aria/private';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {toSignal} from '@angular/core/rxjs-interop';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DeferredContent, DeferredContentAware} from '@angular/aria/deferred-content';\n\n/**\n * A trigger for a menu.\n *\n * The menu trigger is used to open and close menus, and can be placed on menu items to connect\n * sub-menus.\n */\n@Directive({\n  selector: 'button[ngMenuTrigger]',\n  exportAs: 'ngMenuTrigger',\n  host: {\n    'class': 'ng-menu-trigger',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-haspopup]': '_pattern.hasPopup()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-controls]': '_pattern.menu()?.id()',\n    '(click)': '_pattern.onClick()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n    '(focusin)': 'onFocusIn()',\n  },\n})\nexport class MenuTrigger<V> {\n  /** A reference to the menu trigger element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLButtonElement = this._elementRef.nativeElement;\n\n  // TODO(wagnermaciel): See we can remove the need to pass in a submenu.\n\n  /** The menu associated with the trigger. */\n  menu = input<Menu<V> | undefined>(undefined);\n\n  /** Whether the menu item has been focused. */\n  readonly hasBeenFocused = signal(false);\n\n  /** The menu trigger ui pattern instance. */\n  _pattern: MenuTriggerPattern<V> = new MenuTriggerPattern({\n    element: computed(() => this._elementRef.nativeElement),\n    menu: computed(() => this.menu()?._pattern),\n  });\n\n  constructor() {\n    effect(() => this.menu()?.parent.set(this));\n  }\n\n  /** Marks the menu trigger as having been focused. */\n  onFocusIn() {\n    this.hasBeenFocused.set(true);\n  }\n}\n\n/**\n * A list of menu items.\n *\n * A menu is used to offer a list of menu item choices to users. Menus can be nested within other\n * menus to create sub-menus.\n *\n * ```html\n * <button ngMenuTrigger menu=\"menu\">Options</button>\n *\n * <div ngMenu #menu=\"ngMenu\">\n *   <div ngMenuItem>Star</div>\n *   <div ngMenuItem>Edit</div>\n *   <div ngMenuItem>Delete</div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[ngMenu]',\n  exportAs: 'ngMenu',\n  host: {\n    'role': 'menu',\n    'class': 'ng-menu',\n    '[attr.id]': '_pattern.id()',\n    '[attr.data-visible]': '_pattern.isVisible()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(mouseover)': '_pattern.onMouseOver($event)',\n    '(mouseout)': '_pattern.onMouseOut($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(click)': '_pattern.onClick($event)',\n  },\n  hostDirectives: [\n    {\n      directive: DeferredContentAware,\n      inputs: ['preserveContent'],\n    },\n  ],\n})\nexport class Menu<V> {\n  /** The DeferredContentAware host directive. */\n  private readonly _deferredContentAware = inject(DeferredContentAware, {optional: true});\n\n  /** The menu items contained in the menu. */\n  readonly _allItems = contentChildren<MenuItem<V>>(MenuItem, {descendants: true});\n\n  /** The menu items that are direct children of this menu. */\n  readonly _items: Signal<MenuItem<V>[]> = computed(() =>\n    this._allItems().filter(i => i.parent === this),\n  );\n\n  /** A reference to the menu element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The unique ID of the menu. */\n  readonly id = input<string>(inject(_IdGenerator).getId('ng-menu-', true));\n\n  /** Whether the menu should wrap its items. */\n  readonly wrap = input<boolean>(true);\n\n  /** The delay in seconds before the typeahead buffer is cleared. */\n  readonly typeaheadDelay = input<number>(0.5); // Picked arbitrarily.\n\n  /** A reference to the parent menu item or menu trigger. */\n  readonly parent = signal<MenuTrigger<V> | MenuItem<V> | undefined>(undefined);\n\n  /** The menu ui pattern instance. */\n  readonly _pattern: MenuPattern<V>;\n\n  /**\n   * The menu items as a writable signal.\n   *\n   * TODO(wagnermaciel): This would normally be a computed, but using a computed causes a bug where\n   * sometimes the items array is empty. The bug can be reproduced by switching this to use a\n   * computed and then quickly opening and closing menus in the dev app.\n   */\n  readonly items = () => this._items().map(i => i._pattern);\n\n  /** Whether the menu is visible. */\n  isVisible = computed(() => this._pattern.isVisible());\n\n  /** A callback function triggered when a menu item is selected. */\n  onSelect = output<V>();\n\n  constructor() {\n    this._pattern = new MenuPattern({\n      ...this,\n      parent: computed(() => this.parent()?._pattern),\n      multi: () => false,\n      skipDisabled: () => false,\n      focusMode: () => 'roving',\n      orientation: () => 'vertical',\n      selectionMode: () => 'explicit',\n      activeItem: signal(undefined),\n      element: computed(() => this._elementRef.nativeElement),\n      onSelect: (value: V) => this.onSelect.emit(value),\n    });\n\n    afterRenderEffect(() => {\n      const parent = this.parent();\n      if (parent instanceof MenuItem && parent.parent instanceof MenuBar) {\n        this._deferredContentAware?.contentVisible.set(true);\n      } else {\n        this._deferredContentAware?.contentVisible.set(\n          this._pattern.isVisible() || !!this.parent()?.hasBeenFocused(),\n        );\n      }\n    });\n\n    // TODO(wagnermaciel): This is a redundancy needed for if the user uses display: none to hide\n    // submenus. In those cases, the ui pattern is calling focus() before the ui has a chance to\n    // update the display property. The result is focus() being called on an element that is not\n    // focusable. This simply retries focusing the element after render.\n    afterRenderEffect(() => {\n      if (this._pattern.isVisible()) {\n        const activeItem = untracked(() => this._pattern.inputs.activeItem());\n        this._pattern.listBehavior.goto(activeItem!);\n      }\n    });\n\n    afterRenderEffect(() => {\n      if (!this._pattern.hasBeenFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n\n  // TODO(wagnermaciel): Author close, closeAll, and open methods for each directive.\n\n  /** Closes the menu. */\n  close(opts?: {refocus?: boolean}) {\n    this._pattern.inputs.parent()?.close(opts);\n  }\n\n  /** Closes all parent menus. */\n  closeAll(opts?: {refocus?: boolean}) {\n    const root = this._pattern.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      root.close(opts);\n    }\n\n    if (root instanceof MenuPattern || root instanceof MenuBarPattern) {\n      root.inputs.activeItem()?.close(opts);\n    }\n  }\n}\n\n/**\n * A menu bar of menu items.\n *\n * Like the menu, a menubar is used to offer a list of menu item choices to users. However, a\n * menubar is used to display a persistent, top-level,\n * always-visible set of menu item choices.\n */\n@Directive({\n  selector: '[ngMenuBar]',\n  exportAs: 'ngMenuBar',\n  host: {\n    'role': 'menubar',\n    'class': 'ng-menu-bar',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(mouseover)': '_pattern.onMouseOver($event)',\n    '(click)': '_pattern.onClick($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class MenuBar<V> {\n  /** The menu items contained in the menubar. */\n  readonly _allItems = contentChildren<MenuItem<V>>(MenuItem, {descendants: true});\n\n  readonly _items: SignalLike<MenuItem<V>[]> = () =>\n    this._allItems().filter(i => i.parent === this);\n\n  /** A reference to the menu element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menubar element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The value of the menu. */\n  readonly value = model<V[]>([]);\n\n  /** Whether the menu should wrap its items. */\n  readonly wrap = input<boolean>(true);\n\n  /** The delay in seconds before the typeahead buffer is cleared. */\n  readonly typeaheadDelay = input<number>(0.5);\n\n  /** The menu ui pattern instance. */\n  readonly _pattern: MenuBarPattern<V>;\n\n  /** The menu items as a writable signal. */\n  readonly items = signal<MenuItemPattern<V>[]>([]);\n\n  /** A callback function triggered when a menu item is selected. */\n  onSelect = output<V>();\n\n  constructor() {\n    this._pattern = new MenuBarPattern({\n      ...this,\n      multi: () => false,\n      skipDisabled: () => false,\n      focusMode: () => 'roving',\n      orientation: () => 'horizontal',\n      selectionMode: () => 'explicit',\n      onSelect: (value: V) => this.onSelect.emit(value),\n      activeItem: signal(undefined),\n      element: computed(() => this._elementRef.nativeElement),\n    });\n\n    afterRenderEffect(() => {\n      this.items.set(this._items().map(i => i._pattern));\n    });\n\n    afterRenderEffect(() => {\n      if (!this._pattern.hasBeenFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n}\n\n/**\n * An item in a Menu.\n *\n * Menu items can be used in menus and menubars to represent a choice or action a user can take.\n */\n@Directive({\n  selector: '[ngMenuItem]',\n  exportAs: 'ngMenuItem',\n  host: {\n    'role': 'menuitem',\n    'class': 'ng-menu-item',\n    '(focusin)': 'onFocusIn()',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.data-active]': '_pattern.isActive()',\n    '[attr.aria-haspopup]': '_pattern.hasPopup()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-controls]': '_pattern.submenu()?.id()',\n  },\n})\nexport class MenuItem<V> {\n  /** A reference to the menu item element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The unique ID of the menu item. */\n  readonly id = input<string>(inject(_IdGenerator).getId('ng-menu-item-', true));\n\n  /** The value of the menu item. */\n  readonly value = input.required<V>();\n\n  /** Whether the menu item is disabled. */\n  readonly disabled = input<boolean>(false);\n\n  // TODO(wagnermaciel): Discuss whether all inputs should be models.\n\n  /** The search term associated with the menu item. */\n  readonly searchTerm = model<string>('');\n\n  /** A reference to the parent menu. */\n  private readonly _menu = inject<Menu<V>>(Menu, {optional: true});\n\n  /** A reference to the parent menu bar. */\n  private readonly _menuBar = inject<MenuBar<V>>(MenuBar, {optional: true});\n\n  /** A reference to the parent menu or menubar. */\n  readonly parent = this._menu ?? this._menuBar;\n\n  /** The submenu associated with the menu item. */\n  readonly submenu = input<Menu<V> | undefined>(undefined);\n\n  /** Whether the menu item has been focused. */\n  readonly hasBeenFocused = signal(false);\n\n  /** The menu item ui pattern instance. */\n  readonly _pattern: MenuItemPattern<V> = new MenuItemPattern<V>({\n    id: this.id,\n    value: this.value,\n    element: computed(() => this._elementRef.nativeElement),\n    disabled: this.disabled,\n    searchTerm: this.searchTerm,\n    parent: computed(() => this.parent?._pattern),\n    submenu: computed(() => this.submenu()?._pattern),\n  });\n\n  constructor() {\n    effect(() => this.submenu()?.parent.set(this));\n  }\n\n  /** Marks the menu item as having been focused. */\n  onFocusIn() {\n    this.hasBeenFocused.set(true);\n  }\n}\n\n/** Defers the rendering of the menu content. */\n@Directive({\n  selector: 'ng-template[ngMenuContent]',\n  exportAs: 'ngMenuContent',\n  hostDirectives: [DeferredContent],\n})\nexport class MenuContent {}\n"],"names":["onFocusIn","hasBeenFocused","set","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","MenuTrigger","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective","isStandalone","selector","inputs","menu","classPropertyName","publicName","isSignal","isRequired","transformFunction","host","listeners","properties","classAttribute","exportAs","decorators","args","ctorParameters","_elementRef","inject","ElementRef","change","initialValue","_directionality","value","id","input","_IdGenerator","getId","ngDevMode","debugName","wrap","items","_items","map","i","_pattern","MenuPattern","parent","computed","multi","skipDisabled","focusMode","orientation","selectionMode","activeItem","signal","undefined","element","nativeElement","onSelect","emit","MenuItem","MenuBar","_deferredContentAware","contentVisible","isVisible","untracked","listBehavior","goto","afterRenderEffect","close","root","MenuTriggerPattern","MenuBarPattern","opts","Menu","typeaheadDelay","outputs","attributes","queries","propertyName","predicate","descendants","hostDirectives","directive","i1","DeferredContentAware","output","constructor"],"mappings":"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"}