{"version":3,"file":"menu.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/menu/menu.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  computed,\n  contentChildren,\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  model,\n  output,\n  Signal,\n  signal,\n  untracked,\n} from '@angular/core';\nimport {\n  SignalLike,\n  MenuBarPattern,\n  MenuItemPattern,\n  MenuPattern,\n  MenuTriggerPattern,\n} from '@angular/aria/private';\nimport {toSignal} from '@angular/core/rxjs-interop';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * A trigger for a menu.\n *\n * The menu trigger is used to open and close menus, and can be placed on menu items to connect\n * sub-menus.\n */\n@Directive({\n  selector: 'button[ngMenuTrigger]',\n  exportAs: 'ngMenuTrigger',\n  host: {\n    'class': 'ng-menu-trigger',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-haspopup]': '_pattern.hasPopup()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-controls]': '_pattern.submenu()?.id()',\n    '(click)': '_pattern.onClick()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class MenuTrigger<V> {\n  /** A reference to the menu trigger element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLButtonElement = this._elementRef.nativeElement;\n\n  // TODO(wagnermaciel): See we can remove the need to pass in a submenu.\n\n  /** The submenu associated with the menu trigger. */\n  submenu = input<Menu<V> | undefined>(undefined);\n\n  /** A callback function triggered when a menu item is selected. */\n  onSubmit = output<V>();\n\n  /** The menu trigger ui pattern instance. */\n  readonly _pattern: MenuTriggerPattern<V> = new MenuTriggerPattern({\n    onSubmit: (value: V) => this.onSubmit.emit(value),\n    element: computed(() => this._elementRef.nativeElement),\n    submenu: computed(() => this.submenu()?._pattern),\n  });\n}\n\n/**\n * A list of menu items.\n *\n * A menu is used to offer a list of menu item choices to users. Menus can be nested within other\n * menus to create sub-menus.\n *\n * ```html\n * <button ngMenuTrigger menu=\"menu\">Options</button>\n *\n * <div ngMenu #menu=\"ngMenu\">\n *   <div ngMenuItem>Star</div>\n *   <div ngMenuItem>Edit</div>\n *   <div ngMenuItem>Delete</div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[ngMenu]',\n  exportAs: 'ngMenu',\n  host: {\n    'role': 'menu',\n    'class': 'ng-menu',\n    '[attr.id]': '_pattern.id()',\n    '[attr.data-visible]': '_pattern.isVisible()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(mouseover)': '_pattern.onMouseOver($event)',\n    '(mouseout)': '_pattern.onMouseOut($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(click)': '_pattern.onClick($event)',\n  },\n})\nexport class Menu<V> {\n  /** The menu items contained in the menu. */\n  readonly _allItems = contentChildren<MenuItem<V>>(MenuItem, {descendants: true});\n\n  /** The menu items that are direct children of this menu. */\n  readonly _items: Signal<MenuItem<V>[]> = computed(() =>\n    this._allItems().filter(i => i.parent === this),\n  );\n\n  /** A reference to the menu element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The submenu associated with the menu. */\n  readonly submenu = input<Menu<V> | undefined>(undefined);\n\n  /** The unique ID of the menu. */\n  readonly id = input<string>(Math.random().toString(36).substring(2, 10));\n\n  /** Whether the menu should wrap its items. */\n  readonly wrap = input<boolean>(true);\n\n  /** The delay in seconds before the typeahead buffer is cleared. */\n  readonly typeaheadDelay = input<number>(0.5); // Picked arbitrarily.\n\n  /** A reference to the parent menu item or menu trigger. */\n  readonly parent = input<MenuTrigger<V> | MenuItem<V>>();\n\n  /** The menu ui pattern instance. */\n  readonly _pattern: MenuPattern<V>;\n\n  /**\n   * The menu items as a writable signal.\n   *\n   * TODO(wagnermaciel): This would normally be a computed, but using a computed causes a bug where\n   * sometimes the items array is empty. The bug can be reproduced by switching this to use a\n   * computed and then quickly opening and closing menus in the dev app.\n   */\n  readonly items = () => this._items().map(i => i._pattern);\n\n  /** Whether the menu is visible. */\n  isVisible = computed(() => this._pattern.isVisible());\n\n  /** A callback function triggered when a menu item is selected. */\n  onSubmit = output<V>();\n\n  constructor() {\n    this._pattern = new MenuPattern({\n      ...this,\n      parent: computed(() => this.parent()?._pattern),\n      multi: () => false,\n      skipDisabled: () => false,\n      focusMode: () => 'roving',\n      orientation: () => 'vertical',\n      selectionMode: () => 'explicit',\n      activeItem: signal(undefined),\n      element: computed(() => this._elementRef.nativeElement),\n      onSubmit: (value: V) => this.onSubmit.emit(value),\n    });\n\n    // TODO(wagnermaciel): This is a redundancy needed for if the user uses display: none to hide\n    // submenus. In those cases, the ui pattern is calling focus() before the ui has a chance to\n    // update the display property. The result is focus() being called on an element that is not\n    // focusable. This simply retries focusing the element after render.\n    afterRenderEffect(() => {\n      if (this._pattern.isVisible()) {\n        const activeItem = untracked(() => this._pattern.inputs.activeItem());\n        this._pattern.listBehavior.goto(activeItem!);\n      }\n    });\n\n    afterRenderEffect(() => {\n      if (!this._pattern.hasBeenFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n\n  // TODO(wagnermaciel): Author close, closeAll, and open methods for each directive.\n\n  /** Closes the menu. */\n  close(opts?: {refocus?: boolean}) {\n    this._pattern.inputs.parent()?.close(opts);\n  }\n\n  /** Closes all parent menus. */\n  closeAll(opts?: {refocus?: boolean}) {\n    const root = this._pattern.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      root.close(opts);\n    }\n\n    if (root instanceof MenuPattern || root instanceof MenuBarPattern) {\n      root.inputs.activeItem()?.close(opts);\n    }\n  }\n}\n\n/**\n * A menu bar of menu items.\n *\n * Like the menu, a menubar is used to offer a list of menu item choices to users. However, a\n * menubar is used to display a persistent, top-level,\n * always-visible set of menu item choices.\n */\n@Directive({\n  selector: '[ngMenuBar]',\n  exportAs: 'ngMenuBar',\n  host: {\n    'role': 'menubar',\n    'class': 'ng-menu-bar',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(mouseover)': '_pattern.onMouseOver($event)',\n    '(click)': '_pattern.onClick($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class MenuBar<V> {\n  /** The menu items contained in the menubar. */\n  readonly _allItems = contentChildren<MenuItem<V>>(MenuItem, {descendants: true});\n\n  readonly _items: SignalLike<MenuItem<V>[]> = () =>\n    this._allItems().filter(i => i.parent === this);\n\n  /** A reference to the menu element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menubar element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The value of the menu. */\n  readonly value = model<V[]>([]);\n\n  /** Whether the menu should wrap its items. */\n  readonly wrap = input<boolean>(true);\n\n  /** The delay in seconds before the typeahead buffer is cleared. */\n  readonly typeaheadDelay = input<number>(0.5);\n\n  /** The menu ui pattern instance. */\n  readonly _pattern: MenuBarPattern<V>;\n\n  /** The menu items as a writable signal. */\n  readonly items = signal<MenuItemPattern<V>[]>([]);\n\n  /** A callback function triggered when a menu item is selected. */\n  onSubmit = output<V>();\n\n  constructor() {\n    this._pattern = new MenuBarPattern({\n      ...this,\n      multi: () => false,\n      skipDisabled: () => false,\n      focusMode: () => 'roving',\n      orientation: () => 'horizontal',\n      selectionMode: () => 'explicit',\n      onSubmit: (value: V) => this.onSubmit.emit(value),\n      activeItem: signal(undefined),\n      element: computed(() => this._elementRef.nativeElement),\n    });\n\n    afterRenderEffect(() => {\n      this.items.set(this._items().map(i => i._pattern));\n    });\n\n    afterRenderEffect(() => {\n      if (!this._pattern.hasBeenFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n}\n\n/**\n * An item in a Menu.\n *\n * Menu items can be used in menus and menubars to represent a choice or action a user can take.\n */\n@Directive({\n  selector: '[ngMenuItem]',\n  exportAs: 'ngMenuItem',\n  host: {\n    'role': 'menuitem',\n    'class': 'ng-menu-item',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.data-active]': '_pattern.isActive()',\n    '[attr.aria-haspopup]': '_pattern.hasPopup()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-controls]': '_pattern.submenu()?.id()',\n  },\n})\nexport class MenuItem<V> {\n  /** A reference to the menu item element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The unique ID of the menu item. */\n  readonly id = input<string>(Math.random().toString(36).substring(2, 10));\n\n  /** The value of the menu item. */\n  readonly value = input.required<V>();\n\n  /** Whether the menu item is disabled. */\n  readonly disabled = input<boolean>(false);\n\n  // TODO(wagnermaciel): Discuss whether all inputs should be models.\n\n  /** The search term associated with the menu item. */\n  readonly searchTerm = model<string>('');\n\n  /** A reference to the parent menu. */\n  private readonly _menu = inject<Menu<V>>(Menu, {optional: true});\n\n  /** A reference to the parent menu bar. */\n  private readonly _menuBar = inject<MenuBar<V>>(MenuBar, {optional: true});\n\n  /** A reference to the parent menu or menubar. */\n  readonly parent = this._menu ?? this._menuBar;\n\n  /** The submenu associated with the menu item. */\n  readonly submenu = input<Menu<V> | undefined>(undefined);\n\n  /** The menu item ui pattern instance. */\n  readonly _pattern: MenuItemPattern<V> = new MenuItemPattern<V>({\n    id: this.id,\n    value: this.value,\n    element: computed(() => this._elementRef.nativeElement),\n    disabled: this.disabled,\n    searchTerm: this.searchTerm,\n    parent: computed(() => this.parent?._pattern),\n    submenu: computed(() => this.submenu()?._pattern),\n  });\n}\n"],"names":["submenu","computed","_pattern","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","MenuTrigger","deps","target","ɵɵFactoryTarget","Directive","isStandalone","selector","inputs","classPropertyName","publicName","isSignal","isRequired","transformFunction","outputs","onSubmit","host","listeners","properties","classAttribute","exportAs","decorators","args","_elementRef","inject","ElementRef","element","nativeElement","_directionality","Directionality","change","initialValue","value","ngDevMode","debugName","input","parent","undefined","MenuPattern","multi","skipDisabled","focusMode","orientation","selectionMode","activeItem","signal","isVisible","listBehavior","goto","afterRenderEffect","hasBeenFocused","setDefaultState","MenuTriggerPattern","root","Menu","ɵɵngDeclareDirective","id","wrap","typeaheadDelay","attributes","queries","propertyName","predicate","MenuItem","descendants","ctorParameters","constructor","emit","MenuBar","ɵdir"],"mappings":"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"}