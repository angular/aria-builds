{"version":3,"file":"menu.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/aria/menu/menu.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRenderEffect,\n  computed,\n  contentChildren,\n  Directive,\n  effect,\n  ElementRef,\n  inject,\n  input,\n  model,\n  output,\n  Signal,\n  signal,\n  untracked,\n} from '@angular/core';\nimport {\n  SignalLike,\n  MenuBarPattern,\n  MenuItemPattern,\n  MenuPattern,\n  MenuTriggerPattern,\n} from '@angular/aria/private';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {toSignal} from '@angular/core/rxjs-interop';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DeferredContent, DeferredContentAware} from '@angular/aria/deferred-content';\n\n/**\n * A trigger for a menu.\n *\n * The menu trigger is used to open and close menus, and can be placed on menu items to connect\n * sub-menus.\n */\n@Directive({\n  selector: 'button[ngMenuTrigger]',\n  exportAs: 'ngMenuTrigger',\n  host: {\n    'class': 'ng-menu-trigger',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.aria-haspopup]': '_pattern.hasPopup()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-controls]': '_pattern.menu()?.id()',\n    '(click)': '_pattern.onClick()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class MenuTrigger<V> {\n  /** A reference to the menu trigger element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLButtonElement = this._elementRef.nativeElement;\n\n  // TODO(wagnermaciel): See we can remove the need to pass in a submenu.\n\n  /** The menu associated with the trigger. */\n  menu = input<Menu<V> | undefined>(undefined);\n\n  /** The menu trigger ui pattern instance. */\n  _pattern: MenuTriggerPattern<V> = new MenuTriggerPattern({\n    element: computed(() => this._elementRef.nativeElement),\n    menu: computed(() => this.menu()?._pattern),\n  });\n\n  constructor() {\n    effect(() => this.menu()?.parent.set(this));\n  }\n}\n\n/**\n * A list of menu items.\n *\n * A menu is used to offer a list of menu item choices to users. Menus can be nested within other\n * menus to create sub-menus.\n *\n * ```html\n * <button ngMenuTrigger menu=\"menu\">Options</button>\n *\n * <div ngMenu #menu=\"ngMenu\">\n *   <div ngMenuItem>Star</div>\n *   <div ngMenuItem>Edit</div>\n *   <div ngMenuItem>Delete</div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[ngMenu]',\n  exportAs: 'ngMenu',\n  host: {\n    'role': 'menu',\n    'class': 'ng-menu',\n    '[attr.id]': '_pattern.id()',\n    '[attr.data-visible]': '_pattern.isVisible()',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(mouseover)': '_pattern.onMouseOver($event)',\n    '(mouseout)': '_pattern.onMouseOut($event)',\n    '(focusout)': '_pattern.onFocusOut($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(click)': '_pattern.onClick($event)',\n  },\n  hostDirectives: [\n    {\n      directive: DeferredContentAware,\n      inputs: ['preserveContent'],\n    },\n  ],\n})\nexport class Menu<V> {\n  /** The DeferredContentAware host directive. */\n  private readonly _deferredContentAware = inject(DeferredContentAware, {optional: true});\n\n  /** The menu items contained in the menu. */\n  readonly _allItems = contentChildren<MenuItem<V>>(MenuItem, {descendants: true});\n\n  /** The menu items that are direct children of this menu. */\n  readonly _items: Signal<MenuItem<V>[]> = computed(() =>\n    this._allItems().filter(i => i.parent === this),\n  );\n\n  /** A reference to the menu element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The unique ID of the menu. */\n  readonly id = input<string>(inject(_IdGenerator).getId('ng-menu-', true));\n\n  /** Whether the menu should wrap its items. */\n  readonly wrap = input<boolean>(true);\n\n  /** The delay in seconds before the typeahead buffer is cleared. */\n  readonly typeaheadDelay = input<number>(0.5); // Picked arbitrarily.\n\n  /** A reference to the parent menu item or menu trigger. */\n  readonly parent = signal<MenuTrigger<V> | MenuItem<V> | undefined>(undefined);\n\n  /** The menu ui pattern instance. */\n  readonly _pattern: MenuPattern<V>;\n\n  /**\n   * The menu items as a writable signal.\n   *\n   * TODO(wagnermaciel): This would normally be a computed, but using a computed causes a bug where\n   * sometimes the items array is empty. The bug can be reproduced by switching this to use a\n   * computed and then quickly opening and closing menus in the dev app.\n   */\n  readonly items = () => this._items().map(i => i._pattern);\n\n  /** Whether the menu is visible. */\n  isVisible = computed(() => this._pattern.isVisible());\n\n  /** A callback function triggered when a menu item is selected. */\n  onSelect = output<V>();\n\n  constructor() {\n    this._pattern = new MenuPattern({\n      ...this,\n      parent: computed(() => this.parent()?._pattern),\n      multi: () => false,\n      skipDisabled: () => false,\n      focusMode: () => 'roving',\n      orientation: () => 'vertical',\n      selectionMode: () => 'explicit',\n      activeItem: signal(undefined),\n      element: computed(() => this._elementRef.nativeElement),\n      onSelect: (value: V) => this.onSelect.emit(value),\n    });\n\n    afterRenderEffect(() => {\n      this._deferredContentAware?.contentVisible.set(this._pattern.isVisible());\n    });\n\n    // TODO(wagnermaciel): This is a redundancy needed for if the user uses display: none to hide\n    // submenus. In those cases, the ui pattern is calling focus() before the ui has a chance to\n    // update the display property. The result is focus() being called on an element that is not\n    // focusable. This simply retries focusing the element after render.\n    afterRenderEffect(() => {\n      if (this._pattern.isVisible()) {\n        const activeItem = untracked(() => this._pattern.inputs.activeItem());\n        this._pattern.listBehavior.goto(activeItem!);\n      }\n    });\n\n    afterRenderEffect(() => {\n      if (!this._pattern.hasBeenFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n\n  // TODO(wagnermaciel): Author close, closeAll, and open methods for each directive.\n\n  /** Closes the menu. */\n  close(opts?: {refocus?: boolean}) {\n    this._pattern.inputs.parent()?.close(opts);\n  }\n\n  /** Closes all parent menus. */\n  closeAll(opts?: {refocus?: boolean}) {\n    const root = this._pattern.root();\n\n    if (root instanceof MenuTriggerPattern) {\n      root.close(opts);\n    }\n\n    if (root instanceof MenuPattern || root instanceof MenuBarPattern) {\n      root.inputs.activeItem()?.close(opts);\n    }\n  }\n}\n\n/**\n * A menu bar of menu items.\n *\n * Like the menu, a menubar is used to offer a list of menu item choices to users. However, a\n * menubar is used to display a persistent, top-level,\n * always-visible set of menu item choices.\n */\n@Directive({\n  selector: '[ngMenuBar]',\n  exportAs: 'ngMenuBar',\n  host: {\n    'role': 'menubar',\n    'class': 'ng-menu-bar',\n    '(keydown)': '_pattern.onKeydown($event)',\n    '(mouseover)': '_pattern.onMouseOver($event)',\n    '(click)': '_pattern.onClick($event)',\n    '(focusin)': '_pattern.onFocusIn()',\n    '(focusout)': '_pattern.onFocusOut($event)',\n  },\n})\nexport class MenuBar<V> {\n  /** The menu items contained in the menubar. */\n  readonly _allItems = contentChildren<MenuItem<V>>(MenuItem, {descendants: true});\n\n  readonly _items: SignalLike<MenuItem<V>[]> = () =>\n    this._allItems().filter(i => i.parent === this);\n\n  /** A reference to the menu element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menubar element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The directionality (LTR / RTL) context for the application (or a subtree of it). */\n  private readonly _directionality = inject(Directionality);\n\n  /** A signal wrapper for directionality. */\n  readonly textDirection = toSignal(this._directionality.change, {\n    initialValue: this._directionality.value,\n  });\n\n  /** The value of the menu. */\n  readonly value = model<V[]>([]);\n\n  /** Whether the menu should wrap its items. */\n  readonly wrap = input<boolean>(true);\n\n  /** The delay in seconds before the typeahead buffer is cleared. */\n  readonly typeaheadDelay = input<number>(0.5);\n\n  /** The menu ui pattern instance. */\n  readonly _pattern: MenuBarPattern<V>;\n\n  /** The menu items as a writable signal. */\n  readonly items = signal<MenuItemPattern<V>[]>([]);\n\n  /** A callback function triggered when a menu item is selected. */\n  onSelect = output<V>();\n\n  constructor() {\n    this._pattern = new MenuBarPattern({\n      ...this,\n      multi: () => false,\n      skipDisabled: () => false,\n      focusMode: () => 'roving',\n      orientation: () => 'horizontal',\n      selectionMode: () => 'explicit',\n      onSelect: (value: V) => this.onSelect.emit(value),\n      activeItem: signal(undefined),\n      element: computed(() => this._elementRef.nativeElement),\n    });\n\n    afterRenderEffect(() => {\n      this.items.set(this._items().map(i => i._pattern));\n    });\n\n    afterRenderEffect(() => {\n      if (!this._pattern.hasBeenFocused()) {\n        this._pattern.setDefaultState();\n      }\n    });\n  }\n}\n\n/**\n * An item in a Menu.\n *\n * Menu items can be used in menus and menubars to represent a choice or action a user can take.\n */\n@Directive({\n  selector: '[ngMenuItem]',\n  exportAs: 'ngMenuItem',\n  host: {\n    'role': 'menuitem',\n    'class': 'ng-menu-item',\n    '[attr.tabindex]': '_pattern.tabindex()',\n    '[attr.data-active]': '_pattern.isActive()',\n    '[attr.aria-haspopup]': '_pattern.hasPopup()',\n    '[attr.aria-expanded]': '_pattern.expanded()',\n    '[attr.aria-disabled]': '_pattern.disabled()',\n    '[attr.aria-controls]': '_pattern.submenu()?.id()',\n  },\n})\nexport class MenuItem<V> {\n  /** A reference to the menu item element. */\n  private readonly _elementRef = inject(ElementRef);\n\n  /** A reference to the menu element. */\n  readonly element: HTMLElement = this._elementRef.nativeElement;\n\n  /** The unique ID of the menu item. */\n  readonly id = input<string>(inject(_IdGenerator).getId('ng-menu-item-', true));\n\n  /** The value of the menu item. */\n  readonly value = input.required<V>();\n\n  /** Whether the menu item is disabled. */\n  readonly disabled = input<boolean>(false);\n\n  // TODO(wagnermaciel): Discuss whether all inputs should be models.\n\n  /** The search term associated with the menu item. */\n  readonly searchTerm = model<string>('');\n\n  /** A reference to the parent menu. */\n  private readonly _menu = inject<Menu<V>>(Menu, {optional: true});\n\n  /** A reference to the parent menu bar. */\n  private readonly _menuBar = inject<MenuBar<V>>(MenuBar, {optional: true});\n\n  /** A reference to the parent menu or menubar. */\n  readonly parent = this._menu ?? this._menuBar;\n\n  /** The submenu associated with the menu item. */\n  readonly submenu = input<Menu<V> | undefined>(undefined);\n\n  /** The menu item ui pattern instance. */\n  readonly _pattern: MenuItemPattern<V> = new MenuItemPattern<V>({\n    id: this.id,\n    value: this.value,\n    element: computed(() => this._elementRef.nativeElement),\n    disabled: this.disabled,\n    searchTerm: this.searchTerm,\n    parent: computed(() => this.parent?._pattern),\n    submenu: computed(() => this.submenu()?._pattern),\n  });\n\n  constructor() {\n    effect(() => this.submenu()?.parent.set(this));\n  }\n}\n\n/** Defers the rendering of the menu content. */\n@Directive({\n  selector: 'ng-template[ngMenuContent]',\n  exportAs: 'ngMenuContent',\n  hostDirectives: [DeferredContent],\n})\nexport class MenuContent {}\n"],"names":["effect","menu","parent","set","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","MenuTrigger","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective","isStandalone","selector","inputs","classPropertyName","publicName","isSignal","isRequired","transformFunction","host","listeners","properties","classAttribute","exportAs","decorators","args","ctorParameters","_items","computed","_allItems","filter","i","ngDevMode","debugName","_elementRef","inject","ElementRef","element","nativeElement","change","initialValue","_directionality","value","input","_pattern","items","map","MenuPattern","multi","skipDisabled","focusMode","orientation","selectionMode","activeItem","signal","undefined","onSelect","emit","afterRenderEffect","untracked","listBehavior","goto","hasBeenFocused","setDefaultState","close","opts","closeAll","root","MenuBarPattern","ɵfac","Menu","id","wrap","typeaheadDelay","outputs","attributes","queries","propertyName","predicate","MenuItem","descendants","hostDirectives","directive","i1","DeferredContentAware","Directionality","model","constructor","MenuBar"],"mappings":"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"}